"use strict";(self.webpackChunkdocusaurus_temp=self.webpackChunkdocusaurus_temp||[]).push([[7254],{5635:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"BatchConversions","title":"BatchConversions","description":"/home/jcmint/anaconda3/envs/learningenv/bin/python","source":"@site/docs/01_BatchConversions.md","sourceDirName":".","slug":"/BatchConversions","permalink":"/docs/BatchConversions","draft":false,"unlisted":false,"editUrl":"https://github.com/csjoshc/csjoshc.github.io/tree/main/docs/01_BatchConversions.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"base","permalink":"/docs/utils/base"},"next":{"title":"Site update portal","permalink":"/docs/site_updates/base"}}');var o=t(4848),c=t(8453);const s={},r="Batch compiling",d={},a=[{value:"Converting from <code>.ipynb</code> to <code>.md</code>",id:"converting-from-ipynb-to-md",level:2},{value:"Converting from <code>.md</code> to <code>.md</code>",id:"converting-from-md-to-md",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import sys, IPython\nprint(sys.executable)\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = "all"\n'})}),"\n",(0,o.jsx)(n.p,{children:"/home/jcmint/anaconda3/envs/learningenv/bin/python"}),"\n",(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"batch-compiling",children:"Batch compiling"})}),"\n",(0,o.jsxs)(n.h2,{id:"converting-from-ipynb-to-md",children:["Converting from ",(0,o.jsx)(n.code,{children:".ipynb"})," to ",(0,o.jsx)(n.code,{children:".md"})]}),"\n",(0,o.jsxs)(n.p,{children:["First step is to convert all ",(0,o.jsx)(n.code,{children:".ipynb"})," files in the main directory and its subdirectories. This is necessary because nbconvert straight to html doesn't keep the page background color (solid black). Here I filter by file extension and recent modification date (past day)"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'! cd ..; find . -name "*.ipynb" -mtime -1  -exec jupyter nbconvert --to markdown {} \\;\n#  ipynb\n'})}),"\n",(0,o.jsxs)(n.h2,{id:"converting-from-md-to-md",children:["Converting from ",(0,o.jsx)(n.code,{children:".md"})," to ",(0,o.jsx)(n.code,{children:".md"})]}),"\n",(0,o.jsxs)(n.p,{children:["The final step is convering all ",(0,o.jsx)(n.code,{children:".md"})," files that were recently modified."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"# ! cd ..;  find ./ -iname \"*.ipynb\" -mtime -1 -ls -exec sh -c 'pandoc ${0} -s -M -o ${0%.ipynb}.md' {} \\;\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'! cd ..;  find ./ -iname "*.md" -mtime -1 -ls -exec sh -c \'pandoc ${0} -s --toc --highlight-style breezedark -M date="`date "+%B %e, %Y"`" -f markdown_strict+backtick_code_blocks+auto_identifiers  -t html  -o  ${0%.md}.md\' {} \\;\n# -mtime -1\n'})}),"\n",(0,o.jsx)(n.p,{children:"1213322      4 -rwxrwxrwx   1 jcmint   jcmint       1450 May 10 04:03 ./notes/General/CS50x2019/basics.md\n1161675      8 -rwxrwxrwx   1 jcmint   jcmint       6494 May 11 00:43 ./notes/Python/IntroCompThinkDataSci/unit3/unit3.md\n1221583      4 -rwxrwxrwx   1 jcmint   jcmint       2028 May 10 04:31 ./site_updates/5_2019/11_5_2019.md\n1157243      1 -rwxrwxrwx   1 jcmint   jcmint        577 May 11 00:52 ./site_updates/base.md\n1157554      4 -rwxrwxrwx   1 jcmint   jcmint       1836 May 10 23:37 ./utils/01_BatchConversions.md"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python"})})]})}function m(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var i=t(6540);const o={},c=i.createContext(o);function s(e){const n=i.useContext(c);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);