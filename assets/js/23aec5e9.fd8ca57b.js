"use strict";(self.webpackChunkdocusaurus_temp=self.webpackChunkdocusaurus_temp||[]).push([[4102],{8453:(e,n,d)=>{d.d(n,{R:()=>l,x:()=>t});var i=d(6540);const s={},r=i.createContext(s);function l(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:n},e.children)}},9083:(e,n,d)=>{d.r(n),d.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>o,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"Pandas3","title":"Pandas3","description":"/home/jcmint/anaconda3/envs/learningenv/bin/python","source":"@site/docs/4_Pandas3.md","sourceDirName":".","slug":"/Pandas3","permalink":"/docs/Pandas3","draft":false,"unlisted":false,"editUrl":"https://github.com/csjoshc/csjoshc.github.io/tree/main/docs/4_Pandas3.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{}}');var s=d(4848),r=d(8453);const l={},t="Dataframes - Subsetting & Cleaning# Change dir to the folder this .ipynb file is in",c={},a=[{value:"Filling, Replacing, ImputationsFilling in Data* Forward filling - take prior values to fill forward into missing values * <code>df.fillna(method = &#39;ffill&#39;)</code>* Backward filling * <code>df.fillna(method = &#39;backfill&#39;)</code>Replacing* Replace one value with another * <code>df = pd.replace(9999, 0)</code> * Replace 9999 with 0Dropping rows with missing values* <code>df.dropna(axis = 0)</code> * default 0 drops rows Linear interpolation (numeric) * fill in missing values based on averaging the value before and after* <code>df.interpolate()</code>## Data Operations - Slicing### Subset rows",id:"filling-replacing-imputationsfilling-in-data-forward-filling---take-prior-values-to-fill-forward-into-missing-values--dffillnamethod--ffill-backward-filling--dffillnamethod--backfillreplacing-replace-one-value-with-another--df--pdreplace9999-0--replace-9999-with-0dropping-rows-with-missing-values-dfdropnaaxis--0--default-0-drops-rows-linear-interpolation-numeric--fill-in-missing-values-based-on-averaging-the-value-before-and-after-dfinterpolate-data-operations---slicing-subset-rows",level:2},{value:"Filling, Replacing, Imputations",id:"filling-replacing-imputations",level:2},{value:"Data Operations - Slicing",id:"data-operations---slicing",level:2},{value:"Subset rows",id:"subset-rows",level:3},{value:"Frequency table",id:"frequency-table",level:3},{value:"Create derived variable column",id:"create-derived-variable-column",level:3},{value:"Add row by index location",id:"add-row-by-index-location",level:3},{value:"Drop row by index location",id:"drop-row-by-index-location",level:3},{value:"Drop column - <strong>del</strong>",id:"drop-column---del",level:3}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"\nprint(sys.executable)\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\nInteractiveShell.colors = \"Linux\"\nInteractiveShell.separate_in = 0\n\nimport matplotlib.pyplot as plt\nimport os, sys\nos.chdir(sys.path[0]) # Change dir to the folder this .ipynb file is in\nprint(os.listdir('../../../../data/w4pd'))\nmovies = pd.read_csv('../../../../data/w4pd/movies.csv')\ntags = pd.read_csv('../../../../data/w4pd/tags.csv')\nratings = pd.read_csv('../../../../data/w4pd/ratings.csv')\n"})}),"\n",(0,s.jsx)(n.p,{children:"/home/jcmint/anaconda3/envs/learningenv/bin/python\n['genome-scores.csv', 'genome-tags.csv', 'Icon\\r', 'links.csv', 'movies.csv', 'ratings.csv', 'README.txt', 'tags.csv']"}),"\n",(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"dataframes---subsetting--cleaning-change-dir-to-the-folder-this-ipynb-file-is-in",children:"Dataframes - Subsetting & Cleaning# Change dir to the folder this .ipynb file is in"})}),"\n",(0,s.jsx)(n.p,{children:"print(os.listdir('../../../../data/w4pd'))\nmovies = pd.read_csv('../../../../data/w4pd/movies.csv')\ntags = pd.read_csv('../../../../data/w4pd/tags.csv')\nratings = pd.read_csv('../../../../data/w4pd/ratings.csv')"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"/home/jcmint/anaconda3/envs/learningenv/bin/python\n['genome-scores.csv', 'genome-tags.csv', 'Icon\\r', 'links.csv', 'movies.csv', 'ratings.csv', 'README.txt', 'tags.csv']\n# Dataframes - Subsetting & Cleaning\n## Copy dataframe\n**Code:** `df.copy()`Certain ways of indexing will return a reference to the original object instead of a copy of an object. To make this explicit use `.copy()` when subsetting a df. ## Dataframe inspection and cleaning\n**Code:** `df.shape, df.isnull().any(), df.dropna()`* Find the shape* Test if any values in each column are NA* Drop ROWS with null values.\n\n```python\nprint(ratings.shape)\nprint(ratings.isnull().any())\n"})}),"\n",(0,s.jsx)(n.p,{children:"(20000263, 4)"}),"\n",(0,s.jsx)(n.p,{children:"dtype: bool"}),"\n",(0,s.jsxs)(n.h2,{id:"filling-replacing-imputationsfilling-in-data-forward-filling---take-prior-values-to-fill-forward-into-missing-values--dffillnamethod--ffill-backward-filling--dffillnamethod--backfillreplacing-replace-one-value-with-another--df--pdreplace9999-0--replace-9999-with-0dropping-rows-with-missing-values-dfdropnaaxis--0--default-0-drops-rows-linear-interpolation-numeric--fill-in-missing-values-based-on-averaging-the-value-before-and-after-dfinterpolate-data-operations---slicing-subset-rows",children:["Filling, Replacing, ImputationsFilling in Data* Forward filling - take prior values to fill forward into missing values * ",(0,s.jsx)(n.code,{children:"df.fillna(method = 'ffill')"}),"* Backward filling * ",(0,s.jsx)(n.code,{children:"df.fillna(method = 'backfill')"}),"Replacing* Replace one value with another * ",(0,s.jsx)(n.code,{children:"df = pd.replace(9999, 0)"})," * Replace 9999 with 0Dropping rows with missing values* ",(0,s.jsx)(n.code,{children:"df.dropna(axis = 0)"})," * default 0 drops rows Linear interpolation (numeric) * fill in missing values based on averaging the value before and after* ",(0,s.jsx)(n.code,{children:"df.interpolate()"}),"## Data Operations - Slicing### Subset rows"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"first_df = ratings[1:5]\nlast_df = ratings[-5:]\nfirst_df\nlast_df\n"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{}),(0,s.jsx)(n.th,{children:"userId"}),(0,s.jsx)(n.th,{children:"movieId"}),(0,s.jsx)(n.th,{children:"rating"}),(0,s.jsx)(n.th,{children:"timestamp"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"29"}),(0,s.jsx)(n.td,{children:"3.5"}),(0,s.jsx)(n.td,{children:"1112484676"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"2"}),(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"32"}),(0,s.jsx)(n.td,{children:"3.5"}),(0,s.jsx)(n.td,{children:"1112484819"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"3"}),(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"47"}),(0,s.jsx)(n.td,{children:"3.5"}),(0,s.jsx)(n.td,{children:"1112484727"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"4"}),(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"50"}),(0,s.jsx)(n.td,{children:"3.5"}),(0,s.jsx)(n.td,{children:"1112484580"})]})]})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{}),(0,s.jsx)(n.th,{children:"userId"}),(0,s.jsx)(n.th,{children:"movieId"}),(0,s.jsx)(n.th,{children:"rating"}),(0,s.jsx)(n.th,{children:"timestamp"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"20000258"}),(0,s.jsx)(n.td,{children:"138493"}),(0,s.jsx)(n.td,{children:"68954"}),(0,s.jsx)(n.td,{children:"4.5"}),(0,s.jsx)(n.td,{children:"1258126920"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"20000259"}),(0,s.jsx)(n.td,{children:"138493"}),(0,s.jsx)(n.td,{children:"69526"}),(0,s.jsx)(n.td,{children:"4.5"}),(0,s.jsx)(n.td,{children:"1259865108"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"20000260"}),(0,s.jsx)(n.td,{children:"138493"}),(0,s.jsx)(n.td,{children:"69644"}),(0,s.jsx)(n.td,{children:"3.0"}),(0,s.jsx)(n.td,{children:"1260209457"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"20000261"}),(0,s.jsx)(n.td,{children:"138493"}),(0,s.jsx)(n.td,{children:"70286"}),(0,s.jsx)(n.td,{children:"5.0"}),(0,s.jsx)(n.td,{children:"1258126944"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"20000262"}),(0,s.jsx)(n.td,{children:"138493"}),(0,s.jsx)(n.td,{children:"71619"}),(0,s.jsx)(n.td,{children:"2.5"}),(0,s.jsx)(n.td,{children:"1255811136"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"filling-replacing-imputations",children:"Filling, Replacing, Imputations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Forward filling - take prior values to fill forward into missing values"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"df.fillna(method = 'ffill')"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Backward filling"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"df.fillna(method = 'backfill')"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Replace one value with another"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"df = pd.replace(9999, 0)"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Replace 9999 with 0"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"df.dropna(axis = 0)"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"default 0 drops rows\nLinear interpolation (numeric)"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"fill in missing values based on averaging the value before and after"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"df.interpolate()"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"data-operations---slicing",children:"Data Operations - Slicing"}),"\n",(0,s.jsx)(n.h3,{id:"subset-rows",children:"Subset rows"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"first_df = ratings[1:5]\nlast_df = ratings[-5:]\nfirst_df\nlast_df\n"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{}),(0,s.jsx)(n.th,{children:"userId"}),(0,s.jsx)(n.th,{children:"movieId"}),(0,s.jsx)(n.th,{children:"rating"}),(0,s.jsx)(n.th,{children:"timestamp"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"29"}),(0,s.jsx)(n.td,{children:"3.5"}),(0,s.jsx)(n.td,{children:"1112484676"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"2"}),(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"32"}),(0,s.jsx)(n.td,{children:"3.5"}),(0,s.jsx)(n.td,{children:"1112484819"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"3"}),(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"47"}),(0,s.jsx)(n.td,{children:"3.5"}),(0,s.jsx)(n.td,{children:"1112484727"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"4"}),(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"50"}),(0,s.jsx)(n.td,{children:"3.5"}),(0,s.jsx)(n.td,{children:"1112484580"})]})]})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{}),(0,s.jsx)(n.th,{children:"userId"}),(0,s.jsx)(n.th,{children:"movieId"}),(0,s.jsx)(n.th,{children:"rating"}),(0,s.jsx)(n.th,{children:"timestamp"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"20000258"}),(0,s.jsx)(n.td,{children:"138493"}),(0,s.jsx)(n.td,{children:"68954"}),(0,s.jsx)(n.td,{children:"4.5"}),(0,s.jsx)(n.td,{children:"1258126920"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"20000259"}),(0,s.jsx)(n.td,{children:"138493"}),(0,s.jsx)(n.td,{children:"69526"}),(0,s.jsx)(n.td,{children:"4.5"}),(0,s.jsx)(n.td,{children:"1259865108"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"20000260"}),(0,s.jsx)(n.td,{children:"138493"}),(0,s.jsx)(n.td,{children:"69644"}),(0,s.jsx)(n.td,{children:"3.0"}),(0,s.jsx)(n.td,{children:"1260209457"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"20000261"}),(0,s.jsx)(n.td,{children:"138493"}),(0,s.jsx)(n.td,{children:"70286"}),(0,s.jsx)(n.td,{children:"5.0"}),(0,s.jsx)(n.td,{children:"1258126944"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"20000262"}),(0,s.jsx)(n.td,{children:"138493"}),(0,s.jsx)(n.td,{children:"71619"}),(0,s.jsx)(n.td,{children:"2.5"}),(0,s.jsx)(n.td,{children:"1255811136"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"frequency-table",children:"Frequency table"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Code:"})," ",(0,s.jsx)(n.code,{children:"df.value_counts()"}),"One column frequency table."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"ratings['rating'].value_counts()\n"})}),"\n",(0,s.jsx)(n.p,{children:"4.0    5561926\n3.0    4291193\n5.0    2898660\n3.5    2200156\n4.5    1534824\n2.0    1430997\n2.5     883398\n1.0     680732\n1.5     279252\n0.5     239125\nName: rating, dtype: int64"}),"\n",(0,s.jsx)(n.h3,{id:"create-derived-variable-column",children:"Create derived variable column"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"first_df['normalized'] = first_df['rating']/5\nfirst_df[['rating', 'normalized']]\n"})}),"\n",(0,s.jsx)(n.p,{children:"/home/jcmint/anaconda3/envs/learningenv/lib/python3.7/site-packages/ipykernel_launcher.py:1: SettingWithCopyWarning:\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead"}),"\n",(0,s.jsxs)(n.p,{children:["See the caveats in the documentation: ",(0,s.jsx)(n.a,{href:"https://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy",children:"https://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy"}),'\n"""Entry point for launching an IPython kernel.']}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{}),(0,s.jsx)(n.th,{children:"rating"}),(0,s.jsx)(n.th,{children:"normalized"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"3.5"}),(0,s.jsx)(n.td,{children:"0.7"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"2"}),(0,s.jsx)(n.td,{children:"3.5"}),(0,s.jsx)(n.td,{children:"0.7"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"3"}),(0,s.jsx)(n.td,{children:"3.5"}),(0,s.jsx)(n.td,{children:"0.7"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"4"}),(0,s.jsx)(n.td,{children:"3.5"}),(0,s.jsx)(n.td,{children:"0.7"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"add-row-by-index-location",children:"Add row by index location"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'first_df.loc[3] = ["test", "test2", "test3", False, True]\nfirst_df\n'})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{}),(0,s.jsx)(n.th,{children:"userId"}),(0,s.jsx)(n.th,{children:"movieId"}),(0,s.jsx)(n.th,{children:"rating"}),(0,s.jsx)(n.th,{children:"timestamp"}),(0,s.jsx)(n.th,{children:"normalized"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"29"}),(0,s.jsx)(n.td,{children:"3.5"}),(0,s.jsx)(n.td,{children:"1112484676"}),(0,s.jsx)(n.td,{children:"0.7"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"2"}),(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"32"}),(0,s.jsx)(n.td,{children:"3.5"}),(0,s.jsx)(n.td,{children:"1112484819"}),(0,s.jsx)(n.td,{children:"0.7"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"3"}),(0,s.jsx)(n.td,{children:"test"}),(0,s.jsx)(n.td,{children:"test2"}),(0,s.jsx)(n.td,{children:"test3"}),(0,s.jsx)(n.td,{children:"False"}),(0,s.jsx)(n.td,{children:"True"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"4"}),(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"50"}),(0,s.jsx)(n.td,{children:"3.5"}),(0,s.jsx)(n.td,{children:"1112484580"}),(0,s.jsx)(n.td,{children:"0.7"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"drop-row-by-index-location",children:"Drop row by index location"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"first_df = first_df.drop(3)\nfirst_df\n"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{}),(0,s.jsx)(n.th,{children:"userId"}),(0,s.jsx)(n.th,{children:"movieId"}),(0,s.jsx)(n.th,{children:"rating"}),(0,s.jsx)(n.th,{children:"timestamp"}),(0,s.jsx)(n.th,{children:"normalized"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"29"}),(0,s.jsx)(n.td,{children:"3.5"}),(0,s.jsx)(n.td,{children:"1112484676"}),(0,s.jsx)(n.td,{children:"0.7"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"2"}),(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"32"}),(0,s.jsx)(n.td,{children:"3.5"}),(0,s.jsx)(n.td,{children:"1112484819"}),(0,s.jsx)(n.td,{children:"0.7"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"4"}),(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"50"}),(0,s.jsx)(n.td,{children:"3.5"}),(0,s.jsx)(n.td,{children:"1112484580"}),(0,s.jsx)(n.td,{children:"0.7"})]})]})]}),"\n",(0,s.jsxs)(n.h3,{id:"drop-column---del",children:["Drop column - ",(0,s.jsx)(n.strong,{children:"del"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"del first_df['timestamp']\nfirst_df\n"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{}),(0,s.jsx)(n.th,{children:"userId"}),(0,s.jsx)(n.th,{children:"movieId"}),(0,s.jsx)(n.th,{children:"rating"}),(0,s.jsx)(n.th,{children:"normalized"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"29"}),(0,s.jsx)(n.td,{children:"3.5"}),(0,s.jsx)(n.td,{children:"0.7"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"2"}),(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"32"}),(0,s.jsx)(n.td,{children:"3.5"}),(0,s.jsx)(n.td,{children:"0.7"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"4"}),(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"50"}),(0,s.jsx)(n.td,{children:"3.5"}),(0,s.jsx)(n.td,{children:"0.7"})]})]})]})]})}function o(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);