"use strict";(self.webpackChunkdocusaurus_temp=self.webpackChunkdocusaurus_temp||[]).push([[11],{877:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>o,frontMatter:()=>i,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"Pandas2","title":"Pandas2","description":"/home/jcmint/anaconda3/envs/learningenv/bin/python","source":"@site/docs/4_Pandas2.md","sourceDirName":".","slug":"/Pandas2","permalink":"/docs/Pandas2","draft":false,"unlisted":false,"editUrl":"https://github.com/csjoshc/csjoshc.github.io/tree/main/docs/4_Pandas2.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{}}');var d=s(4848),r=s(8453);const i={},l="Dataframes - IntroductionStarting out with data in .csv form, with several files for this unit. Just putting the dataframe to terminal doesn't properly print when exporting to .md or .html (although it works fine in .iypnb) so I have to use tabulate or the default print.",c={},h=[{value:"Accessing rows",id:"accessing-rows",level:2},{value:"Listing columns",id:"listing-columns",level:2},{value:"List summary statistics",id:"list-summary-statistics",level:2},{value:"List correlations amongst variables",id:"list-correlations-amongst-variables",level:2},{value:"Other aggregate functions: <code>df. min(), max(), std(), mean()</code>",id:"other-aggregate-functions-df-min-max-std-mean",level:2},{value:"Test logical conditionals",id:"test-logical-conditionals",level:2},{value:"Filtering columns (return boolean col)",id:"filtering-columns-return-boolean-col",level:2},{value:"Other useful commands<code>pythonpd.read.json()pd.read_html()pd.read_sql_query()pd.read_sql_table()os.chdir()os.getcwd()os.listdir()</code>",id:"other-useful-commandspythonpdreadjsonpdread_htmlpdread_sql_querypdread_sql_tableoschdirosgetcwdoslistdir",level:2}];function a(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-python",children:'\nprint(sys.executable)\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = "all"\nInteractiveShell.colors = "Linux"\nInteractiveShell.separate_in = 0\n\n'})}),"\n",(0,d.jsx)(t.p,{children:"/home/jcmint/anaconda3/envs/learningenv/bin/python"}),"\n",(0,d.jsx)(t.header,{children:(0,d.jsxs)(t.h1,{id:"dataframes---introductionstarting-out-with-data-in-csv-form-with-several-files-for-this-unit-just-putting-the-dataframe-to-terminal-doesnt-properly-print-when-exporting-to-md-or-html-although-it-works-fine-in-iypnb-so-i-have-to-use-tabulate-or-the-default-print",children:["Dataframes - IntroductionStarting out with data in .csv form, with several files for this unit. Just putting the dataframe to terminal doesn't properly print when exporting to .md or .html (although it works fine in .iypnb) so I have to use ",(0,d.jsx)(t.code,{children:"tabulate"})," or the default print."]})}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-python",children:"\nimport os, sys\nos.chdir(sys.path[0]) # Change dir to the folder this .ipynb file is in\nprint(os.listdir('../../../../data/w4pd'))\nmovies = pd.read_csv('../../../../data/w4pd/movies.csv')\ntags = pd.read_csv('../../../../data/w4pd/tags.csv')\nratings = pd.read_csv('../../../../data/w4pd/ratings.csv')\nmovies.head()\n"})}),"\n",(0,d.jsx)(t.p,{children:"['genome-scores.csv', 'genome-tags.csv', 'Icon\\r', 'links.csv', 'movies.csv', 'ratings.csv', 'README.txt', 'tags.csv']"}),"\n",(0,d.jsxs)(t.table,{children:[(0,d.jsx)(t.thead,{children:(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.th,{}),(0,d.jsx)(t.th,{children:"movieId"}),(0,d.jsx)(t.th,{children:"title"}),(0,d.jsx)(t.th,{children:"genres"})]})}),(0,d.jsxs)(t.tbody,{children:[(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"0"}),(0,d.jsx)(t.td,{children:"1"}),(0,d.jsx)(t.td,{children:"Toy Story (1995)"}),(0,d.jsx)(t.td,{children:"Adventure"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"1"}),(0,d.jsx)(t.td,{children:"2"}),(0,d.jsx)(t.td,{children:"Jumanji (1995)"}),(0,d.jsx)(t.td,{children:"Adventure"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"2"}),(0,d.jsx)(t.td,{children:"3"}),(0,d.jsx)(t.td,{children:"Grumpier Old Men (1995)"}),(0,d.jsx)(t.td,{children:"Comedy"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"3"}),(0,d.jsx)(t.td,{children:"4"}),(0,d.jsx)(t.td,{children:"Waiting to Exhale (1995)"}),(0,d.jsx)(t.td,{children:"Comedy"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"4"}),(0,d.jsx)(t.td,{children:"5"}),(0,d.jsx)(t.td,{children:"Father of the Bride Part II (1995)"}),(0,d.jsx)(t.td,{children:"Comedy"})]})]})]}),"\n",(0,d.jsx)(t.h1,{id:"dataframes---introduction",children:"Dataframes - Introduction"}),"\n",(0,d.jsxs)(t.p,{children:["Starting out with data in .csv form, with several files for this unit. Just putting the dataframe to terminal doesn't properly print when exporting to .md or .html (although it works fine in .iypnb) so I have to use ",(0,d.jsx)(t.code,{children:"tabulate"})," or the default print."]}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-python",children:"\nimport os, sys\nos.chdir(sys.path[0]) # Change dir to the folder this .ipynb file is in\nprint(os.listdir('../../../../data/w4pd'))\nmovies = pd.read_csv('../../../../data/w4pd/movies.csv')\ntags = pd.read_csv('../../../../data/w4pd/tags.csv')\nratings = pd.read_csv('../../../../data/w4pd/ratings.csv')\nmovies.head()\n"})}),"\n",(0,d.jsx)(t.p,{children:"['genome-scores.csv', 'genome-tags.csv', 'Icon\\r', 'links.csv', 'movies.csv', 'ratings.csv', 'README.txt', 'tags.csv']"}),"\n",(0,d.jsxs)(t.table,{children:[(0,d.jsx)(t.thead,{children:(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.th,{}),(0,d.jsx)(t.th,{children:"movieId"}),(0,d.jsx)(t.th,{children:"title"}),(0,d.jsx)(t.th,{children:"genres"})]})}),(0,d.jsxs)(t.tbody,{children:[(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"0"}),(0,d.jsx)(t.td,{children:"1"}),(0,d.jsx)(t.td,{children:"Toy Story (1995)"}),(0,d.jsx)(t.td,{children:"Adventure"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"1"}),(0,d.jsx)(t.td,{children:"2"}),(0,d.jsx)(t.td,{children:"Jumanji (1995)"}),(0,d.jsx)(t.td,{children:"Adventure"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"2"}),(0,d.jsx)(t.td,{children:"3"}),(0,d.jsx)(t.td,{children:"Grumpier Old Men (1995)"}),(0,d.jsx)(t.td,{children:"Comedy"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"3"}),(0,d.jsx)(t.td,{children:"4"}),(0,d.jsx)(t.td,{children:"Waiting to Exhale (1995)"}),(0,d.jsx)(t.td,{children:"Comedy"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"4"}),(0,d.jsx)(t.td,{children:"5"}),(0,d.jsx)(t.td,{children:"Father of the Bride Part II (1995)"}),(0,d.jsx)(t.td,{children:"Comedy"})]})]})]}),"\n",(0,d.jsx)(t.h2,{id:"accessing-rows",children:"Accessing rows"}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-python",children:"row_0 = movies.iloc[0]\nrow_0\n"})}),"\n",(0,d.jsx)(t.p,{children:"movieId                                              1\ntitle                                 Toy Story (1995)\ngenres     Adventure|Animation|Children|Comedy|Fantasy\nName: 0, dtype: object"}),"\n",(0,d.jsx)(t.h2,{id:"listing-columns",children:"Listing columns"}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-python",children:"tags.columns\n"})}),"\n",(0,d.jsx)(t.p,{children:"Index(['userId', 'movieId', 'tag', 'timestamp'], dtype='object')"}),"\n",(0,d.jsx)(t.h2,{id:"list-summary-statistics",children:"List summary statistics"}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-python",children:"ratings.describe()\n"})}),"\n",(0,d.jsxs)(t.table,{children:[(0,d.jsx)(t.thead,{children:(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.th,{}),(0,d.jsx)(t.th,{children:"userId"}),(0,d.jsx)(t.th,{children:"movieId"}),(0,d.jsx)(t.th,{children:"rating"}),(0,d.jsx)(t.th,{children:"timestamp"})]})}),(0,d.jsxs)(t.tbody,{children:[(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"count"}),(0,d.jsx)(t.td,{children:"2.000026e+07"}),(0,d.jsx)(t.td,{children:"2.000026e+07"}),(0,d.jsx)(t.td,{children:"2.000026e+07"}),(0,d.jsx)(t.td,{children:"2.000026e+07"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"mean"}),(0,d.jsx)(t.td,{children:"6.904587e+04"}),(0,d.jsx)(t.td,{children:"9.041567e+03"}),(0,d.jsx)(t.td,{children:"3.525529e+00"}),(0,d.jsx)(t.td,{children:"1.100918e+09"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"std"}),(0,d.jsx)(t.td,{children:"4.003863e+04"}),(0,d.jsx)(t.td,{children:"1.978948e+04"}),(0,d.jsx)(t.td,{children:"1.051989e+00"}),(0,d.jsx)(t.td,{children:"1.621694e+08"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"min"}),(0,d.jsx)(t.td,{children:"1.000000e+00"}),(0,d.jsx)(t.td,{children:"1.000000e+00"}),(0,d.jsx)(t.td,{children:"5.000000e-01"}),(0,d.jsx)(t.td,{children:"7.896520e+08"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"25%"}),(0,d.jsx)(t.td,{children:"3.439500e+04"}),(0,d.jsx)(t.td,{children:"9.020000e+02"}),(0,d.jsx)(t.td,{children:"3.000000e+00"}),(0,d.jsx)(t.td,{children:"9.667977e+08"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"50%"}),(0,d.jsx)(t.td,{children:"6.914100e+04"}),(0,d.jsx)(t.td,{children:"2.167000e+03"}),(0,d.jsx)(t.td,{children:"3.500000e+00"}),(0,d.jsx)(t.td,{children:"1.103556e+09"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"75%"}),(0,d.jsx)(t.td,{children:"1.036370e+05"}),(0,d.jsx)(t.td,{children:"4.770000e+03"}),(0,d.jsx)(t.td,{children:"4.000000e+00"}),(0,d.jsx)(t.td,{children:"1.225642e+09"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"max"}),(0,d.jsx)(t.td,{children:"1.384930e+05"}),(0,d.jsx)(t.td,{children:"1.312620e+05"}),(0,d.jsx)(t.td,{children:"5.000000e+00"}),(0,d.jsx)(t.td,{children:"1.427784e+09"})]})]})]}),"\n",(0,d.jsx)(t.h2,{id:"list-correlations-amongst-variables",children:"List correlations amongst variables"}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-python",children:"ratings.corr()\n"})}),"\n",(0,d.jsxs)(t.table,{children:[(0,d.jsx)(t.thead,{children:(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.th,{}),(0,d.jsx)(t.th,{children:"userId"}),(0,d.jsx)(t.th,{children:"movieId"}),(0,d.jsx)(t.th,{children:"rating"}),(0,d.jsx)(t.th,{children:"timestamp"})]})}),(0,d.jsxs)(t.tbody,{children:[(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"userId"}),(0,d.jsx)(t.td,{children:"1.000000"}),(0,d.jsx)(t.td,{children:"-0.000850"}),(0,d.jsx)(t.td,{children:"0.001175"}),(0,d.jsx)(t.td,{children:"-0.003101"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"movieId"}),(0,d.jsx)(t.td,{children:"-0.000850"}),(0,d.jsx)(t.td,{children:"1.000000"}),(0,d.jsx)(t.td,{children:"0.002606"}),(0,d.jsx)(t.td,{children:"0.459096"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"rating"}),(0,d.jsx)(t.td,{children:"0.001175"}),(0,d.jsx)(t.td,{children:"0.002606"}),(0,d.jsx)(t.td,{children:"1.000000"}),(0,d.jsx)(t.td,{children:"-0.000512"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"timestamp"}),(0,d.jsx)(t.td,{children:"-0.003101"}),(0,d.jsx)(t.td,{children:"0.459096"}),(0,d.jsx)(t.td,{children:"-0.000512"}),(0,d.jsx)(t.td,{children:"1.000000"})]})]})]}),"\n",(0,d.jsxs)(t.h2,{id:"other-aggregate-functions-df-min-max-std-mean",children:["Other aggregate functions: ",(0,d.jsx)(t.code,{children:"df. min(), max(), std(), mean()"})]}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-python",children:"ratings.mode()\n"})}),"\n",(0,d.jsxs)(t.table,{children:[(0,d.jsx)(t.thead,{children:(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.th,{}),(0,d.jsx)(t.th,{children:"userId"}),(0,d.jsx)(t.th,{children:"movieId"}),(0,d.jsx)(t.th,{children:"rating"}),(0,d.jsx)(t.th,{children:"timestamp"})]})}),(0,d.jsx)(t.tbody,{children:(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"0"}),(0,d.jsx)(t.td,{children:"118205"}),(0,d.jsx)(t.td,{children:"296"}),(0,d.jsx)(t.td,{children:"4.0"}),(0,d.jsx)(t.td,{children:"825638400"})]})})]}),"\n",(0,d.jsx)(t.h2,{id:"test-logical-conditionals",children:"Test logical conditionals"}),"\n",(0,d.jsxs)(t.p,{children:[(0,d.jsx)(t.strong,{children:"Code:"})," ",(0,d.jsx)(t.code,{children:"any(df['col1'] > n), all(df['col1'] > n)"}),"Test if any or all cells in a column fit a logical condition"]}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-python",children:"any(ratings['rating'] == 0), all(ratings['rating'] > 0)\n"})}),"\n",(0,d.jsx)(t.p,{children:"(False, True)"}),"\n",(0,d.jsx)(t.h2,{id:"filtering-columns-return-boolean-col",children:"Filtering columns (return boolean col)"}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-python",children:"filter_1 = ratings['rating'] > 4\nsum(filter_1)/len(ratings)\n"})}),"\n",(0,d.jsx)(t.p,{children:"0.22167128502260194"}),"\n",(0,d.jsxs)(t.h2,{id:"other-useful-commandspythonpdreadjsonpdread_htmlpdread_sql_querypdread_sql_tableoschdirosgetcwdoslistdir",children:["Other useful commands",(0,d.jsx)(t.code,{children:"pythonpd.read.json()pd.read_html()pd.read_sql_query()pd.read_sql_table()os.chdir()os.getcwd()os.listdir()"})]})]})}function o(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,d.jsx)(t,{...e,children:(0,d.jsx)(a,{...e})}):a(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>l});var n=s(6540);const d={},r=n.createContext(d);function i(e){const t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:i(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);