"use strict";(self.webpackChunkdocusaurus_temp=self.webpackChunkdocusaurus_temp||[]).push([[4257],{4458:(e,i,n)=>{n.d(i,{A:()=>d});const d=n.p+"assets/images/7_ML_DT_20_0-cc7c8ad3785c479cdb0ee5a54a7340fb.png"},6834:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>l,default:()=>x,frontMatter:()=>r,metadata:()=>d,toc:()=>h});const d=JSON.parse('{"id":"Python/PythonforDataScience/ML_DT","title":"ML_DT","description":"\ud83c\udfe0 Home","source":"@site/docs/Python/PythonforDataScience/7_ML_DT.md","sourceDirName":"Python/PythonforDataScience","slug":"/Python/PythonforDataScience/ML_DT","permalink":"/docs/Python/PythonforDataScience/ML_DT","draft":false,"unlisted":false,"editUrl":"https://github.com/csjoshc/csjoshc.github.io/tree/main/docs/Python/PythonforDataScience/7_ML_DT.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"ML_Clust","permalink":"/docs/Python/PythonforDataScience/ML_Clust"},"next":{"title":"ML_Reg","permalink":"/docs/Python/PythonforDataScience/ML_Reg"}}');var t=n(4848),s=n(8453);const r={},l="Decision Tree",c={},h=[{value:"Cleaning Data",id:"cleaning-data",level:2},{value:"Prep data for analysis",id:"prep-data-for-analysis",level:2},{value:"Fit decision tree classifier and generate predictions",id:"fit-decision-tree-classifier-and-generate-predictions",level:2},{value:"Extending the example",id:"extending-the-example",level:2},{value:"ROC Curve",id:"roc-curve",level:2},{value:"Classification accuracy vs Threshold for classifying as high humidity",id:"classification-accuracy-vs-threshold-for-classifying-as-high-humidity",level:2}];function a(e){const i={code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.p,{children:"\ud83c\udfe0 Home\n\ud83d\udc0d Python"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'\nprint(sys.executable)\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = "all"\nInteractiveShell.colors = "Linux"\nInteractiveShell.separate_in = 0\n\nimport matplotlib.pyplot as plt\n\nstyle.use(\'fivethirtyeight\')\n'})}),"\n",(0,t.jsx)(i.p,{children:"/home/jcmint/anaconda3/envs/learningenv/bin/python"}),"\n",(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"decision-tree",children:"Decision Tree"})}),"\n",(0,t.jsx)(i.p,{children:"Needed to install scikit-learn package with conda."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:"# Import libraries for decision tree\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Import Data\ndata = pd.read_csv('Week-7-MachineLearning/weather/daily_weather.csv')\ndata.head()\n"})}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{}),(0,t.jsx)(i.th,{children:"number"}),(0,t.jsx)(i.th,{children:"air_pressure_9am"}),(0,t.jsx)(i.th,{children:"air_temp_9am"}),(0,t.jsx)(i.th,{children:"avg_wind_direction_9am"}),(0,t.jsx)(i.th,{children:"avg_wind_speed_9am"}),(0,t.jsx)(i.th,{children:"max_wind_direction_9am"}),(0,t.jsx)(i.th,{children:"max_wind_speed_9am"}),(0,t.jsx)(i.th,{children:"rain_accumulation_9am"}),(0,t.jsx)(i.th,{children:"rain_duration_9am"}),(0,t.jsx)(i.th,{children:"relative_humidity_9am"}),(0,t.jsx)(i.th,{children:"relative_humidity_3pm"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"0"}),(0,t.jsx)(i.td,{children:"0"}),(0,t.jsx)(i.td,{children:"918.060000"}),(0,t.jsx)(i.td,{children:"74.822000"}),(0,t.jsx)(i.td,{children:"271.100000"}),(0,t.jsx)(i.td,{children:"2.080354"}),(0,t.jsx)(i.td,{children:"295.400000"}),(0,t.jsx)(i.td,{children:"2.863283"}),(0,t.jsx)(i.td,{children:"0.0"}),(0,t.jsx)(i.td,{children:"0.0"}),(0,t.jsx)(i.td,{children:"42.420000"}),(0,t.jsx)(i.td,{children:"36.160000"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"1"}),(0,t.jsx)(i.td,{children:"1"}),(0,t.jsx)(i.td,{children:"917.347688"}),(0,t.jsx)(i.td,{children:"71.403843"}),(0,t.jsx)(i.td,{children:"101.935179"}),(0,t.jsx)(i.td,{children:"2.443009"}),(0,t.jsx)(i.td,{children:"140.471548"}),(0,t.jsx)(i.td,{children:"3.533324"}),(0,t.jsx)(i.td,{children:"0.0"}),(0,t.jsx)(i.td,{children:"0.0"}),(0,t.jsx)(i.td,{children:"24.328697"}),(0,t.jsx)(i.td,{children:"19.426597"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"2"}),(0,t.jsx)(i.td,{children:"2"}),(0,t.jsx)(i.td,{children:"923.040000"}),(0,t.jsx)(i.td,{children:"60.638000"}),(0,t.jsx)(i.td,{children:"51.000000"}),(0,t.jsx)(i.td,{children:"17.067852"}),(0,t.jsx)(i.td,{children:"63.700000"}),(0,t.jsx)(i.td,{children:"22.100967"}),(0,t.jsx)(i.td,{children:"0.0"}),(0,t.jsx)(i.td,{children:"20.0"}),(0,t.jsx)(i.td,{children:"8.900000"}),(0,t.jsx)(i.td,{children:"14.460000"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"3"}),(0,t.jsx)(i.td,{children:"3"}),(0,t.jsx)(i.td,{children:"920.502751"}),(0,t.jsx)(i.td,{children:"70.138895"}),(0,t.jsx)(i.td,{children:"198.832133"}),(0,t.jsx)(i.td,{children:"4.337363"}),(0,t.jsx)(i.td,{children:"211.203341"}),(0,t.jsx)(i.td,{children:"5.190045"}),(0,t.jsx)(i.td,{children:"0.0"}),(0,t.jsx)(i.td,{children:"0.0"}),(0,t.jsx)(i.td,{children:"12.189102"}),(0,t.jsx)(i.td,{children:"12.742547"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"4"}),(0,t.jsx)(i.td,{children:"4"}),(0,t.jsx)(i.td,{children:"921.160000"}),(0,t.jsx)(i.td,{children:"44.294000"}),(0,t.jsx)(i.td,{children:"277.800000"}),(0,t.jsx)(i.td,{children:"1.856660"}),(0,t.jsx)(i.td,{children:"136.500000"}),(0,t.jsx)(i.td,{children:"2.863283"}),(0,t.jsx)(i.td,{children:"8.9"}),(0,t.jsx)(i.td,{children:"14730.0"}),(0,t.jsx)(i.td,{children:"92.410000"}),(0,t.jsx)(i.td,{children:"76.740000"})]})]})]}),"\n",(0,t.jsx)(i.h2,{id:"cleaning-data",children:"Cleaning Data"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"drop 'number' column"}),"\n",(0,t.jsx)(i.li,{children:"drop NA rows"}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:"clean_data = data.copy()\nclean_data[clean_data.isnull().any(axis = 1)].head()\n"})}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{}),(0,t.jsx)(i.th,{children:"number"}),(0,t.jsx)(i.th,{children:"air_pressure_9am"}),(0,t.jsx)(i.th,{children:"air_temp_9am"}),(0,t.jsx)(i.th,{children:"avg_wind_direction_9am"}),(0,t.jsx)(i.th,{children:"avg_wind_speed_9am"}),(0,t.jsx)(i.th,{children:"max_wind_direction_9am"}),(0,t.jsx)(i.th,{children:"max_wind_speed_9am"}),(0,t.jsx)(i.th,{children:"rain_accumulation_9am"}),(0,t.jsx)(i.th,{children:"rain_duration_9am"}),(0,t.jsx)(i.th,{children:"relative_humidity_9am"}),(0,t.jsx)(i.th,{children:"relative_humidity_3pm"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"16"}),(0,t.jsx)(i.td,{children:"16"}),(0,t.jsx)(i.td,{children:"917.890000"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"169.200000"}),(0,t.jsx)(i.td,{children:"2.192201"}),(0,t.jsx)(i.td,{children:"196.800000"}),(0,t.jsx)(i.td,{children:"2.930391"}),(0,t.jsx)(i.td,{children:"0.0"}),(0,t.jsx)(i.td,{children:"0.0"}),(0,t.jsx)(i.td,{children:"48.990000"}),(0,t.jsx)(i.td,{children:"51.190000"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"111"}),(0,t.jsx)(i.td,{children:"111"}),(0,t.jsx)(i.td,{children:"915.290000"}),(0,t.jsx)(i.td,{children:"58.820000"}),(0,t.jsx)(i.td,{children:"182.600000"}),(0,t.jsx)(i.td,{children:"15.613841"}),(0,t.jsx)(i.td,{children:"189.000000"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"0.0"}),(0,t.jsx)(i.td,{children:"0.0"}),(0,t.jsx)(i.td,{children:"21.500000"}),(0,t.jsx)(i.td,{children:"29.690000"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"177"}),(0,t.jsx)(i.td,{children:"177"}),(0,t.jsx)(i.td,{children:"915.900000"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"183.300000"}),(0,t.jsx)(i.td,{children:"4.719943"}),(0,t.jsx)(i.td,{children:"189.900000"}),(0,t.jsx)(i.td,{children:"5.346287"}),(0,t.jsx)(i.td,{children:"0.0"}),(0,t.jsx)(i.td,{children:"0.0"}),(0,t.jsx)(i.td,{children:"29.260000"}),(0,t.jsx)(i.td,{children:"46.500000"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"262"}),(0,t.jsx)(i.td,{children:"262"}),(0,t.jsx)(i.td,{children:"923.596607"}),(0,t.jsx)(i.td,{children:"58.380598"}),(0,t.jsx)(i.td,{children:"47.737753"}),(0,t.jsx)(i.td,{children:"10.636273"}),(0,t.jsx)(i.td,{children:"67.145843"}),(0,t.jsx)(i.td,{children:"13.671423"}),(0,t.jsx)(i.td,{children:"0.0"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"17.990876"}),(0,t.jsx)(i.td,{children:"16.461685"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"277"}),(0,t.jsx)(i.td,{children:"277"}),(0,t.jsx)(i.td,{children:"920.480000"}),(0,t.jsx)(i.td,{children:"62.600000"}),(0,t.jsx)(i.td,{children:"194.400000"}),(0,t.jsx)(i.td,{children:"2.751436"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"3.869906"}),(0,t.jsx)(i.td,{children:"0.0"}),(0,t.jsx)(i.td,{children:"0.0"}),(0,t.jsx)(i.td,{children:"52.580000"}),(0,t.jsx)(i.td,{children:"54.030000"})]})]})]}),"\n",(0,t.jsx)(i.p,{children:"I will drop these rows for now. However, that isn't the only thing you can do with them (you could use linear interpolation since they are numeric and this is time series data with evenly spaces intervals)"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:"del clean_data['number']\nclean_data = clean_data.dropna()\n"})}),"\n",(0,t.jsx)(i.h2,{id:"prep-data-for-analysis",children:"Prep data for analysis"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Bin humidity values into low (0) and high (1) to make it a binary classification problem and store in ",(0,t.jsx)(i.code,{children:"high_humidity_label"})]}),"\n",(0,t.jsxs)(i.li,{children:["store bin labels as ",(0,t.jsx)(i.code,{children:"y"})]}),"\n",(0,t.jsxs)(i.li,{children:["Store training variables names into ",(0,t.jsx)(i.code,{children:"morning_features"}),", then store training data into ",(0,t.jsx)(i.code,{children:"x"})]}),"\n",(0,t.jsxs)(i.li,{children:["split ",(0,t.jsx)(i.code,{children:"x"})," and ",(0,t.jsx)(i.code,{children:"y"})," into training and testing subsets, ",(0,t.jsx)(i.code,{children:"x_train"}),", ",(0,t.jsx)(i.code,{children:"x_test"}),", ",(0,t.jsx)(i.code,{children:"y_train"}),", ",(0,t.jsx)(i.code,{children:"y_test"})]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:"clean_data['high_humidity_label'] = (clean_data['relative_humidity_3pm'] >= 25)*1\nclean_data[['high_humidity_label','relative_humidity_3pm']].head(8)\ny=clean_data[['high_humidity_label']].copy()\nmorning_features = ['air_pressure_9am','air_temp_9am','avg_wind_direction_9am','avg_wind_speed_9am',\n        'max_wind_direction_9am','max_wind_speed_9am','rain_accumulation_9am',\n        'rain_duration_9am']\nx = clean_data[morning_features].copy()\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.33, random_state=324).copy()\n"})}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{}),(0,t.jsx)(i.th,{children:"high_humidity_label"}),(0,t.jsx)(i.th,{children:"relative_humidity_3pm"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"0"}),(0,t.jsx)(i.td,{children:"1"}),(0,t.jsx)(i.td,{children:"36.160000"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"1"}),(0,t.jsx)(i.td,{children:"0"}),(0,t.jsx)(i.td,{children:"19.426597"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"2"}),(0,t.jsx)(i.td,{children:"0"}),(0,t.jsx)(i.td,{children:"14.460000"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"3"}),(0,t.jsx)(i.td,{children:"0"}),(0,t.jsx)(i.td,{children:"12.742547"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"4"}),(0,t.jsx)(i.td,{children:"1"}),(0,t.jsx)(i.td,{children:"76.740000"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"5"}),(0,t.jsx)(i.td,{children:"1"}),(0,t.jsx)(i.td,{children:"33.930000"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"6"}),(0,t.jsx)(i.td,{children:"0"}),(0,t.jsx)(i.td,{children:"21.385657"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"7"}),(0,t.jsx)(i.td,{children:"1"}),(0,t.jsx)(i.td,{children:"74.920000"})]})]})]}),"\n",(0,t.jsx)(i.h2,{id:"fit-decision-tree-classifier-and-generate-predictions",children:"Fit decision tree classifier and generate predictions"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Create decision tree object (object attributes passed)"}),"\n",(0,t.jsx)(i.li,{children:"run decision tree method with training data"}),"\n",(0,t.jsx)(i.li,{children:"run decision tree method with testing intput data"}),"\n",(0,t.jsx)(i.li,{children:"look at results, calculate average accuracy"}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:"humidity_classifier = DecisionTreeClassifier(max_leaf_nodes=10, random_state=0);\nhumidity_classifier.fit(x_train, y_train);\ny_test.loc[:,'predictions'] = humidity_classifier.predict(x_test)\ny_test.head(10)\n(y_test.iloc[:,0] == y_test.iloc[:,1]).mean()\n"})}),"\n",(0,t.jsx)(i.p,{children:"DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=None,\nmax_features=None, max_leaf_nodes=10,\nmin_impurity_decrease=0.0, min_impurity_split=None,\nmin_samples_leaf=1, min_samples_split=2,\nmin_weight_fraction_leaf=0.0, presort=False, random_state=0,\nsplitter='best')"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{}),(0,t.jsx)(i.th,{children:"high_humidity_label"}),(0,t.jsx)(i.th,{children:"predictions"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"456"}),(0,t.jsx)(i.td,{children:"0"}),(0,t.jsx)(i.td,{children:"0"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"845"}),(0,t.jsx)(i.td,{children:"0"}),(0,t.jsx)(i.td,{children:"0"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"693"}),(0,t.jsx)(i.td,{children:"1"}),(0,t.jsx)(i.td,{children:"1"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"259"}),(0,t.jsx)(i.td,{children:"1"}),(0,t.jsx)(i.td,{children:"1"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"723"}),(0,t.jsx)(i.td,{children:"1"}),(0,t.jsx)(i.td,{children:"1"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"224"}),(0,t.jsx)(i.td,{children:"1"}),(0,t.jsx)(i.td,{children:"1"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"300"}),(0,t.jsx)(i.td,{children:"1"}),(0,t.jsx)(i.td,{children:"0"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"442"}),(0,t.jsx)(i.td,{children:"0"}),(0,t.jsx)(i.td,{children:"0"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"585"}),(0,t.jsx)(i.td,{children:"1"}),(0,t.jsx)(i.td,{children:"0"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"1057"}),(0,t.jsx)(i.td,{children:"1"}),(0,t.jsx)(i.td,{children:"1"})]})]})]}),"\n",(0,t.jsx)(i.p,{children:"0.8153409090909091"}),"\n",(0,t.jsx)(i.h2,{id:"extending-the-example",children:"Extending the example"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"I want to see how the 'threshold' for binning affects the classification accuracy (e.g. if the cutoff is closer to the mean then it should be less accurate)"}),"\n",(0,t.jsx)(i.li,{children:"Instead of dropping the null values, linear impute and create a new variable to as a shadow variable (1 in this column means that another column was imputed)"}),"\n",(0,t.jsx)(i.li,{children:"Iterate through random states for splitting into test and train sets (10 tries) - return vector of accuracy values"}),"\n",(0,t.jsx)(i.li,{children:"refactor decision tree to a method to return vectors of classification accuracy and recall (true positive rate for the high humidity label) for  a specific threshold"}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:"clean_data = data.copy()\nclean_data.loc[clean_data.isnull().any(axis = 1),'Missing'] = 1\nclean_data['Missing'] = clean_data['Missing'].fillna(0)\nprint(\"Number of interpolated values:\", sum(clean_data['Missing']))\nclean_data = clean_data.interpolate()\nmorning_features.append('Missing')\nx = clean_data[morning_features].copy()\ndef tree_acc_recall(threshold):\n    clean_data['high_humidity_label'] = (clean_data['relative_humidity_3pm'] >= threshold)*1\n    y=clean_data[['high_humidity_label']]\n    # x stays the same\n    my_val = pd.DataFrame(columns = ['Accuracy', 'True Positives', 'False Positives'], index = range(0,20))\n    for i in range(0,20): # 20 trials for each threshold\n        x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.33, random_state=randint(99,100000000))\n        humidity_classifier = DecisionTreeClassifier(max_leaf_nodes=10, random_state=0);\n        humidity_classifier.fit(x_train, y_train);\n        y_test['predictions'] = humidity_classifier.predict(x_test)\n        nums = confusion_matrix(y_test['high_humidity_label'], y_test['predictions']).ravel()\n        if (len(nums) == 1):\n            tn, fp, fn, tp = 1, 1, 1, 1\n        else:\n            tn, fp, fn, tp = nums\n            my_val.iloc[[i],0] = (tp + tn)/(tn + fp + fn + tp)\n            my_val.iloc[[i],1] = tp/(tp + fn)\n            my_val.iloc[[i],2] = fp/(fp + tn)\n        # Too many chained operations, too confusing\n        #my_val.iloc[[i],0]  = (y_test.iloc[:,0] == y_test.iloc[:,1]).mean() # accuracy\n        #my_val.iloc[[i],1] = ((y_test.iloc[:,1] == 1)&(y_test.iloc[:,0] == y_test.iloc[:,1])).sum()/(y_test.iloc[:,0].sum()) # true positive \n        #my_val.iloc[[i],2] = ((y_test.iloc[:,1] == 1)&(y_test.iloc[:,0] != y_test.iloc[:,1])).sum()/(y_test.iloc[:,0].sum()) # false positive\n    return(my_val)\n"})}),"\n",(0,t.jsx)(i.p,{children:"Number of interpolated values: 31.0"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:"list(x)\n"})}),"\n",(0,t.jsx)(i.p,{children:"['air_pressure_9am',\n'air_temp_9am',\n'avg_wind_direction_9am',\n'avg_wind_speed_9am',\n'max_wind_direction_9am',\n'max_wind_speed_9am',\n'rain_accumulation_9am',\n'rain_duration_9am',\n'Missing']"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:"%%capture\nmy_out = pd.DataFrame(columns = ['Humidity Threshold', 'Average Accuracy', 'Average True Positives', 'Average False Positives'], index = range(0,101))\nk = 0\nfor i in range(0,101, 1):\n    temp = tree_acc_recall(i)\n    my_out.iloc[[k],0] = i\n    my_out.iloc[[k],1] = temp['Accuracy'].mean()\n    my_out.iloc[[k],2] = temp['True Positives'].mean()\n    my_out.iloc[[k],3] = temp['False Positives'].mean()\n    k+=1\n"})}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:"my_out.head(10)\nmy_out.tail(10)\n"})}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{}),(0,t.jsx)(i.th,{children:"Humidity Threshold"}),(0,t.jsx)(i.th,{children:"Average Accuracy"}),(0,t.jsx)(i.th,{children:"Average True Positives"}),(0,t.jsx)(i.th,{children:"Average False Positives"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"0"}),(0,t.jsx)(i.td,{children:"0"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"NaN"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"1"}),(0,t.jsx)(i.td,{children:"1"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"NaN"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"2"}),(0,t.jsx)(i.td,{children:"2"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"NaN"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"3"}),(0,t.jsx)(i.td,{children:"3"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"NaN"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"4"}),(0,t.jsx)(i.td,{children:"4"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"NaN"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"5"}),(0,t.jsx)(i.td,{children:"5"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"NaN"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"6"}),(0,t.jsx)(i.td,{children:"6"}),(0,t.jsx)(i.td,{children:"0.994911"}),(0,t.jsx)(i.td,{children:"0.996361"}),(0,t.jsx)(i.td,{children:"0.909091"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"7"}),(0,t.jsx)(i.td,{children:"7"}),(0,t.jsx)(i.td,{children:"0.99294"}),(0,t.jsx)(i.td,{children:"0.996611"}),(0,t.jsx)(i.td,{children:"0.75"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"8"}),(0,t.jsx)(i.td,{children:"8"}),(0,t.jsx)(i.td,{children:"0.985221"}),(0,t.jsx)(i.td,{children:"0.992595"}),(0,t.jsx)(i.td,{children:"0.637024"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"9"}),(0,t.jsx)(i.td,{children:"9"}),(0,t.jsx)(i.td,{children:"0.977901"}),(0,t.jsx)(i.td,{children:"0.990382"}),(0,t.jsx)(i.td,{children:"0.576939"})]})]})]}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{}),(0,t.jsx)(i.th,{children:"Humidity Threshold"}),(0,t.jsx)(i.th,{children:"Average Accuracy"}),(0,t.jsx)(i.th,{children:"Average True Positives"}),(0,t.jsx)(i.th,{children:"Average False Positives"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"91"}),(0,t.jsx)(i.td,{children:"91"}),(0,t.jsx)(i.td,{children:"0.979282"}),(0,t.jsx)(i.td,{children:"0.194167"}),(0,t.jsx)(i.td,{children:"0.0124086"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"92"}),(0,t.jsx)(i.td,{children:"92"}),(0,t.jsx)(i.td,{children:"0.989677"}),(0,t.jsx)(i.td,{children:"0.125"}),(0,t.jsx)(i.td,{children:"0.00670898"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"93"}),(0,t.jsx)(i.td,{children:"93"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"NaN"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"94"}),(0,t.jsx)(i.td,{children:"94"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"NaN"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"95"}),(0,t.jsx)(i.td,{children:"95"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"NaN"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"96"}),(0,t.jsx)(i.td,{children:"96"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"NaN"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"97"}),(0,t.jsx)(i.td,{children:"97"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"NaN"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"98"}),(0,t.jsx)(i.td,{children:"98"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"NaN"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"99"}),(0,t.jsx)(i.td,{children:"99"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"NaN"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"100"}),(0,t.jsx)(i.td,{children:"100"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"NaN"}),(0,t.jsx)(i.td,{children:"NaN"})]})]})]}),"\n",(0,t.jsx)(i.h2,{id:"roc-curve",children:"ROC Curve"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"my_out"})," has NaN when it is dividing by 0, when the threshold is so high that there are no true or false positives"]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:"fig, axis = plt.subplots()\naxis.yaxis.grid(True)\naxis.set_title('ROC Curve',fontsize=16)\naxis.set_xlabel('False positive rate',fontsize=10)\naxis.set_ylabel('True Positive Rate',fontsize=10)\naxis.plot(my_out.iloc[:,3], my_out.iloc[:,2])\nplt.show();\n"})}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.img,{alt:"png",src:n(7835).A+"",width:"429",height:"297"})}),"\n",(0,t.jsx)(i.h2,{id:"classification-accuracy-vs-threshold-for-classifying-as-high-humidity",children:"Classification accuracy vs Threshold for classifying as high humidity"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:"fig, axis = plt.subplots()\naxis.yaxis.grid(True)\naxis.set_title('Accuracy vs Threshold',fontsize=16)\naxis.set_xlabel('High humidiy threshold',fontsize=10)\naxis.set_ylabel('Overall classification accuracy',fontsize=10)\naxis.plot(my_out.iloc[:,0], my_out.iloc[:,1])\nplt.show();\n"})}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.img,{alt:"png",src:n(4458).A+"",width:"438",height:"297"})})]})}function x(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},7835:(e,i,n)=>{n.d(i,{A:()=>d});const d=n.p+"assets/images/7_ML_DT_18_0-cba8b44ed3196af1bb13dea20d7a2808.png"},8453:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>l});var d=n(6540);const t={},s=d.createContext(t);function r(e){const i=d.useContext(s);return d.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),d.createElement(s.Provider,{value:i},e.children)}}}]);