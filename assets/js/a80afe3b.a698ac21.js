"use strict";(self.webpackChunkdocusaurus_temp=self.webpackChunkdocusaurus_temp||[]).push([[9089],{3345:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"Python/ProbabilityandStatistics/Sets","title":"Sets","description":"\ud83c\udfe0 Home","source":"@site/docs/Python/ProbabilityandStatistics/2_Sets.md","sourceDirName":"Python/ProbabilityandStatistics","slug":"/Python/ProbabilityandStatistics/Sets","permalink":"/docs/Python/ProbabilityandStatistics/Sets","draft":false,"unlisted":false,"editUrl":"https://github.com/csjoshc/csjoshc.github.io/tree/main/docs/Python/ProbabilityandStatistics/2_Sets.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/docs/Python/ProbabilityandStatistics/Introduction"},"next":{"title":"base","permalink":"/docs/General/base"}}');var t=s(4848),r=s(8453);const l={},o="Sets",c={},a=[{value:"Convention - CAPITAL for sets, lowercase for its elements",id:"convention---capital-for-sets-lowercase-for-its-elements",level:2},{value:"Creating Sets",id:"creating-sets",level:2},{value:"Set Properties",id:"set-properties",level:2},{value:"Adding and Removing Elements",id:"adding-and-removing-elements",level:2},{value:"Set Visualization with Venn Diagrams",id:"set-visualization-with-venn-diagrams",level:2},{value:"Working with Multiple Sets",id:"working-with-multiple-sets",level:2},{value:"Equality",id:"equality",level:2},{value:"Disjoint sets",id:"disjoint-sets",level:2},{value:"Subset: <code>issubset()</code>, <code>&lt;=</code>; strict: <code>&lt;</code>",id:"subset-issubset--strict-",level:2},{value:"Complement",id:"complement",level:2},{value:"Intersection: <code>intersection()</code>, <code>&amp;</code>",id:"intersection-intersection-",level:2},{value:"Union: <code>union()</code>, <code>|</code>",id:"union-union-",level:2},{value:"Set difference: <code>.difference()</code>, <code>-</code>",id:"set-difference-difference--",level:2},{value:"Symmetric Difference (XOR): <code>symmetric_difference()</code>, <code>^</code>",id:"symmetric-difference-xor-symmetric_difference-",level:2},{value:"Generating Cartesian products in Python",id:"generating-cartesian-products-in-python",level:2},{value:"Practical Applications",id:"practical-applications",level:2},{value:"Summary",id:"summary",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"\ud83c\udfe0 Home\n\ud83d\udc0d Python"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'\nprint(sys.executable)\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = "all"\n'})}),"\n",(0,t.jsx)(n.p,{children:"/home/jcmint/anaconda3/envs/learningenv/bin/python"}),"\n",(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"sets",children:"Sets"})}),"\n",(0,t.jsxs)(n.p,{children:["Sets are defined as a collection of elements, and can be defined explicitly ",(0,t.jsx)(n.code,{children:"{heads, tails}"}),", or implicitly ",(0,t.jsx)(n.code,{children:"{1:9}"}),", ",(0,t.jsx)(n.code,{children:"{A:Z}"}),".\n",(0,t.jsx)(n.em,{children:"[Image:  - file not found]"})]}),"\n",(0,t.jsx)(n.h2,{id:"convention---capital-for-sets-lowercase-for-its-elements",children:"Convention - CAPITAL for sets, lowercase for its elements"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"An element can belong to (\u2208) or not belong to(\u2209) a set"}),"\n",(0,t.jsx)(n.li,{children:"A set can contain (\u220b) or lack a member (\u220c)"}),"\n",(0,t.jsxs)(n.li,{children:["Repetition may or may not matter\nDifferent set types:\n",(0,t.jsx)(n.em,{children:"[Image:  - file not found]"})]}),"\n"]}),"\n",(0,t.jsx)(n.h1,{id:"sets-in-python",children:"Sets in Python"}),"\n",(0,t.jsx)(n.p,{children:"Sets are unordered collections of unique elements in Python. They are mutable and support mathematical operations like union, intersection, difference, and symmetric difference."}),"\n",(0,t.jsx)(n.h2,{id:"creating-sets",children:"Creating Sets"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Empty set\nempty_set = set()\n\n# Set from list\nnumbers = {1, 2, 3, 4, 5}\n\n# Set from string (unique characters)\ncharacters = set(\"hello\")  # {'h', 'e', 'l', 'o'}\n\n# Set from range\nrange_set = set(range(5))  # {0, 1, 2, 3, 4}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"set-properties",children:"Set Properties"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Sets only contain unique elements\nduplicate_numbers = {1, 2, 2, 3, 3, 4}\nprint(duplicate_numbers)  # {1, 2, 3, 4}\n\n# Sets are unordered\nunordered = {3, 1, 4, 1, 5, 9, 2, 6}\nprint(unordered)  # Order may vary\n"})}),"\n",(0,t.jsx)(n.h2,{id:"adding-and-removing-elements",children:"Adding and Removing Elements"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Add elements\nmy_set = {1, 2, 3}\nmy_set.add(4)\nmy_set.update([5, 6, 7])\nprint(my_set)\n\n# Remove elements\nmy_set.remove(4)  # Raises error if element doesn't exist\nmy_set.discard(8)  # No error if element doesn't exist\npopped = my_set.pop()  # Removes and returns arbitrary element\nprint(my_set)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"set-visualization-with-venn-diagrams",children:"Set Visualization with Venn Diagrams"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import matplotlib.pyplot as plt\nimport matplotlib_venn as venn\n\nS = {1, 2, 3}\nT = {0, 22, 1, 3}\nvenn.venn2([S, T], set_labels=('S', 'T'))\nplt.show()\n"})}),"\n",(0,t.jsx)(n.h2,{id:"working-with-multiple-sets",children:"Working with Multiple Sets"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'s1 = {0, 1}\ns2 = {1, 0}\ns3 = {1, 0, 1}  # Duplicates are automatically removed\ns4 = {0, 2}\ns5 = {3, 4}\n\nprint(f"s1: {s1}")\nprint(f"s2: {s2}")\nprint(f"s3: {s3}")  # Will be {0, 1}\nprint(f"s4: {s4}")\nprint(f"s5: {s5}")\n'})}),"\n",(0,t.jsx)(n.h1,{id:"set-relations",children:"Set Relations"}),"\n",(0,t.jsx)(n.p,{children:"Return a logical value that describes the relations between sets."}),"\n",(0,t.jsx)(n.h2,{id:"equality",children:"Equality"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Code:"})," ",(0,t.jsx)(n.code,{children:"=="})]}),"\n",(0,t.jsx)(n.p,{children:"Two sets are equal if they have exactly the same elements:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"print(s1 == s2)  # True\nprint(s1 == s3)  # True\nprint(s1 == s5)  # False\n"})}),"\n",(0,t.jsx)(n.p,{children:"Since all elements need to be in both sets for the sets to be equal, Equality is difficult to achieve."}),"\n",(0,t.jsx)(n.h2,{id:"disjoint-sets",children:"Disjoint sets"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Code:"})," ",(0,t.jsx)(n.code,{children:"isdisjoint()"}),", ",(0,t.jsx)(n.code,{children:"!="})]}),"\n",(0,t.jsx)(n.p,{children:"Two sets are disjoint if they share NO values - overlap region is EMPTY. Empty set is disjoint with all sets except all other empty sets."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"print(s1 != s2)  # False\nprint(s1.isdisjoint(s4))  # False (they share element 0)\nprint(s1.isdisjoint(s5))  # True (no common elements)\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"subset-issubset--strict-",children:["Subset: ",(0,t.jsx)(n.code,{children:"issubset()"}),", ",(0,t.jsx)(n.code,{children:"<="}),"; strict: ",(0,t.jsx)(n.code,{children:"<"})]}),"\n",(0,t.jsxs)(n.p,{children:["If every element in a set is in another set, then it is a subset of that set. ",0," is a subset of every set."]}),"\n",(0,t.jsx)(n.p,{children:"If two sets are subsets of each other, then they are equal (A \u2286 B & B \u2286 A means A == B)"}),"\n",(0,t.jsx)(n.p,{children:"A strict subset - a subset that is NOT equal to its superset."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'print("1.", s1 <= s2, s1.issubset(s4))\n# Check for STRICT subset: using `<`\nprint("2.", s1 < s2, s1 < {0, 1, 2})\n'})}),"\n",(0,t.jsx)(n.h1,{id:"set-operations",children:"Set Operations"}),"\n",(0,t.jsx)(n.p,{children:"Obtain a set that is the result of an operation between sets."}),"\n",(0,t.jsx)(n.h2,{id:"complement",children:"Complement"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Complement is a set of every element NOT in a set."}),"\n",(0,t.jsx)(n.li,{children:"Not definable in python without defining the 'Universe' first."}),"\n",(0,t.jsx)(n.li,{children:"De Morgan's Law: The Complement of the Intersection of two sets."}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"intersection-intersection-",children:["Intersection: ",(0,t.jsx)(n.code,{children:"intersection()"}),", ",(0,t.jsx)(n.code,{children:"&"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Intersection is a set of the common elements between sets."}),"\n",(0,t.jsx)(n.li,{children:"The infinite set intersects every set."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"print(s1.intersection(s1))  # {0, 1}\nprint(s1.intersection(s4))  # {0}\nprint(s1.intersection(s5))  # set() (empty set)\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"union-union-",children:["Union: ",(0,t.jsx)(n.code,{children:"union()"}),", ",(0,t.jsx)(n.code,{children:"|"})]}),"\n",(0,t.jsx)(n.p,{children:"Union is a non repetitive collection of elements in multiple sets."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"print(s1 | s2)  # {0, 1}\nprint(s1.union(s5))  # {0, 1, 3, 4}\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"set-difference-difference--",children:["Set difference: ",(0,t.jsx)(n.code,{children:".difference()"}),", ",(0,t.jsx)(n.code,{children:"-"})]}),"\n",(0,t.jsx)(n.p,{children:"A - B is the set of elements in A but not B:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"print(s1 - s2)  # set() (empty set)\nprint(s1 - s4)  # {1}\nprint(s4 - s1)  # {2}\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"symmetric-difference-xor-symmetric_difference-",children:["Symmetric Difference (XOR): ",(0,t.jsx)(n.code,{children:"symmetric_difference()"}),", ",(0,t.jsx)(n.code,{children:"^"})]}),"\n",(0,t.jsx)(n.p,{children:"The set of elements that are in one but NOT BOTH sets:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"print(s1 ^ s2)  # set() (empty set)\nprint(s1 ^ s4)  # {1, 2}\nprint(s5.symmetric_difference(s4))  # {0, 2, 3, 4}\n"})}),"\n",(0,t.jsx)(n.h1,{id:"cartesian-products",children:"Cartesian Products"}),"\n",(0,t.jsxs)(n.p,{children:["Basically, the Cartesian Product of two sets is the set of all combinations of the elements in both sets. You essentially generate ",(0,t.jsx)(n.code,{children:"a * b"})," combinations where ",(0,t.jsx)(n.code,{children:"a"})," and ",(0,t.jsx)(n.code,{children:"b"})," are the number of elements in set ",(0,t.jsx)(n.code,{children:"A"})," and ",(0,t.jsx)(n.code,{children:"B"}),". For ",(0,t.jsx)(n.code,{children:"n"})," sets, you generate a ",(0,t.jsx)(n.strong,{children:"cartesian coordinate"}),", an ",(0,t.jsx)(n.code,{children:"n"})," element tuple ordered pair."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"for A and B, it is the set A \xd7 B of (a, b) ordered pairs where a \u2208 A and b \u2208 B"}),"\n",(0,t.jsx)(n.li,{children:"The first element must come from set A, and likewise the second from B"}),"\n",(0,t.jsxs)(n.li,{children:["The cartesian product of the real numbers, R\xb2 = ",(0,t.jsx)(n.code,{children:"{(x, y): x, y \u2208 R}"})," is the cartesian plane, the 2D plane containing all real numbers"]}),"\n",(0,t.jsx)(n.li,{children:"Likewise, if A and B are sets with real numbers, then A \xd7 B will produce a rectangle in the cartesian plane."}),"\n",(0,t.jsx)(n.li,{children:"Tables are essentially cartesian products, as are 3D cubes (A \xd7 B \xd7 C)"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"generating-cartesian-products-in-python",children:"Generating Cartesian products in Python"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"\nfaces = {'J', 'Q', 'K'}  # Jack, queen, King\nsuits = {'Dia', 'Spa'}   # diamond, spade\n\nfor i in product(faces, suits):\n    print(i)\n\n# Output:\n# ('J', 'Dia')\n# ('J', 'Spa')\n# ('Q', 'Dia')\n# ('Q', 'Spa')\n# ('K', 'Dia')\n# ('K', 'Spa')\n"})}),"\n",(0,t.jsx)(n.h2,{id:"practical-applications",children:"Practical Applications"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Finding unique combinations\ncolors = {'red', 'blue', 'green'}\nsizes = {'S', 'M', 'L'}\n\ncombinations = set(product(colors, sizes))\nprint(f\"Total combinations: {len(combinations)}\")\nprint(combinations)\n\n# Set comprehension\neven_squares = {x**2 for x in range(10) if x % 2 == 0}\nprint(f\"Even squares: {even_squares}\")\n"})}),"\n",(0,t.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,t.jsx)(n.p,{children:"Sets in Python provide:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Uniqueness"}),": No duplicate elements"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Mathematical operations"}),": Union, intersection, difference"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Efficient membership testing"}),": ",(0,t.jsx)(n.code,{children:"in"})," operator"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Set comprehensions"}),": Create sets from expressions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Immutable variants"}),": ",(0,t.jsx)(n.code,{children:"frozenset"})," for hashable sets"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Sets are particularly useful for:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Removing duplicates from collections"}),"\n",(0,t.jsx)(n.li,{children:"Mathematical set operations"}),"\n",(0,t.jsx)(n.li,{children:"Efficient lookups"}),"\n",(0,t.jsx)(n.li,{children:"Finding unique elements"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var i=s(6540);const t={},r=i.createContext(t);function l(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);