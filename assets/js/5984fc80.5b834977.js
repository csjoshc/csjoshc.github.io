"use strict";(self.webpackChunkdocusaurus_temp=self.webpackChunkdocusaurus_temp||[]).push([[4344],{1557:(e,d,n)=>{n.d(d,{A:()=>t});const t=n.p+"assets/images/4_Pandas4_8_2-f4f56ed2e53fadb1a3dc314eb6271fca.png"},2202:(e,d,n)=>{n.r(d),n.d(d,{assets:()=>l,contentTitle:()=>h,default:()=>j,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Pandas4","title":"Pandas4","description":"/home/jcmint/anaconda3/envs/learningenv/bin/python","source":"@site/docs/4_Pandas4.md","sourceDirName":".","slug":"/Pandas4","permalink":"/docs/Pandas4","draft":false,"unlisted":false,"editUrl":"https://github.com/csjoshc/csjoshc.github.io/tree/main/docs/4_Pandas4.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{}}');var r=n(4848),i=n(8453);const s={},h="Manipulating Data",l={},c=[{value:"Aggregating and Grouping",id:"aggregating-and-grouping",level:2},{value:"Plotting aggregated dataGenerate a histogram of movie ratings (so group by the ratings column).",id:"plotting-aggregated-datagenerate-a-histogram-of-movie-ratings-so-group-by-the-ratings-column",level:2},{value:"FilteringEncode a filter that saves the indices of a dataframe (for which a condition is true), and then apply the filter as a mask to extract the desired values. (This can also apply to 3D image matrices).Below - find the most active raters (count of userId groupings of the ratings df). Looking at the mean and standard dev set the cutoff at 2000! movie ratings.",id:"filteringencode-a-filter-that-saves-the-indices-of-a-dataframe-for-which-a-condition-is-true-and-then-apply-the-filter-as-a-mask-to-extract-the-desired-values-this-can-also-apply-to-3d-image-matricesbelow---find-the-most-active-raters-count-of-userid-groupings-of-the-ratings-df-looking-at-the-mean-and-standard-dev-set-the-cutoff-at-2000-movie-ratings",level:2},{value:"Filtering based on string matchingUsing the movies dataframe, filter for movies with Animation as a genre:",id:"filtering-based-on-string-matchingusing-the-movies-dataframe-filter-for-movies-with-animation-as-a-genre",level:3},{value:"Filtering",id:"filtering",level:2},{value:"Filtering based on string matching",id:"filtering-based-on-string-matching",level:3},{value:"Stack dataframes",id:"stack-dataframes",level:2},{value:"Stack dataframes (append method)",id:"stack-dataframes-append-method",level:2},{value:"Inner join with pd.concat",id:"inner-join-with-pdconcat",level:2},{value:"The actual inner join",id:"the-actual-inner-join",level:2},{value:"Chaining together mergesChained merging on a merged dataframe without a new object is possible, but becomes unreadable after a few in a row:",id:"chaining-together-mergeschained-merging-on-a-merged-dataframe-without-a-new-object-is-possible-but-becomes-unreadable-after-a-few-in-a-row",level:2}];function a(e){const d={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(d.pre,{children:(0,r.jsx)(d.code,{className:"language-python",children:'\nprint(sys.executable)\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = "all"\nInteractiveShell.colors = "Linux"\nInteractiveShell.separate_in = 0\n\nimport matplotlib.pyplot as plt\n\nstyle.use(\'fivethirtyeight\')\nimport os, sys\n'})}),"\n",(0,r.jsx)(d.p,{children:"/home/jcmint/anaconda3/envs/learningenv/bin/python"}),"\n",(0,r.jsx)(d.pre,{children:(0,r.jsx)(d.code,{className:"language-python",children:"os.chdir(sys.path[0]) # Change dir to the folder this .ipynb file is in\nprint(os.listdir('../../../../data/w4pd'))\nmovies = pd.read_csv('../../../../data/w4pd/movies.csv')\ntags = pd.read_csv('../../../../data/w4pd/tags.csv')\nratings = pd.read_csv('../../../../data/w4pd/ratings.csv')\n"})}),"\n",(0,r.jsx)(d.p,{children:"['genome-scores.csv', 'genome-tags.csv', 'Icon\\r', 'links.csv', 'movies.csv', 'ratings.csv', 'README.txt', 'tags.csv']"}),"\n",(0,r.jsx)(d.header,{children:(0,r.jsx)(d.h1,{id:"manipulating-data",children:"Manipulating Data"})}),"\n",(0,r.jsx)(d.pre,{children:(0,r.jsx)(d.code,{className:"language-python",children:"ratings.head(5)\n"})}),"\n",(0,r.jsxs)(d.table,{children:[(0,r.jsx)(d.thead,{children:(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.th,{}),(0,r.jsx)(d.th,{children:"userId"}),(0,r.jsx)(d.th,{children:"movieId"}),(0,r.jsx)(d.th,{children:"rating"}),(0,r.jsx)(d.th,{children:"timestamp"})]})}),(0,r.jsxs)(d.tbody,{children:[(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"0"}),(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"2"}),(0,r.jsx)(d.td,{children:"3.5"}),(0,r.jsx)(d.td,{children:"1112486027"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"29"}),(0,r.jsx)(d.td,{children:"3.5"}),(0,r.jsx)(d.td,{children:"1112484676"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"2"}),(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"32"}),(0,r.jsx)(d.td,{children:"3.5"}),(0,r.jsx)(d.td,{children:"1112484819"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"3"}),(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"47"}),(0,r.jsx)(d.td,{children:"3.5"}),(0,r.jsx)(d.td,{children:"1112484727"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"4"}),(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"50"}),(0,r.jsx)(d.td,{children:"3.5"}),(0,r.jsx)(d.td,{children:"1112484580"})]})]})]}),"\n",(0,r.jsx)(d.h1,{id:"change-dir-to-the-folder-this-ipynb-file-is-in",children:"Change dir to the folder this .ipynb file is in"}),"\n",(0,r.jsx)(d.p,{children:"print(os.listdir('../../../../data/w4pd'))\nmovies = pd.read_csv('../../../../data/w4pd/movies.csv')\ntags = pd.read_csv('../../../../data/w4pd/tags.csv')\nratings = pd.read_csv('../../../../data/w4pd/ratings.csv')"}),"\n",(0,r.jsx)(d.pre,{children:(0,r.jsx)(d.code,{children:"['genome-scores.csv', 'genome-tags.csv', 'Icon\\r', 'links.csv', 'movies.csv', 'ratings.csv', 'README.txt', 'tags.csv']\n# Manipulating Data\n```python\nratings.head(5)\n"})}),"\n",(0,r.jsxs)(d.table,{children:[(0,r.jsx)(d.thead,{children:(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.th,{}),(0,r.jsx)(d.th,{children:"userId"}),(0,r.jsx)(d.th,{children:"movieId"}),(0,r.jsx)(d.th,{children:"rating"}),(0,r.jsx)(d.th,{children:"timestamp"})]})}),(0,r.jsxs)(d.tbody,{children:[(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"0"}),(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"2"}),(0,r.jsx)(d.td,{children:"3.5"}),(0,r.jsx)(d.td,{children:"1112486027"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"29"}),(0,r.jsx)(d.td,{children:"3.5"}),(0,r.jsx)(d.td,{children:"1112484676"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"2"}),(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"32"}),(0,r.jsx)(d.td,{children:"3.5"}),(0,r.jsx)(d.td,{children:"1112484819"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"3"}),(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"47"}),(0,r.jsx)(d.td,{children:"3.5"}),(0,r.jsx)(d.td,{children:"1112484727"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"4"}),(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"50"}),(0,r.jsx)(d.td,{children:"3.5"}),(0,r.jsx)(d.td,{children:"1112484580"})]})]})]}),"\n",(0,r.jsx)(d.h2,{id:"aggregating-and-grouping",children:"Aggregating and Grouping"}),"\n",(0,r.jsxs)(d.p,{children:[(0,r.jsx)(d.strong,{children:"Code:"})," ",(0,r.jsx)(d.code,{children:"df[['col1', 'col2']].groupby('col1')"}),"It makes sense to calculate different aggregate stats for different groupings. ",(0,r.jsx)(d.code,{children:"groupby"})," doesn't do any aggregate calculations by default - it just reorders the df so that the same values in the grouping column are all consecutive. You can also use .count() on a grouping."]}),"\n",(0,r.jsx)(d.pre,{children:(0,r.jsx)(d.code,{className:"language-python",children:"user_ratings = ratings[['userId', 'rating']].groupby('userId').mean()\nuser_ratings.head()\nmovie_ratings = ratings[['movieId', 'rating']].groupby('movieId').mean()\nmovie_ratings.head()\n"})}),"\n",(0,r.jsxs)(d.table,{children:[(0,r.jsx)(d.thead,{children:(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.th,{}),(0,r.jsx)(d.th,{children:"rating"})]})}),(0,r.jsxs)(d.tbody,{children:[(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"userId"}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"3.742857"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"2"}),(0,r.jsx)(d.td,{children:"4.000000"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"3"}),(0,r.jsx)(d.td,{children:"4.122995"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"4"}),(0,r.jsx)(d.td,{children:"3.571429"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"5"}),(0,r.jsx)(d.td,{children:"4.272727"})]})]})]}),"\n",(0,r.jsxs)(d.table,{children:[(0,r.jsx)(d.thead,{children:(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.th,{}),(0,r.jsx)(d.th,{children:"rating"})]})}),(0,r.jsxs)(d.tbody,{children:[(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"movieId"}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"3.921240"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"2"}),(0,r.jsx)(d.td,{children:"3.211977"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"3"}),(0,r.jsx)(d.td,{children:"3.151040"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"4"}),(0,r.jsx)(d.td,{children:"2.861393"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"5"}),(0,r.jsx)(d.td,{children:"3.064592"})]})]})]}),"\n",(0,r.jsx)(d.h2,{id:"plotting-aggregated-datagenerate-a-histogram-of-movie-ratings-so-group-by-the-ratings-column",children:"Plotting aggregated dataGenerate a histogram of movie ratings (so group by the ratings column)."}),"\n",(0,r.jsx)(d.pre,{children:(0,r.jsx)(d.code,{className:"language-python",children:"ratings_hist = ratings[['movieId', 'rating']].groupby('rating').count()\nprint(ratings_hist)\n# Now we plot\n\nratings_hist.plot(kind = \"bar\", figsize = (5, 5))\nplt.show()\n"})}),"\n",(0,r.jsx)(d.p,{children:"0.5      239125\n1.0      680732\n1.5      279252\n2.0     1430997\n2.5      883398\n3.0     4291193\n3.5     2200156\n4.0     5561926\n4.5     1534824\n5.0     2898660"}),"\n",(0,r.jsx)(d.p,{children:(0,r.jsx)(d.img,{alt:"png",src:n(1557).A+"",width:"437",height:"409"})}),"\n",(0,r.jsx)(d.h2,{id:"filteringencode-a-filter-that-saves-the-indices-of-a-dataframe-for-which-a-condition-is-true-and-then-apply-the-filter-as-a-mask-to-extract-the-desired-values-this-can-also-apply-to-3d-image-matricesbelow---find-the-most-active-raters-count-of-userid-groupings-of-the-ratings-df-looking-at-the-mean-and-standard-dev-set-the-cutoff-at-2000-movie-ratings",children:"FilteringEncode a filter that saves the indices of a dataframe (for which a condition is true), and then apply the filter as a mask to extract the desired values. (This can also apply to 3D image matrices).Below - find the most active raters (count of userId groupings of the ratings df). Looking at the mean and standard dev set the cutoff at 2000! movie ratings."}),"\n",(0,r.jsx)(d.pre,{children:(0,r.jsx)(d.code,{className:"language-python",children:"active_raters = ratings[['userId', 'rating']].groupby('userId').count()\nprint(active_raters.mean(), active_raters.std())\nhighly_active_raters = active_raters[active_raters['rating'] > 2000]\nprint(highly_active_raters.shape[0])\n"})}),"\n",(0,r.jsx)(d.p,{children:"rating    144.41353\ndtype: float64 rating    230.267257\ndtype: float64\n255"}),"\n",(0,r.jsx)(d.h3,{id:"filtering-based-on-string-matchingusing-the-movies-dataframe-filter-for-movies-with-animation-as-a-genre",children:"Filtering based on string matchingUsing the movies dataframe, filter for movies with Animation as a genre:"}),"\n",(0,r.jsx)(d.pre,{children:(0,r.jsx)(d.code,{className:"language-python",children:"movies.head()\nis_anime = movies['genres'].str.contains('Ani*')\nthe_anime = movies[is_anime]\nthe_anime.shape[0]\nthe_anime.head()\n"})}),"\n",(0,r.jsxs)(d.table,{children:[(0,r.jsx)(d.thead,{children:(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.th,{}),(0,r.jsx)(d.th,{children:"movieId"}),(0,r.jsx)(d.th,{children:"title"}),(0,r.jsx)(d.th,{children:"genres"})]})}),(0,r.jsxs)(d.tbody,{children:[(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"0"}),(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"Toy Story (1995)"}),(0,r.jsx)(d.td,{children:"Adventure"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"2"}),(0,r.jsx)(d.td,{children:"Jumanji (1995)"}),(0,r.jsx)(d.td,{children:"Adventure"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"2"}),(0,r.jsx)(d.td,{children:"3"}),(0,r.jsx)(d.td,{children:"Grumpier Old Men (1995)"}),(0,r.jsx)(d.td,{children:"Comedy"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"3"}),(0,r.jsx)(d.td,{children:"4"}),(0,r.jsx)(d.td,{children:"Waiting to Exhale (1995)"}),(0,r.jsx)(d.td,{children:"Comedy"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"4"}),(0,r.jsx)(d.td,{children:"5"}),(0,r.jsx)(d.td,{children:"Father of the Bride Part II (1995)"}),(0,r.jsx)(d.td,{children:"Comedy"})]})]})]}),"\n",(0,r.jsx)(d.p,{children:"1027"}),"\n",(0,r.jsxs)(d.table,{children:[(0,r.jsx)(d.thead,{children:(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.th,{}),(0,r.jsx)(d.th,{children:"movieId"}),(0,r.jsx)(d.th,{children:"title"}),(0,r.jsx)(d.th,{children:"genres"})]})}),(0,r.jsxs)(d.tbody,{children:[(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"0"}),(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"Toy Story (1995)"}),(0,r.jsx)(d.td,{children:"Adventure"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"12"}),(0,r.jsx)(d.td,{children:"13"}),(0,r.jsx)(d.td,{children:"Balto (1995)"}),(0,r.jsx)(d.td,{children:"Adventure"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"47"}),(0,r.jsx)(d.td,{children:"48"}),(0,r.jsx)(d.td,{children:"Pocahontas (1995)"}),(0,r.jsx)(d.td,{children:"Animation"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"236"}),(0,r.jsx)(d.td,{children:"239"}),(0,r.jsx)(d.td,{children:"Goofy Movie, A (1995)"}),(0,r.jsx)(d.td,{children:"Animation"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"241"}),(0,r.jsx)(d.td,{children:"244"}),(0,r.jsx)(d.td,{children:"Gumby: The Movie (1995)"}),(0,r.jsx)(d.td,{children:"Animation"})]})]})]}),"\n",(0,r.jsx)(d.h1,{id:"joining-datacombining-data-from-multiple-dataframes-or-sources--plotting-aggregated-data",children:"Joining DataCombining data from multiple dataframes or sources. ## Plotting aggregated data"}),"\n",(0,r.jsx)(d.p,{children:"Generate a histogram of movie ratings (so group by the ratings column)."}),"\n",(0,r.jsx)(d.pre,{children:(0,r.jsx)(d.code,{className:"language-python",children:"ratings_hist = ratings[['movieId', 'rating']].groupby('rating').count()\nprint(ratings_hist)\n# Now we plot\n\nratings_hist.plot(kind = \"bar\", figsize = (5, 5))\nplt.show()\n"})}),"\n",(0,r.jsx)(d.p,{children:"0.5      239125\n1.0      680732\n1.5      279252\n2.0     1430997\n2.5      883398\n3.0     4291193\n3.5     2200156\n4.0     5561926\n4.5     1534824\n5.0     2898660"}),"\n",(0,r.jsx)(d.p,{children:(0,r.jsx)(d.img,{alt:"png",src:n(1557).A+"",width:"437",height:"409"})}),"\n",(0,r.jsx)(d.h2,{id:"filtering",children:"Filtering"}),"\n",(0,r.jsx)(d.p,{children:"Encode a filter that saves the indices of a dataframe (for which a condition is true), and then apply the filter as a mask to extract the desired values. (This can also apply to 3D image matrices).\nBelow - find the most active raters (count of userId groupings of the ratings df). Looking at the mean and standard dev set the cutoff at 2000! movie ratings."}),"\n",(0,r.jsx)(d.pre,{children:(0,r.jsx)(d.code,{className:"language-python",children:"active_raters = ratings[['userId', 'rating']].groupby('userId').count()\nprint(active_raters.mean(), active_raters.std())\nhighly_active_raters = active_raters[active_raters['rating'] > 2000]\nprint(highly_active_raters.shape[0])\n"})}),"\n",(0,r.jsx)(d.p,{children:"rating    144.41353\ndtype: float64 rating    230.267257\ndtype: float64\n255"}),"\n",(0,r.jsx)(d.h3,{id:"filtering-based-on-string-matching",children:"Filtering based on string matching"}),"\n",(0,r.jsx)(d.p,{children:"Using the movies dataframe, filter for movies with Animation as a genre:"}),"\n",(0,r.jsx)(d.pre,{children:(0,r.jsx)(d.code,{className:"language-python",children:"movies.head()\nis_anime = movies['genres'].str.contains('Ani*')\nthe_anime = movies[is_anime]\nthe_anime.shape[0]\nthe_anime.head()\n"})}),"\n",(0,r.jsxs)(d.table,{children:[(0,r.jsx)(d.thead,{children:(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.th,{}),(0,r.jsx)(d.th,{children:"movieId"}),(0,r.jsx)(d.th,{children:"title"}),(0,r.jsx)(d.th,{children:"genres"})]})}),(0,r.jsxs)(d.tbody,{children:[(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"0"}),(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"Toy Story (1995)"}),(0,r.jsx)(d.td,{children:"Adventure"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"2"}),(0,r.jsx)(d.td,{children:"Jumanji (1995)"}),(0,r.jsx)(d.td,{children:"Adventure"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"2"}),(0,r.jsx)(d.td,{children:"3"}),(0,r.jsx)(d.td,{children:"Grumpier Old Men (1995)"}),(0,r.jsx)(d.td,{children:"Comedy"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"3"}),(0,r.jsx)(d.td,{children:"4"}),(0,r.jsx)(d.td,{children:"Waiting to Exhale (1995)"}),(0,r.jsx)(d.td,{children:"Comedy"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"4"}),(0,r.jsx)(d.td,{children:"5"}),(0,r.jsx)(d.td,{children:"Father of the Bride Part II (1995)"}),(0,r.jsx)(d.td,{children:"Comedy"})]})]})]}),"\n",(0,r.jsx)(d.p,{children:"1027"}),"\n",(0,r.jsxs)(d.table,{children:[(0,r.jsx)(d.thead,{children:(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.th,{}),(0,r.jsx)(d.th,{children:"movieId"}),(0,r.jsx)(d.th,{children:"title"}),(0,r.jsx)(d.th,{children:"genres"})]})}),(0,r.jsxs)(d.tbody,{children:[(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"0"}),(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"Toy Story (1995)"}),(0,r.jsx)(d.td,{children:"Adventure"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"12"}),(0,r.jsx)(d.td,{children:"13"}),(0,r.jsx)(d.td,{children:"Balto (1995)"}),(0,r.jsx)(d.td,{children:"Adventure"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"47"}),(0,r.jsx)(d.td,{children:"48"}),(0,r.jsx)(d.td,{children:"Pocahontas (1995)"}),(0,r.jsx)(d.td,{children:"Animation"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"236"}),(0,r.jsx)(d.td,{children:"239"}),(0,r.jsx)(d.td,{children:"Goofy Movie, A (1995)"}),(0,r.jsx)(d.td,{children:"Animation"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"241"}),(0,r.jsx)(d.td,{children:"244"}),(0,r.jsx)(d.td,{children:"Gumby: The Movie (1995)"}),(0,r.jsx)(d.td,{children:"Animation"})]})]})]}),"\n",(0,r.jsx)(d.h1,{id:"joining-data",children:"Joining Data"}),"\n",(0,r.jsx)(d.p,{children:"Combining data from multiple dataframes or sources."}),"\n",(0,r.jsx)(d.h2,{id:"stack-dataframes",children:"Stack dataframes"}),"\n",(0,r.jsxs)(d.p,{children:[(0,r.jsx)(d.strong,{children:"Code:"})," ",(0,r.jsx)(d.code,{children:"pd.concat([df1, df2])"}),"The stacking is not really ideal in this scenario - it would be better to stack df's that have matched columns and data types."]}),"\n",(0,r.jsx)(d.pre,{children:(0,r.jsx)(d.code,{className:"language-python",children:"stack_1 = pd.concat([tags.head(), movies.head()])\nstack_1\n"})}),"\n",(0,r.jsx)(d.p,{children:"/home/jcmint/anaconda3/envs/learningenv/lib/python3.7/site-packages/ipykernel_launcher.py:1: FutureWarning: Sorting because non-concatenation axis is not aligned. A future version\nof pandas will change to not sort by default."}),"\n",(0,r.jsx)(d.p,{children:"To accept the future behavior, pass 'sort=False'."}),"\n",(0,r.jsx)(d.p,{children:"To retain the current behavior and silence the warning, pass 'sort=True'."}),"\n",(0,r.jsx)(d.p,{children:'"""Entry point for launching an IPython kernel.'}),"\n",(0,r.jsxs)(d.table,{children:[(0,r.jsx)(d.thead,{children:(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.th,{}),(0,r.jsx)(d.th,{children:"genres"}),(0,r.jsx)(d.th,{children:"movieId"}),(0,r.jsx)(d.th,{children:"tag"}),(0,r.jsx)(d.th,{children:"timestamp"}),(0,r.jsx)(d.th,{children:"title"}),(0,r.jsx)(d.th,{children:"userId"})]})}),(0,r.jsxs)(d.tbody,{children:[(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"0"}),(0,r.jsx)(d.td,{children:"NaN"}),(0,r.jsx)(d.td,{children:"4141"}),(0,r.jsx)(d.td,{children:"Mark Waters"}),(0,r.jsx)(d.td,{children:"1.240597e+09"}),(0,r.jsx)(d.td,{children:"NaN"}),(0,r.jsx)(d.td,{children:"18.0"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"NaN"}),(0,r.jsx)(d.td,{children:"208"}),(0,r.jsx)(d.td,{children:"dark hero"}),(0,r.jsx)(d.td,{children:"1.368150e+09"}),(0,r.jsx)(d.td,{children:"NaN"}),(0,r.jsx)(d.td,{children:"65.0"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"2"}),(0,r.jsx)(d.td,{children:"NaN"}),(0,r.jsx)(d.td,{children:"353"}),(0,r.jsx)(d.td,{children:"dark hero"}),(0,r.jsx)(d.td,{children:"1.368150e+09"}),(0,r.jsx)(d.td,{children:"NaN"}),(0,r.jsx)(d.td,{children:"65.0"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"3"}),(0,r.jsx)(d.td,{children:"NaN"}),(0,r.jsx)(d.td,{children:"521"}),(0,r.jsx)(d.td,{children:"noir thriller"}),(0,r.jsx)(d.td,{children:"1.368150e+09"}),(0,r.jsx)(d.td,{children:"NaN"}),(0,r.jsx)(d.td,{children:"65.0"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"4"}),(0,r.jsx)(d.td,{children:"NaN"}),(0,r.jsx)(d.td,{children:"592"}),(0,r.jsx)(d.td,{children:"dark hero"}),(0,r.jsx)(d.td,{children:"1.368150e+09"}),(0,r.jsx)(d.td,{children:"NaN"}),(0,r.jsx)(d.td,{children:"65.0"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"0"}),(0,r.jsx)(d.td,{children:"Adventure"}),(0,r.jsx)(d.td,{children:"Animation"}),(0,r.jsx)(d.td,{children:"Children"}),(0,r.jsx)(d.td,{children:"Comedy"}),(0,r.jsx)(d.td,{children:"Fantasy"}),(0,r.jsx)(d.td,{children:"1"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"Adventure"}),(0,r.jsx)(d.td,{children:"Children"}),(0,r.jsx)(d.td,{children:"Fantasy"}),(0,r.jsx)(d.td,{children:"2"}),(0,r.jsx)(d.td,{children:"NaN"}),(0,r.jsx)(d.td,{children:"NaN"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"2"}),(0,r.jsx)(d.td,{children:"Comedy"}),(0,r.jsx)(d.td,{children:"Romance"}),(0,r.jsx)(d.td,{children:"3"}),(0,r.jsx)(d.td,{children:"NaN"}),(0,r.jsx)(d.td,{children:"NaN"}),(0,r.jsx)(d.td,{children:"Grumpier Old Men (1995)"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"3"}),(0,r.jsx)(d.td,{children:"Comedy"}),(0,r.jsx)(d.td,{children:"Drama"}),(0,r.jsx)(d.td,{children:"Romance"}),(0,r.jsx)(d.td,{children:"4"}),(0,r.jsx)(d.td,{children:"NaN"}),(0,r.jsx)(d.td,{children:"NaN"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"4"}),(0,r.jsx)(d.td,{children:"Comedy"}),(0,r.jsx)(d.td,{children:"5"}),(0,r.jsx)(d.td,{children:"NaN"}),(0,r.jsx)(d.td,{children:"NaN"}),(0,r.jsx)(d.td,{children:"Father of the Bride Part II (1995)"}),(0,r.jsx)(d.td,{children:"NaN"})]})]})]}),"\n",(0,r.jsx)(d.h2,{id:"stack-dataframes-append-method",children:"Stack dataframes (append method)"}),"\n",(0,r.jsxs)(d.p,{children:[(0,r.jsx)(d.strong,{children:"Code:"})," ",(0,r.jsx)(d.code,{children:"df1.append(df2)"}),"This gives the same results as using stack."]}),"\n",(0,r.jsx)(d.pre,{children:(0,r.jsx)(d.code,{className:"language-python",children:"append_1 = tags.head().append(movies.head())\nappend_1\n"})}),"\n",(0,r.jsx)(d.p,{children:"/home/jcmint/anaconda3/envs/learningenv/lib/python3.7/site-packages/pandas/core/frame.py:6692: FutureWarning: Sorting because non-concatenation axis is not aligned. A future version\nof pandas will change to not sort by default."}),"\n",(0,r.jsx)(d.p,{children:"To accept the future behavior, pass 'sort=False'."}),"\n",(0,r.jsx)(d.p,{children:"To retain the current behavior and silence the warning, pass 'sort=True'."}),"\n",(0,r.jsx)(d.p,{children:"sort=sort)"}),"\n",(0,r.jsxs)(d.table,{children:[(0,r.jsx)(d.thead,{children:(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.th,{}),(0,r.jsx)(d.th,{children:"genres"}),(0,r.jsx)(d.th,{children:"movieId"}),(0,r.jsx)(d.th,{children:"tag"}),(0,r.jsx)(d.th,{children:"timestamp"}),(0,r.jsx)(d.th,{children:"title"}),(0,r.jsx)(d.th,{children:"userId"})]})}),(0,r.jsxs)(d.tbody,{children:[(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"0"}),(0,r.jsx)(d.td,{children:"NaN"}),(0,r.jsx)(d.td,{children:"4141"}),(0,r.jsx)(d.td,{children:"Mark Waters"}),(0,r.jsx)(d.td,{children:"1.240597e+09"}),(0,r.jsx)(d.td,{children:"NaN"}),(0,r.jsx)(d.td,{children:"18.0"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"NaN"}),(0,r.jsx)(d.td,{children:"208"}),(0,r.jsx)(d.td,{children:"dark hero"}),(0,r.jsx)(d.td,{children:"1.368150e+09"}),(0,r.jsx)(d.td,{children:"NaN"}),(0,r.jsx)(d.td,{children:"65.0"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"2"}),(0,r.jsx)(d.td,{children:"NaN"}),(0,r.jsx)(d.td,{children:"353"}),(0,r.jsx)(d.td,{children:"dark hero"}),(0,r.jsx)(d.td,{children:"1.368150e+09"}),(0,r.jsx)(d.td,{children:"NaN"}),(0,r.jsx)(d.td,{children:"65.0"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"3"}),(0,r.jsx)(d.td,{children:"NaN"}),(0,r.jsx)(d.td,{children:"521"}),(0,r.jsx)(d.td,{children:"noir thriller"}),(0,r.jsx)(d.td,{children:"1.368150e+09"}),(0,r.jsx)(d.td,{children:"NaN"}),(0,r.jsx)(d.td,{children:"65.0"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"4"}),(0,r.jsx)(d.td,{children:"NaN"}),(0,r.jsx)(d.td,{children:"592"}),(0,r.jsx)(d.td,{children:"dark hero"}),(0,r.jsx)(d.td,{children:"1.368150e+09"}),(0,r.jsx)(d.td,{children:"NaN"}),(0,r.jsx)(d.td,{children:"65.0"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"0"}),(0,r.jsx)(d.td,{children:"Adventure"}),(0,r.jsx)(d.td,{children:"Animation"}),(0,r.jsx)(d.td,{children:"Children"}),(0,r.jsx)(d.td,{children:"Comedy"}),(0,r.jsx)(d.td,{children:"Fantasy"}),(0,r.jsx)(d.td,{children:"1"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"Adventure"}),(0,r.jsx)(d.td,{children:"Children"}),(0,r.jsx)(d.td,{children:"Fantasy"}),(0,r.jsx)(d.td,{children:"2"}),(0,r.jsx)(d.td,{children:"NaN"}),(0,r.jsx)(d.td,{children:"NaN"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"2"}),(0,r.jsx)(d.td,{children:"Comedy"}),(0,r.jsx)(d.td,{children:"Romance"}),(0,r.jsx)(d.td,{children:"3"}),(0,r.jsx)(d.td,{children:"NaN"}),(0,r.jsx)(d.td,{children:"NaN"}),(0,r.jsx)(d.td,{children:"Grumpier Old Men (1995)"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"3"}),(0,r.jsx)(d.td,{children:"Comedy"}),(0,r.jsx)(d.td,{children:"Drama"}),(0,r.jsx)(d.td,{children:"Romance"}),(0,r.jsx)(d.td,{children:"4"}),(0,r.jsx)(d.td,{children:"NaN"}),(0,r.jsx)(d.td,{children:"NaN"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"4"}),(0,r.jsx)(d.td,{children:"Comedy"}),(0,r.jsx)(d.td,{children:"5"}),(0,r.jsx)(d.td,{children:"NaN"}),(0,r.jsx)(d.td,{children:"NaN"}),(0,r.jsx)(d.td,{children:"Father of the Bride Part II (1995)"}),(0,r.jsx)(d.td,{children:"NaN"})]})]})]}),"\n",(0,r.jsx)(d.h2,{id:"inner-join-with-pdconcat",children:"Inner join with pd.concat"}),"\n",(0,r.jsxs)(d.p,{children:[(0,r.jsx)(d.strong,{children:"Code:"})," ",(0,r.jsx)(d.code,{children:"pd.concat"}),"This is NOT the same as an INNER JOIN ON tb1.field1 = tbl2.field1 as it would be in SQLAs a result, this isn't particularly useful since you're not matching as you combine data."]}),"\n",(0,r.jsx)(d.pre,{children:(0,r.jsx)(d.code,{className:"language-python",children:'joined = pd.concat([tags.head(), movies.head()], axis = 1, join = "inner")\n\n'})}),"\n",(0,r.jsxs)(d.table,{children:[(0,r.jsx)(d.thead,{children:(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.th,{}),(0,r.jsx)(d.th,{children:"userId"}),(0,r.jsx)(d.th,{children:"movieId"}),(0,r.jsx)(d.th,{children:"tag"}),(0,r.jsx)(d.th,{children:"timestamp"}),(0,r.jsx)(d.th,{children:"movieId"}),(0,r.jsx)(d.th,{children:"title"}),(0,r.jsx)(d.th,{children:"genres"})]})}),(0,r.jsxs)(d.tbody,{children:[(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"0"}),(0,r.jsx)(d.td,{children:"18"}),(0,r.jsx)(d.td,{children:"4141"}),(0,r.jsx)(d.td,{children:"Mark Waters"}),(0,r.jsx)(d.td,{children:"1240597180"}),(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"Toy Story (1995)"}),(0,r.jsx)(d.td,{children:"Adventure"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"65"}),(0,r.jsx)(d.td,{children:"208"}),(0,r.jsx)(d.td,{children:"dark hero"}),(0,r.jsx)(d.td,{children:"1368150078"}),(0,r.jsx)(d.td,{children:"2"}),(0,r.jsx)(d.td,{children:"Jumanji (1995)"}),(0,r.jsx)(d.td,{children:"Adventure"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"2"}),(0,r.jsx)(d.td,{children:"65"}),(0,r.jsx)(d.td,{children:"353"}),(0,r.jsx)(d.td,{children:"dark hero"}),(0,r.jsx)(d.td,{children:"1368150079"}),(0,r.jsx)(d.td,{children:"3"}),(0,r.jsx)(d.td,{children:"Grumpier Old Men (1995)"}),(0,r.jsx)(d.td,{children:"Comedy"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"3"}),(0,r.jsx)(d.td,{children:"65"}),(0,r.jsx)(d.td,{children:"521"}),(0,r.jsx)(d.td,{children:"noir thriller"}),(0,r.jsx)(d.td,{children:"1368149983"}),(0,r.jsx)(d.td,{children:"4"}),(0,r.jsx)(d.td,{children:"Waiting to Exhale (1995)"}),(0,r.jsx)(d.td,{children:"Comedy"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"4"}),(0,r.jsx)(d.td,{children:"65"}),(0,r.jsx)(d.td,{children:"592"}),(0,r.jsx)(d.td,{children:"dark hero"}),(0,r.jsx)(d.td,{children:"1368150078"}),(0,r.jsx)(d.td,{children:"5"}),(0,r.jsx)(d.td,{children:"Father of the Bride Part II (1995)"}),(0,r.jsx)(d.td,{children:"Comedy"})]})]})]}),"\n",(0,r.jsx)(d.h2,{id:"the-actual-inner-join",children:"The actual inner join"}),"\n",(0,r.jsxs)(d.p,{children:[(0,r.jsx)(d.strong,{children:"Code:"})," ",(0,r.jsx)(d.code,{children:"df1.merge(df2, on = 'col1', how='inner')"}),"The ",(0,r.jsx)(d.strong,{children:"actual"})," INNER JOINBelow, inner jon the aggregated mean movie_ratings and a new movie_counts (the number of ratings per movie). Then inner join again to ",(0,r.jsx)(d.code,{children:"movies"})," dataframe."]}),"\n",(0,r.jsx)(d.pre,{children:(0,r.jsx)(d.code,{className:"language-python",children:"movie_counts = ratings[['movieId', 'rating']].groupby('movieId').count()\nmovie_ratings.head()\nmovie_counts.head()\nmerged_1 = movie_ratings.merge(movie_counts, on = 'movieId', how='inner')\nmerged_1.head()\n"})}),"\n",(0,r.jsxs)(d.table,{children:[(0,r.jsx)(d.thead,{children:(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.th,{}),(0,r.jsx)(d.th,{children:"rating"})]})}),(0,r.jsxs)(d.tbody,{children:[(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"movieId"}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"3.921240"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"2"}),(0,r.jsx)(d.td,{children:"3.211977"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"3"}),(0,r.jsx)(d.td,{children:"3.151040"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"4"}),(0,r.jsx)(d.td,{children:"2.861393"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"5"}),(0,r.jsx)(d.td,{children:"3.064592"})]})]})]}),"\n",(0,r.jsxs)(d.table,{children:[(0,r.jsx)(d.thead,{children:(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.th,{}),(0,r.jsx)(d.th,{children:"rating"})]})}),(0,r.jsxs)(d.tbody,{children:[(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"movieId"}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"49695"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"2"}),(0,r.jsx)(d.td,{children:"22243"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"3"}),(0,r.jsx)(d.td,{children:"12735"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"4"}),(0,r.jsx)(d.td,{children:"2756"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"5"}),(0,r.jsx)(d.td,{children:"12161"})]})]})]}),"\n",(0,r.jsxs)(d.table,{children:[(0,r.jsx)(d.thead,{children:(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.th,{}),(0,r.jsx)(d.th,{children:"rating_x"}),(0,r.jsx)(d.th,{children:"rating_y"})]})}),(0,r.jsxs)(d.tbody,{children:[(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"movieId"}),(0,r.jsx)(d.td,{}),(0,r.jsx)(d.td,{})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"3.921240"}),(0,r.jsx)(d.td,{children:"49695"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"2"}),(0,r.jsx)(d.td,{children:"3.211977"}),(0,r.jsx)(d.td,{children:"22243"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"3"}),(0,r.jsx)(d.td,{children:"3.151040"}),(0,r.jsx)(d.td,{children:"12735"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"4"}),(0,r.jsx)(d.td,{children:"2.861393"}),(0,r.jsx)(d.td,{children:"2756"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"5"}),(0,r.jsx)(d.td,{children:"3.064592"}),(0,r.jsx)(d.td,{children:"12161"})]})]})]}),"\n",(0,r.jsx)(d.h2,{id:"chaining-together-mergeschained-merging-on-a-merged-dataframe-without-a-new-object-is-possible-but-becomes-unreadable-after-a-few-in-a-row",children:"Chaining together mergesChained merging on a merged dataframe without a new object is possible, but becomes unreadable after a few in a row:"}),"\n",(0,r.jsx)(d.pre,{children:(0,r.jsx)(d.code,{className:"language-python",children:"merged_2 = merged_1.merge(movies, on = 'movieId', how='inner')\nmerged_3 = movie_ratings.merge(movie_counts, on = 'movieId', how='inner').merge(movies, on = 'movieId', how='inner')\nmerged_2.head()\nmerged_3.head()\n"})}),"\n",(0,r.jsxs)(d.table,{children:[(0,r.jsx)(d.thead,{children:(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.th,{}),(0,r.jsx)(d.th,{children:"movieId"}),(0,r.jsx)(d.th,{children:"rating_x"}),(0,r.jsx)(d.th,{children:"rating_y"}),(0,r.jsx)(d.th,{children:"title"}),(0,r.jsx)(d.th,{children:"genres"})]})}),(0,r.jsxs)(d.tbody,{children:[(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"0"}),(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"3.921240"}),(0,r.jsx)(d.td,{children:"49695"}),(0,r.jsx)(d.td,{children:"Toy Story (1995)"}),(0,r.jsx)(d.td,{children:"Adventure"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"2"}),(0,r.jsx)(d.td,{children:"3.211977"}),(0,r.jsx)(d.td,{children:"22243"}),(0,r.jsx)(d.td,{children:"Jumanji (1995)"}),(0,r.jsx)(d.td,{children:"Adventure"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"2"}),(0,r.jsx)(d.td,{children:"3"}),(0,r.jsx)(d.td,{children:"3.151040"}),(0,r.jsx)(d.td,{children:"12735"}),(0,r.jsx)(d.td,{children:"Grumpier Old Men (1995)"}),(0,r.jsx)(d.td,{children:"Comedy"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"3"}),(0,r.jsx)(d.td,{children:"4"}),(0,r.jsx)(d.td,{children:"2.861393"}),(0,r.jsx)(d.td,{children:"2756"}),(0,r.jsx)(d.td,{children:"Waiting to Exhale (1995)"}),(0,r.jsx)(d.td,{children:"Comedy"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"4"}),(0,r.jsx)(d.td,{children:"5"}),(0,r.jsx)(d.td,{children:"3.064592"}),(0,r.jsx)(d.td,{children:"12161"}),(0,r.jsx)(d.td,{children:"Father of the Bride Part II (1995)"}),(0,r.jsx)(d.td,{children:"Comedy"})]})]})]}),"\n",(0,r.jsxs)(d.table,{children:[(0,r.jsx)(d.thead,{children:(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.th,{}),(0,r.jsx)(d.th,{children:"movieId"}),(0,r.jsx)(d.th,{children:"rating_x"}),(0,r.jsx)(d.th,{children:"rating_y"}),(0,r.jsx)(d.th,{children:"title"}),(0,r.jsx)(d.th,{children:"genres"})]})}),(0,r.jsxs)(d.tbody,{children:[(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"0"}),(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"3.921240"}),(0,r.jsx)(d.td,{children:"49695"}),(0,r.jsx)(d.td,{children:"Toy Story (1995)"}),(0,r.jsx)(d.td,{children:"Adventure"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"1"}),(0,r.jsx)(d.td,{children:"2"}),(0,r.jsx)(d.td,{children:"3.211977"}),(0,r.jsx)(d.td,{children:"22243"}),(0,r.jsx)(d.td,{children:"Jumanji (1995)"}),(0,r.jsx)(d.td,{children:"Adventure"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"2"}),(0,r.jsx)(d.td,{children:"3"}),(0,r.jsx)(d.td,{children:"3.151040"}),(0,r.jsx)(d.td,{children:"12735"}),(0,r.jsx)(d.td,{children:"Grumpier Old Men (1995)"}),(0,r.jsx)(d.td,{children:"Comedy"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"3"}),(0,r.jsx)(d.td,{children:"4"}),(0,r.jsx)(d.td,{children:"2.861393"}),(0,r.jsx)(d.td,{children:"2756"}),(0,r.jsx)(d.td,{children:"Waiting to Exhale (1995)"}),(0,r.jsx)(d.td,{children:"Comedy"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"4"}),(0,r.jsx)(d.td,{children:"5"}),(0,r.jsx)(d.td,{children:"3.064592"}),(0,r.jsx)(d.td,{children:"12161"}),(0,r.jsx)(d.td,{children:"Father of the Bride Part II (1995)"}),(0,r.jsx)(d.td,{children:"Comedy"})]})]})]}),"\n",(0,r.jsxs)(d.h1,{id:"combining-everythingafter-merging-three-dataframes-with-aggregated-ratings-and-rating-counts-data-we-can-apply-a-filter---the-is_anime-which-was-a-string-filter-as-well-as-a-new-filter-for-movies-that-were-both-highly-rated-more-than-4-and-actively-rated-more-than-2000-ratings",children:["Combining everythingAfter merging three dataframes with aggregated ratings and rating counts data, we can apply a filter - the ",(0,r.jsx)(d.code,{children:"is_anime"})," which was a string filter, as well as a new filter for movies that were both highly rated (more than 4) and actively rated (more than 2000 ratings)."]}),"\n",(0,r.jsx)(d.pre,{children:(0,r.jsx)(d.code,{className:"language-python",children:"ani_summary = merged_3[is_anime & (merged_3['rating_x'] > 4) & (merged_3['rating_y'] > 2000)]\nani_summary\nani_summary.shape[0]\n"})}),"\n",(0,r.jsx)(d.p,{children:'/home/jcmint/anaconda3/envs/learningenv/lib/python3.7/site-packages/ipykernel_launcher.py:1: UserWarning: Boolean Series key will be reindexed to match DataFrame index.\n"""Entry point for launching an IPython kernel.'}),"\n",(0,r.jsxs)(d.table,{children:[(0,r.jsx)(d.thead,{children:(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.th,{}),(0,r.jsx)(d.th,{children:"movieId"}),(0,r.jsx)(d.th,{children:"rating_x"}),(0,r.jsx)(d.th,{children:"rating_y"}),(0,r.jsx)(d.th,{children:"title"}),(0,r.jsx)(d.th,{children:"genres"})]})}),(0,r.jsxs)(d.tbody,{children:[(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"708"}),(0,r.jsx)(d.td,{children:"720"}),(0,r.jsx)(d.td,{children:"4.109473"}),(0,r.jsx)(d.td,{children:"8171"}),(0,r.jsx)(d.td,{children:"Wallace & Gromit: The Best of Aardman Animatio..."}),(0,r.jsx)(d.td,{children:"Adventure"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"732"}),(0,r.jsx)(d.td,{children:"745"}),(0,r.jsx)(d.td,{children:"4.167315"}),(0,r.jsx)(d.td,{children:"12073"}),(0,r.jsx)(d.td,{children:"Wallace & Gromit: A Close Shave (1995)"}),(0,r.jsx)(d.td,{children:"Animation"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"1125"}),(0,r.jsx)(d.td,{children:"1148"}),(0,r.jsx)(d.td,{children:"4.181068"}),(0,r.jsx)(d.td,{children:"15022"}),(0,r.jsx)(d.td,{children:"Wallace & Gromit: The Wrong Trousers (1993)"}),(0,r.jsx)(d.td,{children:"Animation"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"1197"}),(0,r.jsx)(d.td,{children:"1223"}),(0,r.jsx)(d.td,{children:"4.066765"}),(0,r.jsx)(d.td,{children:"7781"}),(0,r.jsx)(d.td,{children:"Grand Day Out with Wallace and Gromit, A (1989)"}),(0,r.jsx)(d.td,{children:"Adventure"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"2914"}),(0,r.jsx)(d.td,{children:"3000"}),(0,r.jsx)(d.td,{children:"4.096299"}),(0,r.jsx)(d.td,{children:"9564"}),(0,r.jsx)(d.td,{children:"Princess Mononoke (Mononoke-hime) (1997)"}),(0,r.jsx)(d.td,{children:"Action"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"3340"}),(0,r.jsx)(d.td,{children:"3429"}),(0,r.jsx)(d.td,{children:"4.120696"}),(0,r.jsx)(d.td,{children:"2585"}),(0,r.jsx)(d.td,{children:"Creature Comforts (1989)"}),(0,r.jsx)(d.td,{children:"Animation"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"5519"}),(0,r.jsx)(d.td,{children:"5618"}),(0,r.jsx)(d.td,{children:"4.203810"}),(0,r.jsx)(d.td,{children:"13466"}),(0,r.jsx)(d.td,{children:"Spirited Away (Sen to Chihiro no kamikakushi) ..."}),(0,r.jsx)(d.td,{children:"Adventure"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"5591"}),(0,r.jsx)(d.td,{children:"5690"}),(0,r.jsx)(d.td,{children:"4.089744"}),(0,r.jsx)(d.td,{children:"3198"}),(0,r.jsx)(d.td,{children:"Grave of the Fireflies (Hotaru no haka) (1988)"}),(0,r.jsx)(d.td,{children:"Animation"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"5872"}),(0,r.jsx)(d.td,{children:"5971"}),(0,r.jsx)(d.td,{children:"4.149481"}),(0,r.jsx)(d.td,{children:"5489"}),(0,r.jsx)(d.td,{children:"My Neighbor Totoro (Tonari no Totoro) (1988)"}),(0,r.jsx)(d.td,{children:"Animation"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"6251"}),(0,r.jsx)(d.td,{children:"6350"}),(0,r.jsx)(d.td,{children:"4.061917"}),(0,r.jsx)(d.td,{children:"3537"}),(0,r.jsx)(d.td,{children:"Laputa: Castle in the Sky (Tenk\xfb no shiro Rapy..."}),(0,r.jsx)(d.td,{children:"Action"})]}),(0,r.jsxs)(d.tr,{children:[(0,r.jsx)(d.td,{children:"6987"}),(0,r.jsx)(d.td,{children:"7099"}),(0,r.jsx)(d.td,{children:"4.092082"}),(0,r.jsx)(d.td,{children:"3334"}),(0,r.jsx)(d.td,{children:"Nausica\xe4 of the Valley of the Wind (Kaze no ta..."}),(0,r.jsx)(d.td,{children:"Adventure"})]})]})]}),"\n",(0,r.jsx)(d.p,{children:"11"}),"\n",(0,r.jsx)(d.p,{children:"In conclusion, it seems that the two big categories were Wallance & Gromit and Anime, which makes sense, although it misses some Pixar and Disney films which I would've expected to make the cut."})]})}function j(e={}){const{wrapper:d}={...(0,i.R)(),...e.components};return d?(0,r.jsx)(d,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,d,n)=>{n.d(d,{R:()=>s,x:()=>h});var t=n(6540);const r={},i=t.createContext(r);function s(e){const d=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(d):{...d,...e}},[d,e])}function h(e){let d;return d=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(i.Provider,{value:d},e.children)}}}]);