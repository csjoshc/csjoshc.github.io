"use strict";(self.webpackChunkdocusaurus_temp=self.webpackChunkdocusaurus_temp||[]).push([[9721],{8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var s=n(6540);const i={},a=s.createContext(i);function o(e){const t=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(a.Provider,{value:t},e.children)}},9692:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Sets","title":"Sets","description":"/home/jcmint/anaconda3/envs/learningenv/bin/python","source":"@site/docs/2_Sets.md","sourceDirName":".","slug":"/Sets","permalink":"/docs/Sets","draft":false,"unlisted":false,"editUrl":"https://github.com/csjoshc/csjoshc.github.io/tree/main/docs/2_Sets.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{}}');var i=n(4848),a=n(8453);const o={},l="SetsSets are defined as a collection of elements, and can be defined explicitly (heads, tails), or implicitly (1:9), (A). (Image:  - file not found)## Convention - CAPITAL for sets, lowercase for its elements * An element can belong to (\u2208) or not belong to(\u2209) a  set * A set can contain (\u220b) or lack a member (\u220c) * Repetition may or may not matter Different set types:(Image:  - file not found)## Sets in Python",r={},c=[{value:"Subset: <code>issubset(), &lt;=</code>; strict: <code>&lt;</code>If every element in a set is in another set, then it is a subset of that set. (0) is a subset of every set. If two sets are subsets of each other, then they are equal (A is subset of B and B is subset of A means A == B)*(Image:  - file not found)*A strict subset - a subset that is NOT equal to its superset. <em>(Image:  - file not found)</em>",id:"subset-issubset--strict-if-every-element-in-a-set-is-in-another-set-then-it-is-a-subset-of-that-set-0-is-a-subset-of-every-set-if-two-sets-are-subsets-of-each-other-then-they-are-equal-a-is-subset-of-b-and-b-is-subset-of-a-means-a--bimage----file-not-founda-strict-subset---a-subset-that-is-not-equal-to-its-superset-image----file-not-found",level:2},{value:"Union: <code>union, |</code>Union is a non repetitive collection of elements in multiple sets. <em>(Image:  - file not found)</em>",id:"union-union-union-is-a-non-repetitive-collection-of-elements-in-multiple-sets-image----file-not-found",level:2},{value:"Set difference: <code>.difference, -</code>A - B is the set of elements in A but not B: <em>(Image:  - file not found)</em>",id:"set-difference-difference--a---b-is-the-set-of-elements-in-a-but-not-b-image----file-not-found",level:2},{value:"Symmetric Difference (OR): <code>symmetric_difference(), ^</code>The set of elements that are in one but NOT BOTH sets:<em>(Image:  - file not found)</em>",id:"symmetric-difference-or-symmetric_difference-the-set-of-elements-that-are-in-one-but-not-both-setsimage----file-not-found",level:2}];function d(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'import sysprint(sys.executable)from IPython.core.interactiveshell import InteractiveShellInteractiveShell.ast_node_interactivity = "all"\n'})}),"\n",(0,i.jsx)(t.p,{children:"/home/jcmint/anaconda3/envs/learningenv/bin/python"}),"\n",(0,i.jsx)(t.header,{children:(0,i.jsxs)(t.h1,{id:"setssets-are-defined-as-a-collection-of-elements-and-can-be-defined-explicitly-heads-tails-or-implicitly-19-a-image----file-not-found-convention---capital-for-sets-lowercase-for-its-elements--an-element-can-belong-to--or-not-belong-to-a--set--a-set-can-contain--or-lack-a-member---repetition-may-or-may-not-matter-different-set-typesimage----file-not-found-sets-in-python",children:["SetsSets are defined as a collection of elements, and can be defined explicitly (heads, tails), or implicitly (1:9), (A",":Z","). ",(0,i.jsx)(t.em,{children:"(Image:  - file not found)"}),"## Convention - CAPITAL for sets, lowercase for its elements * An element can belong to (\u2208) or not belong to(\u2209) a  set * A set can contain (\u220b) or lack a member (\u220c) * Repetition may or may not matter Different set types:",(0,i.jsx)(t.em,{children:"(Image:  - file not found)"}),"## Sets in Python"]})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'myset = set((1,2,3))print("1.", myset)# Create an empty set: set()  or set(())empty = set()print(empty)myset.add((2, \'2\', 0))myset.discard(0)print("3.", myset)# No way to add multiple elements to a set - instead, consider a union with a set that has the target elements\n'})}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"(1, 2, 3)\nset()"}),"\n",(0,i.jsx)(t.li,{children:"(1, 2, 3, (2, '2', 0))"}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"# Test emptinessprint(not myset) # does myset contain no elements?print(len(myset))\n"})}),"\n",(0,i.jsx)(t.p,{children:"4"}),"\n",(0,i.jsxs)(t.h1,{id:"set-visualization-venn-diagrams-can-represent-set-members---elements-appear-in-or-out-of-a-setimage----file-not-found-visualizing-sets-in-python---venn-diagrams-with-numeric-elements--necessary-to-install-matplotlib-and-matplotlib-vennconda-activate-learningenvconda-install-matplotlibproceed-yn-yconda-install--c-conda-forge-matplotlib-venn-",children:["Set visualization Venn diagrams can represent set members - elements appear in or out of a set.",(0,i.jsx)(t.em,{children:"(Image:  - file not found)"}),"## Visualizing sets in Python - venn diagrams with numeric elements * Necessary to install matplotlib and matplotlib-venn",(0,i.jsx)(t.code,{children:"conda activate learningenvconda install matplotlibProceed ((y)/n)? yconda install -c conda-forge matplotlib-venn "})]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"import matplotlib.pyplot as pltimport matplotlib_venn as vennS = (1, 2, 3)T = (0, 22, 1, 3)venn.venn2((S, T), set_labels = ('S', 'T'))plt.show()\n"})}),"\n",(0,i.jsx)(t.p,{children:"!(png)(2_Sets_files/2_Sets_6_1.png)"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"s1 = (0, 1)s2 = (1, 0)s3 = (1, 0 , 1)s4  = (0, 2)s5 = (3, 4)\n"})}),"\n",(0,i.jsxs)(t.h1,{id:"set-relationsreturn-a-logical-value-that-describes-the-relations-between-sets--setssets-are-defined-as-a-collection-of-elements-and-can-be-defined-explicitly-heads-tails-or-implicitly-19-aimage----file-not-found-convention---capital-for-sets-lowercase-for-its-elements-an-element-can-belong-to--or-not-belong-to-a--set-a-set-can-contain--or-lack-a-member--repetition-may-or-may-not-matterdifferent-set-typesimage----file-not-found-sets-in-pythonpythonmyset--set123print1-myset-create-an-empty-set-set--or-setempty--setprintemptymysetadd2-2-0mysetdiscard0print3-myset-no-way-to-add-multiple-elements-to-a-set---instead-consider-a-union-with-a-set-that-has-the-target-elements1-1-2-3set3-1-2-3-2-2-0python-test-emptinessprintnot-myset--does-myset-contain-no-elementsprintlenmysetfalse4-set-visualizationvenn-diagrams-can-represent-set-members---elements-appear-in-or-out-of-a-setimage----file-not-found-visualizing-sets-in-python---venn-diagrams-with-numeric-elements-necessary-to-install-matplotlib-and-matplotlib-vennconda-activate-learningenvconda-install-matplotlibproceed-yn-yconda-install--c-conda-forge-matplotlib-vennpythonimport-matplotlibpyplot-as-pltimport-matplotlib_venn-as-venns--1-2-3t--0-22-1-3vennvenn2s-t-set_labels--s-tpltshowpng2_sets_files2_sets_6_1pngpythons1--0-1s2--1-0s3--1-0--1s4---0-2s5--3-4-set-relationsreturn-a-logical-value-that-describes-the-relations-between-sets-equalitycode-two-sets-are-equal-if-they-have-exactly-the-same-elements",children:["Set RelationsReturn a logical value that describes the relations between sets. # SetsSets are defined as a collection of elements, and can be defined explicitly (heads, tails), or implicitly (1:9), (A",":Z",").",(0,i.jsx)(t.em,{children:"(Image:  - file not found)"}),"## Convention - CAPITAL for sets, lowercase for its elements* An element can belong to (\u2208) or not belong to(\u2209) a  set* A set can contain (\u220b) or lack a member (\u220c)* Repetition may or may not matterDifferent set types:",(0,i.jsx)(t.em,{children:"(Image:  - file not found)"}),"## Sets in Python",(0,i.jsx)(t.code,{children:'pythonmyset = set((1,2,3))print("1.", myset)# Create an empty set: set()  or set(())empty = set()print(empty)myset.add((2, \'2\', 0))myset.discard(0)print("3.", myset)# No way to add multiple elements to a set - instead, consider a union with a set that has the target elements'}),"1. (1, 2, 3)set()3. (1, 2, 3, (2, '2', 0))",(0,i.jsx)(t.code,{children:"python# Test emptinessprint(not myset) # does myset contain no elements?print(len(myset))"}),"False4# Set visualizationVenn diagrams can represent set members - elements appear in or out of a set.",(0,i.jsx)(t.em,{children:"(Image:  - file not found)"}),"## Visualizing sets in Python - venn diagrams with numeric elements* Necessary to install matplotlib and matplotlib-venn",(0,i.jsx)(t.code,{children:"conda activate learningenvconda install matplotlibProceed ((y)/n)? yconda install -c conda-forge matplotlib-venn``````pythonimport matplotlib.pyplot as pltimport matplotlib_venn as vennS = (1, 2, 3)T = (0, 22, 1, 3)venn.venn2((S, T), set_labels = ('S', 'T'))plt.show()"}),"!(png)(2_Sets_files/2_Sets_6_1.png)",(0,i.jsx)(t.code,{children:"pythons1 = (0, 1)s2 = (1, 0)s3 = (1, 0 , 1)s4  = (0, 2)s5 = (3, 4)"}),"# Set RelationsReturn a logical value that describes the relations between sets.## Equality",(0,i.jsx)(t.strong,{children:"Code:"})," ",(0,i.jsx)(t.code,{children:"=="}),"Two sets are equal if they have exactly the same elements:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"s1 == s2, s1 == s3, s1 == s5\n"})}),"\n",(0,i.jsx)(t.p,{children:"(True, True, False)"}),"\n",(0,i.jsxs)(t.p,{children:["Since all elements need to be in both sets for the sets to be equal, Equality is difficult to achieve. ## Disjoint sets",(0,i.jsx)(t.strong,{children:"Code:"})," ",(0,i.jsx)(t.code,{children:"isdisjoint(), !="}),"Two sets are disjoint if they share NO values - overlap region is EMPTY. Empty set is disjoint with all sets except all other empty sets. ",(0,i.jsx)(t.em,{children:"(Image:  - file not found)"})]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"s1 != s2, s1.isdisjoint(s4)\n"})}),"\n",(0,i.jsx)(t.p,{children:"(False, False)"}),"\n",(0,i.jsxs)(t.h2,{id:"subset-issubset--strict-if-every-element-in-a-set-is-in-another-set-then-it-is-a-subset-of-that-set-0-is-a-subset-of-every-set-if-two-sets-are-subsets-of-each-other-then-they-are-equal-a-is-subset-of-b-and-b-is-subset-of-a-means-a--bimage----file-not-founda-strict-subset---a-subset-that-is-not-equal-to-its-superset-image----file-not-found",children:["Subset: ",(0,i.jsx)(t.code,{children:"issubset(), <="}),"; strict: ",(0,i.jsx)(t.code,{children:"<"}),"If every element in a set is in another set, then it is a subset of that set. (0) is a subset of every set. If two sets are subsets of each other, then they are equal (A is subset of B and B is subset of A means A == B)*(Image:  - file not found)*A strict subset - a subset that is NOT equal to its superset. ",(0,i.jsx)(t.em,{children:"(Image:  - file not found)"})]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'print("1.", s1 <= s2 , s1.issubset(s4))# Check for STRICT subset: using `<`print("2.", s1 < s2, s1 < (0, 1, 2))\n'})}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"True False"}),"\n",(0,i.jsx)(t.li,{children:"False True"}),"\n"]}),"\n",(0,i.jsxs)(t.h1,{id:"set-operationsobtain-a-set-that-is-the-result-of-an-operation-between-sets-complement--complement-is-a-set-of-every-element-not-in-a-set--not-definable-in-python-without-defining-the-universe-first--de-morgans-law-the-complement-of-the-intersection-of-two-setsimage----file-not-found-intersection-intersection-and-intersection-is-a-set-of-the-common-elements-between-sets--the-infinte-set-intersects-every-setimage----file-not-foundimage----file-not-found",children:["Set OperationsObtain a set that is the result of an operation between sets.## Complement * Complement is a set of every element NOT in a set. * Not definable in python without defining the 'Universe' first. * De Morgan's Law: The Complement of the Intersection of two sets.",(0,i.jsx)(t.em,{children:"(Image:  - file not found)"}),"## Intersection: ",(0,i.jsx)(t.code,{children:"intersection(), and"}),"* Intersection is a set of the common elements between sets. * The infinte set intersects every set.",(0,i.jsx)(t.em,{children:"(Image:  - file not found)**(Image:  - file not found)"})]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"s1.intersection(s1), s1.intersection(s4), s1.intersection(s5)\n"})}),"\n",(0,i.jsx)(t.p,{children:"((0, 1), (0), set())"}),"\n",(0,i.jsxs)(t.h2,{id:"union-union-union-is-a-non-repetitive-collection-of-elements-in-multiple-sets-image----file-not-found",children:["Union: ",(0,i.jsx)(t.code,{children:"union, |"}),"Union is a non repetitive collection of elements in multiple sets. ",(0,i.jsx)(t.em,{children:"(Image:  - file not found)"})]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"s1 | s2, s1.union(s5)\n"})}),"\n",(0,i.jsx)(t.p,{children:"((0, 1), (0, 1, 3, 4))"}),"\n",(0,i.jsxs)(t.h2,{id:"set-difference-difference--a---b-is-the-set-of-elements-in-a-but-not-b-image----file-not-found",children:["Set difference: ",(0,i.jsx)(t.code,{children:".difference, -"}),"A - B is the set of elements in A but not B: ",(0,i.jsx)(t.em,{children:"(Image:  - file not found)"})]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"s1 - s2, s1 - s4, s4 - s1\n"})}),"\n",(0,i.jsx)(t.p,{children:"(set(), (1), (2))"}),"\n",(0,i.jsxs)(t.h2,{id:"symmetric-difference-or-symmetric_difference-the-set-of-elements-that-are-in-one-but-not-both-setsimage----file-not-found",children:["Symmetric Difference (OR): ",(0,i.jsx)(t.code,{children:"symmetric_difference(), ^"}),"The set of elements that are in one but NOT BOTH sets:",(0,i.jsx)(t.em,{children:"(Image:  - file not found)"})]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"s1 ^ s2, s1 ^ s4, s5.symmetric_difference(s4)\n"})}),"\n",(0,i.jsx)(t.p,{children:"(set(), (1, 2), (0, 2, 3, 4))"}),"\n",(0,i.jsxs)(t.h1,{id:"cartesian-productsbasically-the-cartesian-product-of-two-sets-is-the-set-of-all-combinations-of-the-elements-in-both-sets-you-essentially-generate-a--b-combinations-where-a-and-b-are-the-number-of-elements-in-set-a-and-b-for-n-sets-you-generate-a-cartesian-coordinate-an-n-element-tuple-ordered-pair-for-a-and-b-it-is-the-set-a-x-b-of-a-b-ordered-pairs-where-a--a-and-b--b--the-first-element-must-come-from-set-a-and-likewise-the-second-from-b--the-cartesian-product-of-the-real-numbers-r2--x-y-x-y--r-is-the-cartesian-plane-the-2d-plane-containing-all-read-numbers--likewise-if-a-and-b-are-sets-with-real-numbers-then-a-x-b-will-produce-a-rectangle-in-the-cartesian-plane--tables-are-essentially-cartesian-products-as-are-3d-cubes-a-x-b-x-cimage----file-not-foundimage----file-not-found--generating-cartesian-products-in-python",children:["Cartesian ProductsBasically, the Cartesian Product of two sets is the set of all combinations of the elements in both sets. You essentially generate ",(0,i.jsx)(t.code,{children:"a * b"})," combinations where ",(0,i.jsx)(t.code,{children:"a"})," and ",(0,i.jsx)(t.code,{children:"b"})," are the number of elements in set ",(0,i.jsx)(t.code,{children:"A"})," and ",(0,i.jsx)(t.code,{children:"B"}),". For ",(0,i.jsx)(t.code,{children:"n"})," sets, you generate a ",(0,i.jsx)(t.strong,{children:"cartesian coordinate"}),", an ",(0,i.jsx)(t.code,{children:"n"})," element tuple ordered pair.* for A and B, it is the set A x B of (a, b) ordered pairs where a \u2208 A and b \u2208 B * The first element must come from set A, and likewise the second from B * The cartesian product of the real numbers, R2 = ((x, y): x, y \u2208 R) is the cartesian plane, the 2D plane containing all read numbers * Likewise, if A and B are sets with real numbers, then A x B will produce a rectangle in the cartesian plane. * Tables are essentially cartesian products, as are 3D cubes (A x B x C)",(0,i.jsx)(t.em,{children:"(Image:  - file not found)**(Image:  - file not found)"})," ## Generating Cartesian products in Python"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"from itertools import productfaces = set(('J', 'Q', 'K')) # Jack, queen, Kingsuits = set(('Dia', 'Spa')) #diamond, spadefor i in product(faces, suits):print(i)\n"})}),"\n",(0,i.jsx)(t.p,{children:"('Q', 'Dia')\n('Q', 'Spa')\n('K', 'Dia')\n('K', 'Spa')\n('J', 'Dia')\n('J', 'Spa')"}),"\n",(0,i.jsx)(t.h1,{id:"russells-paradox--sets-can-be-elements-and-subsets-of-sets--however-it-is-unclear-whether-a-set-can-be-an-element-of-itself--the-empty-set-cannot-belong-to-itself-because-the-empty-set-by-definition-has-no-elements---however-the-complement-of-a-set-can-belong-to-itself---a-set-that-is-everything-except-0-will-contain-itself-as-an-element-since-this-not-0-set-is-not-zero---russells-paradox-is-that-you-can-define-a-set-that-cannot-exist--r--sets-that-dont-belong-to-themselves--the-contradiction-is-that-r-is-both-in-and-not-in-r-itself---definable-but-cannot-exist--basically-avoid-sets-that-are-self-referential-or-recursively-defined",children:'Russell\'s Paradox * Sets can be elements and subsets of sets * However, it is unclear whether a set can be an element of itself * The empty set cannot belong to itself, because the empty set by definition has no elements  * However, the complement of a set can belong to itself  * A set that is "Everything except 0" will contain itself as an element, since this "Not 0 set" is not zero.   Russell\'s Paradox is that you can define a set that cannot exist: * R = (sets that don\'t belong to themselves) * The contradiction is that R is both in, and not in, R itself.  * Definable but cannot exist * Basically, avoid sets that are self-referential or recursively defined'})]})}function m(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);