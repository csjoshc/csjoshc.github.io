"use strict";(self.webpackChunkdocusaurus_temp=self.webpackChunkdocusaurus_temp||[]).push([[2604],{6071:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/7_ML_Reg_16_1-7cace25a4caf3bf1cf3fff127e556317.png"},6604:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"ML_Reg","title":"ML_Reg","description":"/home/jcmint/anaconda3/envs/learningenv/bin/python","source":"@site/docs/7_ML_Reg.md","sourceDirName":".","slug":"/ML_Reg","permalink":"/docs/ML_Reg","draft":false,"unlisted":false,"editUrl":"https://github.com/csjoshc/csjoshc.github.io/tree/main/docs/7_ML_Reg.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{}}');var d=t(4848),i=t(8453);const s={},a="Linear and Decision Tree Regression",o={},l=[];function c(e){const n={code:"code",h1:"h1",header:"header",img:"img",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:'\nprint(sys.executable)\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = "all"\nInteractiveShell.colors = "Linux"\nInteractiveShell.separate_in = 0\n\nimport matplotlib.pyplot as plt\n\nstyle.use(\'fivethirtyeight\')\n\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, r2_score\n\nfrom plotnine import ggplot, geom_histogram, aes\n'})}),"\n",(0,d.jsx)(n.p,{children:"/home/jcmint/anaconda3/envs/learningenv/bin/python"}),"\n",(0,d.jsx)(n.header,{children:(0,d.jsx)(n.h1,{id:"linear-and-decision-tree-regression",children:"Linear and Decision Tree Regression"})}),"\n",(0,d.jsxs)(n.p,{children:["Linear model and decision tree regression seem pretty straightforward.\nHere I want to see if the RMSE is decreased for a regression model based on 1960 through 2014 data that is predicting ",(0,d.jsx)(n.code,{children:"Population, total"})," as a function of all other variables. I would need to filter by year, drop all but three columns (country, indicator type and value) and pivot the table on the country name to get a wide data set. This can be fed directly into the linear regression model.\nThen, iterate through random training and testing data split to get a distribution of RMSE values. Graph the RMSE of as the prediction error vs year on the x axis.\nThis exercise was somewhat contrived, and I ended up using a simple time series manipulation of the data for demonstration purposes."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"indicators = pd.read_csv('../../../../data/w5vis/Indicators.csv')\n"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"indicators.head()\n"})}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{}),(0,d.jsx)(n.th,{children:"CountryName"}),(0,d.jsx)(n.th,{children:"CountryCode"}),(0,d.jsx)(n.th,{children:"IndicatorName"}),(0,d.jsx)(n.th,{children:"IndicatorCode"}),(0,d.jsx)(n.th,{children:"Year"}),(0,d.jsx)(n.th,{children:"Value"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"0"}),(0,d.jsx)(n.td,{children:"Arab World"}),(0,d.jsx)(n.td,{children:"ARB"}),(0,d.jsx)(n.td,{children:"Adolescent fertility rate (births per 1,000 wo..."}),(0,d.jsx)(n.td,{children:"SP.ADO.TFRT"}),(0,d.jsx)(n.td,{children:"1960"}),(0,d.jsx)(n.td,{children:"1.335609e+02"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"1"}),(0,d.jsx)(n.td,{children:"Arab World"}),(0,d.jsx)(n.td,{children:"ARB"}),(0,d.jsx)(n.td,{children:"Age dependency ratio (% of working-age populat..."}),(0,d.jsx)(n.td,{children:"SP.POP.DPND"}),(0,d.jsx)(n.td,{children:"1960"}),(0,d.jsx)(n.td,{children:"8.779760e+01"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"2"}),(0,d.jsx)(n.td,{children:"Arab World"}),(0,d.jsx)(n.td,{children:"ARB"}),(0,d.jsx)(n.td,{children:"Age dependency ratio, old (% of working-age po..."}),(0,d.jsx)(n.td,{children:"SP.POP.DPND.OL"}),(0,d.jsx)(n.td,{children:"1960"}),(0,d.jsx)(n.td,{children:"6.634579e+00"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"3"}),(0,d.jsx)(n.td,{children:"Arab World"}),(0,d.jsx)(n.td,{children:"ARB"}),(0,d.jsx)(n.td,{children:"Age dependency ratio, young (% of working-age ..."}),(0,d.jsx)(n.td,{children:"SP.POP.DPND.YG"}),(0,d.jsx)(n.td,{children:"1960"}),(0,d.jsx)(n.td,{children:"8.102333e+01"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"4"}),(0,d.jsx)(n.td,{children:"Arab World"}),(0,d.jsx)(n.td,{children:"ARB"}),(0,d.jsx)(n.td,{children:"Arms exports (SIPRI trend indicator values)"}),(0,d.jsx)(n.td,{children:"MS.MIL.XPRT.KD"}),(0,d.jsx)(n.td,{children:"1960"}),(0,d.jsx)(n.td,{children:"3.000000e+06"})]})]})]}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{}),(0,d.jsx)(n.th,{children:"CountryName"}),(0,d.jsx)(n.th,{children:"IndicatorName"}),(0,d.jsx)(n.th,{children:"Value"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"4839015"}),(0,d.jsx)(n.td,{children:"Arab World"}),(0,d.jsx)(n.td,{children:"Access to electricity (% of population)"}),(0,d.jsx)(n.td,{children:"84.342225"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"4839016"}),(0,d.jsx)(n.td,{children:"Arab World"}),(0,d.jsx)(n.td,{children:"Access to electricity, rural (% of rural popul..."}),(0,d.jsx)(n.td,{children:"71.969903"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"4839017"}),(0,d.jsx)(n.td,{children:"Arab World"}),(0,d.jsx)(n.td,{children:"Access to electricity, urban (% of urban popul..."}),(0,d.jsx)(n.td,{children:"93.828463"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"4839018"}),(0,d.jsx)(n.td,{children:"Arab World"}),(0,d.jsx)(n.td,{children:"Access to non-solid fuel (% of population)"}),(0,d.jsx)(n.td,{children:"86.003666"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"4839019"}),(0,d.jsx)(n.td,{children:"Arab World"}),(0,d.jsx)(n.td,{children:"Access to non-solid fuel, rural (% of rural po..."}),(0,d.jsx)(n.td,{children:"74.552598"})]})]})]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"%%capture\n# preallocate dataframe\noutput = pd.DataFrame(columns = ['Year', 'Amount of Data', 'RMSE Average', 'R Squared Average'], index = range(0, 2015 - 1960))\nj = 0;\n# Calculate RMSE for each regression model based on year\nfor i in range(1960, 2015, 1):\ntest = indicators.copy()\ntest = test[test['Year'] == i]\ndel test['CountryCode']\ndel test['IndicatorCode']\ndel test['Year']\nwide = test.pivot(index='CountryName', columns='IndicatorName', values='Value')\nwide = wide[~wide['Population, total'].isna()]# drop any rows missing the target variable - this ensures that I won't drop the column by accident later..\nwide = wide.dropna(axis = 1, thresh = 0.85*len(wide))\nwide = wide.dropna(axis = 0, how = \"any\")\n#print(\"Year: \", i, \"; Remaining rows and columns\", wide.shape, \"; Total amount of data: \", wide.shape[0] * wide.shape[1], \"; Any Missing data? \", wide.isnull().values.any())\nx = wide.loc[:, wide.columns != 'Population, total']\ny = wide['Population, total']\nRMSE = [None] * 10\nr2 = [None] * 10\nfor k in range(0, 10, 1):\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.33, random_state=randint(0,1000000));\nregressor = LinearRegression();\nregressor.fit(x_train, y_train);\ny_prediction = regressor.predict(x_test);\nRMSE[k] = sqrt(mean_squared_error(y_true = y_test, y_pred = y_prediction));\nr2[k] = r2_score(y_true = y_test, y_pred = y_prediction)\noutput.iloc[j, 0] = i\noutput.iloc[j, 1] = wide.shape[0] * wide.shape[1]\noutput.iloc[j, 2] = sum(RMSE)/len(RMSE)\noutput.iloc[j, 3] = sum(r2)/len(r2)\nj+=1\n"})}),"\n",(0,d.jsx)(n.p,{children:"I tested the processing of data by year to get rid of NA values. When iterating through the available years I want to"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"output.head()\n"})}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{}),(0,d.jsx)(n.th,{children:"Year"}),(0,d.jsx)(n.th,{children:"Amount of Data"}),(0,d.jsx)(n.th,{children:"RMSE Average"}),(0,d.jsx)(n.th,{children:"R Squared Average"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"0"}),(0,d.jsx)(n.td,{children:"1960"}),(0,d.jsx)(n.td,{children:"2254"}),(0,d.jsx)(n.td,{children:"9.11015e+07"}),(0,d.jsx)(n.td,{children:"0.036731"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"1"}),(0,d.jsx)(n.td,{children:"1961"}),(0,d.jsx)(n.td,{children:"2688"}),(0,d.jsx)(n.td,{children:"1.01918e+08"}),(0,d.jsx)(n.td,{children:"0.877477"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"2"}),(0,d.jsx)(n.td,{children:"1962"}),(0,d.jsx)(n.td,{children:"3330"}),(0,d.jsx)(n.td,{children:"1.35075e+08"}),(0,d.jsx)(n.td,{children:"0.853944"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"3"}),(0,d.jsx)(n.td,{children:"1963"}),(0,d.jsx)(n.td,{children:"3162"}),(0,d.jsx)(n.td,{children:"4.26152e+08"}),(0,d.jsx)(n.td,{children:"-2.74594"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"4"}),(0,d.jsx)(n.td,{children:"1964"}),(0,d.jsx)(n.td,{children:"3162"}),(0,d.jsx)(n.td,{children:"4.32376e+08"}),(0,d.jsx)(n.td,{children:"-2.71138"})]})]})]}),"\n",(0,d.jsxs)(n.p,{children:["After being stumped for a while, I realized what I was doing wrong. This was a somewhat silly example because there are many columns which may be 100% colinear with the ",(0,d.jsx)(n.code,{children:"Population, total"})," column."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"test = indicators.copy()\ntest = test[test['Year'] == i]\ndel test['CountryCode']\ndel test['IndicatorCode']\ndel test['Year']\nwide = test.pivot(index='CountryName', columns='IndicatorName', values='Value')\nwide.columns[wide.columns.str.contains(\"pop\")][0:10]\nlen(wide.columns[wide.columns.str.contains(\"pop\")])\n"})}),"\n",(0,d.jsx)(n.p,{children:"Index(['Adult literacy rate, population 15+ years, both sexes (%)',\n'Adult literacy rate, population 15+ years, female (%)',\n'Adult literacy rate, population 15+ years, male (%)',\n'Age dependency ratio (% of working-age population)',\n'Age dependency ratio, old (% of working-age population)',\n'Age dependency ratio, young (% of working-age population)',\n'Annualized average growth rate in per capita real survey mean consumption or income, bottom 40% of population (%)',\n'Annualized average growth rate in per capita real survey mean consumption or income, total population (%)',\n'Condom use, population ages 15-24, female (% of females ages 15-24)',\n'Condom use, population ages 15-24, male (% of males ages 15-24)'],\ndtype='object', name='IndicatorName')"}),"\n",(0,d.jsx)(n.p,{children:"63"}),"\n",(0,d.jsx)(n.p,{children:"Therefore, I need to drop these rows to make my example actually 'predict' values."}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"%%capture\n# preallocate dataframe\noutput = pd.DataFrame(columns = ['Year', 'Amount of Data', 'RMSE Average', 'R Squared Average'], index = range(0, 2015 - 1960))\nj = 0;\n# Calculate RMSE for each regression model based on year\nfor i in range(1960, 2015, 1):\ntest = indicators.copy()\ntest = test[test['Year'] == i]\ndel test['CountryCode']\ndel test['IndicatorCode']\ndel test['Year']\nwide = test.pivot(index='CountryName', columns='IndicatorName', values='Value')\nwide = wide[~wide['Population, total'].isna()]# drop any rows missing the target variable - this ensures that I won't drop the column by accident later..\nwide = wide.dropna(axis = 1, thresh = 0.85*len(wide))\nwide = wide.dropna(axis = 0, how = \"any\")\n#print(\"Year: \", i, \"; Remaining rows and columns\", wide.shape, \"; Total amount of data: \", wide.shape[0] * wide.shape[1], \"; Any Missing data? \", wide.isnull().values.any())\ny = wide['Population, total']\n# Drop potentially colinear variables (my guess)\nwide = wide[wide.columns.drop(list(wide.filter(regex='pop')))]\nwide = wide[wide.columns.drop(list(wide.filter(regex='Pop')))]\nx = wide.loc[:, wide.columns != 'Population, total']\nRMSE = [None] * 10\nr2 = [None] * 10\nfor k in range(0, 10, 1):\nx_train, x_test, y_train, y_test = train_test_split(wide, y, test_size=0.33, random_state=324);\nregressor = LinearRegression();\nregressor.fit(x_train, y_train);\ny_prediction = regressor.predict(x_test);\nRMSE[k] = sqrt(mean_squared_error(y_true = y_test, y_pred = y_prediction));\nr2[k] = r2_score(y_true = y_test, y_pred = y_prediction)\noutput.iloc[j, 0] = i\noutput.iloc[j, 1] = wide.shape[0] * wide.shape[1]\noutput.iloc[j, 2] = sum(RMSE)/len(RMSE)\noutput.iloc[j, 3] = sum(r2)/len(r2)\nj+=1\n"})}),"\n",(0,d.jsx)(n.p,{children:"Trying to get this example to work may be too contrived without manual PCA or feature selection, so I decided to just try another approach - generate a linear regression model for each country as a function of year."}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"%%capture\ncountries = indicators['CountryName'].unique().tolist()\noutput = pd.DataFrame(columns = ['Country', 'RMSE Average', 'R Squared Average'], index = range(0, len(countries) + 1))\nk = 0\nfor i in countries:\nwide = indicators.copy()\ndel wide['CountryCode']\ndel wide['IndicatorCode']\ncond_1 = wide['CountryName'] == i\ncond_2 = wide['IndicatorName'] == 'Population, total'\nwide = wide[cond_1 & cond_2]\ndel wide['IndicatorName']\nRMSE = [None] * 10\nr2 = [None] * 10\nfor j in range(0, 10, 1):\nx_train, x_test, y_train, y_test = train_test_split(pd.DataFrame(wide['Year']), pd.DataFrame(wide['Value']), test_size=0.33, random_state=randint(0,1000000))\nregressor = LinearRegression();\nregressor.fit(x_train, y_train);\ny_prediction = regressor.predict(x_test);\nRMSE[j] = sqrt(mean_squared_error(y_true = y_test, y_pred = y_prediction));\nr2[j] = r2_score(y_true = y_test, y_pred = y_prediction)\noutput.iloc[k, 0] = i\noutput.iloc[k, 1] = sum(RMSE)/len(RMSE)\noutput.iloc[k, 2] = sum(r2)/len(r2)\nk+=1\n"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"output.head()\noutput = output.dropna()\noutput.sort_values('R Squared Average').head()\nfrom scipy.stats import describe\ndescribe(output['R Squared Average'])\n"})}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{}),(0,d.jsx)(n.th,{children:"Country"}),(0,d.jsx)(n.th,{children:"RMSE Average"}),(0,d.jsx)(n.th,{children:"R Squared Average"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"0"}),(0,d.jsx)(n.td,{children:"Arab World"}),(0,d.jsx)(n.td,{children:"1.19366e+07"}),(0,d.jsx)(n.td,{children:"0.981009"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"1"}),(0,d.jsx)(n.td,{children:"Caribbean small states"}),(0,d.jsx)(n.td,{children:"80474.8"}),(0,d.jsx)(n.td,{children:"0.990475"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"2"}),(0,d.jsx)(n.td,{children:"Central Europe and the Baltics"}),(0,d.jsx)(n.td,{children:"4.43389e+06"}),(0,d.jsx)(n.td,{children:"0.236114"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"3"}),(0,d.jsx)(n.td,{children:"East Asia & Pacific (all income levels)"}),(0,d.jsx)(n.td,{children:"3.7243e+07"}),(0,d.jsx)(n.td,{children:"0.989137"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"4"}),(0,d.jsx)(n.td,{children:"East Asia & Pacific (developing only)"}),(0,d.jsx)(n.td,{children:"3.27897e+07"}),(0,d.jsx)(n.td,{children:"0.991255"})]})]})]}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{}),(0,d.jsx)(n.th,{children:"Country"}),(0,d.jsx)(n.th,{children:"RMSE Average"}),(0,d.jsx)(n.th,{children:"R Squared Average"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"201"}),(0,d.jsx)(n.td,{children:"Sint Maarten (Dutch part)"}),(0,d.jsx)(n.td,{children:"2924.69"}),(0,d.jsx)(n.td,{children:"-0.297575"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"210"}),(0,d.jsx)(n.td,{children:"St. Kitts and Nevis"}),(0,d.jsx)(n.td,{children:"4084.1"}),(0,d.jsx)(n.td,{children:"-0.19532"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"80"}),(0,d.jsx)(n.td,{children:"Croatia"}),(0,d.jsx)(n.td,{children:"163570"}),(0,d.jsx)(n.td,{children:"-0.150368"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"145"}),(0,d.jsx)(n.td,{children:"Lithuania"}),(0,d.jsx)(n.td,{children:"272980"}),(0,d.jsx)(n.td,{children:"-0.14565"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"94"}),(0,d.jsx)(n.td,{children:"Estonia"}),(0,d.jsx)(n.td,{children:"92947.5"}),(0,d.jsx)(n.td,{children:"-0.117783"})]})]})]}),"\n",(0,d.jsx)(n.p,{children:"DescribeResult(nobs=247, minmax=(-0.29757490589067603, 0.9996578791364774), mean=0.8691825934749658, variance=0.06901810751504184, skewness=-2.9841692292997424, kurtosis=8.029106379317444)"}),"\n",(0,d.jsx)(n.p,{children:"Running the code ended up taking about 10 minutes for 2460 linear regression models. I also graph the pop for a random country with a negative r2 value."}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"wide = indicators.copy()\ndel wide['CountryCode']\ndel wide['IndicatorCode']\ncond_1 = wide['CountryName'] == 'Ukraine'\ncond_2 = wide['IndicatorName'] == 'Population, total'\nwide = wide[cond_1 & cond_2]\ndel wide['IndicatorName']\nsns.scatterplot(x = 'Year', y='Value', data  = wide)\n"})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.img,{alt:"png",src:t(6071).A+"",width:"437",height:"301"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(6540);const d={},i=r.createContext(d);function s(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);