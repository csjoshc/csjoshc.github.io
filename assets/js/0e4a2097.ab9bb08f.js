"use strict";(self.webpackChunkdocusaurus_temp=self.webpackChunkdocusaurus_temp||[]).push([[6997],{8453:(e,t,i)=>{i.d(t,{R:()=>a,x:()=>l});var n=i(6540);const s={},o=n.createContext(s);function a(e){const t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(o.Provider,{value:t},e.children)}},9531:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>n,toc:()=>r});const n=JSON.parse('{"id":"Basics","title":"Basics","description":"/home/jcmint/anaconda3/envs/learningenv/bin/python","source":"@site/docs/2_Basics.md","sourceDirName":".","slug":"/Basics","permalink":"/docs/Basics","draft":false,"unlisted":false,"editUrl":"https://github.com/csjoshc/csjoshc.github.io/tree/main/docs/2_Basics.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{}}');var s=i(4848),o=i(8453);const a={},l="Python Basics * Dynamic heap assignment, automatic garbage collection for objects with no pointers## Mutating lists and dictionariesList functions list.append, list(index) = value, list.pop(index), list.remove(value), list.extend(value), del(index) all mutate the list. A list that was assigned as newlist = list before these functions are executed will point to the same mutated list.Dictionary funcitons dict(('key')) = value, del(dict(('key'))) also mutate the dictionary similar as above. ## String & list functions",d={},r=[{value:"Removing elements (pop)<strong>Code:</strong> <code>pop</code>* Notice that list.pop(2) returns the element at position 2 in <code>list</code>* The int 3 is removed from list, and assigned to list2",id:"removing-elements-popcode-pop-notice-that-listpop2-returns-the-element-at-position-2-in-list-the-int-3-is-removed-from-list-and-assigned-to-list2",level:3},{value:"Removing elements (remove)<strong>Code:</strong> <code>remove</code>list.remove(2) does not return a value - it just removes the value &#39;1&#39; (not the value at index = 1)",id:"removing-elements-removecode-removelistremove2-does-not-return-a-value---it-just-removes-the-value-1-not-the-value-at-index--1",level:3},{value:"Adding to list (extend)<strong>Code:</strong> <code>extend``newlist</code> continues to be mutated along with <code>list</code>",id:"adding-to-list-extendcode-extendnewlist-continues-to-be-mutated-along-with-list",level:3},{value:"Removing elements (del)<strong>Code:</strong> <code>del``del</code> deletes the value at an INDEX, and returns nothing.",id:"removing-elements-delcode-deldel-deletes-the-value-at-an-index-and-returns-nothing",level:3},{value:"Dictionaries* unordered Key-value pairs* anything can be a value in a dictionary* a Key can be a tuple since it is immutable### Adding dictionary pair",id:"dictionaries-unordered-key-value-pairs-anything-can-be-a-value-in-a-dictionary-a-key-can-be-a-tuple-since-it-is-immutable-adding-dictionary-pair",level:2},{value:"Removing elements (pop)<strong>Code:</strong> <code>pop``3</code> is the value, the rest is <code>dict</code>",id:"removing-elements-popcode-pop3-is-the-value-the-rest-is-dict",level:3},{value:"Removing elements (del)<strong>Code:</strong> <code>del</code>newdict similar to newlist is mutated along with the original object",id:"removing-elements-delcode-delnewdict-similar-to-newlist-is-mutated-along-with-the-original-object",level:3},{value:"Iterating through dictionaries by key value pairs* don&#39;t mutate data structures through which you are iterating* instead, iterate through dictionary while appending to a to-do list* Then, iterate through the to-do list while mutating the dictionary* Therefore you never iterate and mutate the same data structure simultaneously",id:"iterating-through-dictionaries-by-key-value-pairs-dont-mutate-data-structures-through-which-you-are-iterating-instead-iterate-through-dictionary-while-appending-to-a-to-do-list-then-iterate-through-the-to-do-list-while-mutating-the-dictionary-therefore-you-never-iterate-and-mutate-the-same-data-structure-simultaneously",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'import sysprint(sys.executable)from IPython.core.interactiveshell import InteractiveShellInteractiveShell.ast_node_interactivity = "all"InteractiveShell.colors = "Linux"InteractiveShell.separate_in = 0from tabulate import tabulate\n'})}),"\n",(0,s.jsx)(t.p,{children:"/home/jcmint/anaconda3/envs/learningenv/bin/python"}),"\n",(0,s.jsx)(t.header,{children:(0,s.jsxs)(t.h1,{id:"python-basics--dynamic-heap-assignment-automatic-garbage-collection-for-objects-with-no-pointers-mutating-lists-and-dictionarieslist-functions-listappend-listindex--value-listpopindex-listremovevalue-listextendvalue-delindex-all-mutate-the-list-a-list-that-was-assigned-as-newlist--list-before-these-functions-are-executed-will-point-to-the-same-mutated-listdictionary-funcitons-dictkey--value-deldictkey-also-mutate-the-dictionary-similar-as-above--string--list-functions",children:["Python Basics * Dynamic heap assignment, automatic garbage collection for objects with no pointers## Mutating lists and dictionariesList functions ",(0,s.jsx)(t.code,{children:"list.append"}),", ",(0,s.jsx)(t.code,{children:"list(index) = value"}),", ",(0,s.jsx)(t.code,{children:"list.pop(index)"}),", ",(0,s.jsx)(t.code,{children:"list.remove(value)"}),", ",(0,s.jsx)(t.code,{children:"list.extend(value)"}),", ",(0,s.jsx)(t.code,{children:"del(index)"})," all mutate the list. A list that was assigned as ",(0,s.jsx)(t.code,{children:"newlist = list"})," before these functions are executed will point to the same mutated list.Dictionary funcitons ",(0,s.jsx)(t.code,{children:"dict(('key')) = value"}),", ",(0,s.jsx)(t.code,{children:"del(dict(('key')))"})," also mutate the dictionary similar as above. ## String & list functions"]})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"# String functionsword = 'Hello'word(1:3), 'He' in word, word.find('ll') # The lowest index start point\n"})}),"\n",(0,s.jsx)(t.p,{children:"('el', True, 2)"}),"\n",(0,s.jsxs)(t.h1,{id:"python-basics-dynamic-heap-assignment-automatic-garbage-collection-for-objects-with-no-pointers-mutating-lists-and-dictionarieslist-functions-listappend-listindex--value-listpopindex-listremovevalue-listextendvalue-delindex-all-mutate-the-list-a-list-that-was-assigned-as-newlist--list-before-these-functions-are-executed-will-point-to-the-same-mutated-listdictionary-funcitons-dictkey--value-deldictkey-also-mutate-the-dictionary-similar-as-above-string--list-functionspython-string-functionsword--helloword13-he-in-word-wordfindll--the-lowest-index-start-pointel-true-2-adding-to-lists",children:["Python Basics* Dynamic heap assignment, automatic garbage collection for objects with no pointers## Mutating lists and dictionariesList functions ",(0,s.jsx)(t.code,{children:"list.append"}),", ",(0,s.jsx)(t.code,{children:"list(index) = value"}),", ",(0,s.jsx)(t.code,{children:"list.pop(index)"}),", ",(0,s.jsx)(t.code,{children:"list.remove(value)"}),", ",(0,s.jsx)(t.code,{children:"list.extend(value)"}),", ",(0,s.jsx)(t.code,{children:"del(index)"})," all mutate the list. A list that was assigned as ",(0,s.jsx)(t.code,{children:"newlist = list"})," before these functions are executed will point to the same mutated list.Dictionary funcitons ",(0,s.jsx)(t.code,{children:"dict(('key')) = value"}),", ",(0,s.jsx)(t.code,{children:"del(dict(('key')))"})," also mutate the dictionary similar as above.## String & list functions",(0,s.jsx)(t.code,{children:"python# String functionsword = 'Hello'word(1:3), 'He' in word, word.find('ll') # The lowest index start point"}),"('el', True, 2)### Adding to lists"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"list = (1,2,3)newlist = listlist.append(4)list(0) = 0list, newlist\n"})}),"\n",(0,s.jsx)(t.p,{children:"((0, 2, 3, 4), (0, 2, 3, 4))"}),"\n",(0,s.jsxs)(t.h3,{id:"removing-elements-popcode-pop-notice-that-listpop2-returns-the-element-at-position-2-in-list-the-int-3-is-removed-from-list-and-assigned-to-list2",children:["Removing elements (pop)",(0,s.jsx)(t.strong,{children:"Code:"})," ",(0,s.jsx)(t.code,{children:"pop"}),"* Notice that list.pop(2) returns the element at position 2 in ",(0,s.jsx)(t.code,{children:"list"}),"* The int 3 is removed from list, and assigned to list2"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"list2 = list.pop(2)list2, list, type(list2)\n"})}),"\n",(0,s.jsx)(t.p,{children:"(3, (0, 2, 4), int)"}),"\n",(0,s.jsxs)(t.h3,{id:"removing-elements-removecode-removelistremove2-does-not-return-a-value---it-just-removes-the-value-1-not-the-value-at-index--1",children:["Removing elements (remove)",(0,s.jsx)(t.strong,{children:"Code:"})," ",(0,s.jsx)(t.code,{children:"remove"}),"list.remove(2) does not return a value - it just removes the value '1' (not the value at index = 1)"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"list3 = list.remove(2)list3, list, newlist\n"})}),"\n",(0,s.jsx)(t.p,{children:"(None, (0, 4), (0, 4))"}),"\n",(0,s.jsxs)(t.h3,{id:"adding-to-list-extendcode-extendnewlist-continues-to-be-mutated-along-with-list",children:["Adding to list (extend)",(0,s.jsx)(t.strong,{children:"Code:"})," ",(0,s.jsx)(t.code,{children:"extend``newlist"})," continues to be mutated along with ",(0,s.jsx)(t.code,{children:"list"})]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"list4 = (5, 6)list.extend(list4)list, newlist\n"})}),"\n",(0,s.jsx)(t.p,{children:"((0, 4, 5, 6), (0, 4, 5, 6))"}),"\n",(0,s.jsxs)(t.h3,{id:"removing-elements-delcode-deldel-deletes-the-value-at-an-index-and-returns-nothing",children:["Removing elements (del)",(0,s.jsx)(t.strong,{children:"Code:"})," ",(0,s.jsx)(t.code,{children:"del``del"})," deletes the value at an INDEX, and returns nothing."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"newlist = listdel(list(2))list, newlist\n"})}),"\n",(0,s.jsx)(t.p,{children:"((0, 4, 6), (0, 4, 6))"}),"\n",(0,s.jsx)(t.h2,{id:"dictionaries-unordered-key-value-pairs-anything-can-be-a-value-in-a-dictionary-a-key-can-be-a-tuple-since-it-is-immutable-adding-dictionary-pair",children:"Dictionaries* unordered Key-value pairs* anything can be a value in a dictionary* a Key can be a tuple since it is immutable### Adding dictionary pair"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"dict = (('String', 2000): 2)dict(('string2', 2001)) = 3dict(('mykey')) = 2dict((2)) = 'myvalue'dict\n"})}),"\n",(0,s.jsx)(t.p,{children:"(dictionary with tuple keys and mixed values)"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"# Returning the value at specific key (tuple, int, string)x = dict.get(('string3', 2002))y = dict.get(2)x, x == None, y, y == None, 'myid' in dict\n"})}),"\n",(0,s.jsx)(t.p,{children:"(None, True, 'myvalue', False, False)"}),"\n",(0,s.jsxs)(t.h3,{id:"removing-elements-popcode-pop3-is-the-value-the-rest-is-dict",children:["Removing elements (pop)",(0,s.jsx)(t.strong,{children:"Code:"})," ",(0,s.jsx)(t.code,{children:"pop``3"})," is the value, the rest is ",(0,s.jsx)(t.code,{children:"dict"})]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"dict.pop(('string2', 2001)), dict\n"})}),"\n",(0,s.jsx)(t.p,{children:"(3, (('String', 2000): 2, 'mykey': 2, 2: 'myvalue'))"}),"\n",(0,s.jsxs)(t.h3,{id:"removing-elements-delcode-delnewdict-similar-to-newlist-is-mutated-along-with-the-original-object",children:["Removing elements (del)",(0,s.jsx)(t.strong,{children:"Code:"})," ",(0,s.jsx)(t.code,{children:"del"}),"newdict similar to newlist is mutated along with the original object"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"newdict = dictdel(dict(('mykey')))dict, newdict\n"})}),"\n",(0,s.jsx)(t.p,{children:"((('String', 2000): 2, 2: 'myvalue'), (('String', 2000): 2, 2: 'myvalue'))"}),"\n",(0,s.jsx)(t.h2,{id:"iterating-through-dictionaries-by-key-value-pairs-dont-mutate-data-structures-through-which-you-are-iterating-instead-iterate-through-dictionary-while-appending-to-a-to-do-list-then-iterate-through-the-to-do-list-while-mutating-the-dictionary-therefore-you-never-iterate-and-mutate-the-same-data-structure-simultaneously",children:"Iterating through dictionaries by key value pairs* don't mutate data structures through which you are iterating* instead, iterate through dictionary while appending to a to-do list* Then, iterate through the to-do list while mutating the dictionary* Therefore you never iterate and mutate the same data structure simultaneously"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"for key, value in dict.items():print(key, value)\n"})}),"\n",(0,s.jsx)(t.p,{children:"('String', 2000) 2\n2 myvalue"})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);