"use strict";(self.webpackChunkdocusaurus_temp=self.webpackChunkdocusaurus_temp||[]).push([[5242],{5155:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/virus_sim2-e8f6dbd2a5cd206d45709975c3b61e36.png"},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var t=s(6540);const r={},i=t.createContext(r);function a(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:n},e.children)}},9544:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/virus_sim1-ed45099a3fc5b8e12deec47d58f5415d.png"},9594:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/virus_sim3-d782ebc92b713262dbf09754df9a45a5.png"},9895:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"Python/IntroCompThinkDataSci/unit3/ps3","title":"ps3","description":"\ud83c\udfe0 Home","source":"@site/docs/Python/IntroCompThinkDataSci/unit3/ps3.md","sourceDirName":"Python/IntroCompThinkDataSci/unit3","slug":"/Python/IntroCompThinkDataSci/unit3/ps3","permalink":"/docs/Python/IntroCompThinkDataSci/unit3/ps3","draft":false,"unlisted":false,"editUrl":"https://github.com/csjoshc/csjoshc.github.io/tree/main/docs/Python/IntroCompThinkDataSci/unit3/ps3.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"unit3","permalink":"/docs/Python/IntroCompThinkDataSci/unit3/"},"next":{"title":"Experimental Data and Modeling","permalink":"/docs/Python/IntroCompThinkDataSci/unit4/"}}');var r=s(4848),i=s(8453);const a={},o="Virus, Drug Treatments and Computational Models",l={},u=[];function d(e){const n={code:"code",h1:"h1",header:"header",img:"img",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"\ud83c\udfe0 Home\n\ud83d\udc0d Python"}),"\n",(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"virus-drug-treatments-and-computational-models",children:"Virus, Drug Treatments and Computational Models"})}),"\n",(0,r.jsx)(n.p,{children:"This problem will be an implementation of computational modeling for viral infection, such as how drug therapy and viral drug resistance affect viral load over time."}),"\n",(0,r.jsx)(n.h1,{id:"results",children:"Results"}),"\n",(0,r.jsxs)(n.p,{children:["These are plots of viral load over 300 time steps in various scenarios. The first image is for virus load without any drugs, while the latter two are for a scenario where all the viruses start off either being resistant or not resistant.\n",(0,r.jsx)(n.img,{src:s(9544).A+"",width:"640",height:"478"}),"\n",(0,r.jsx)(n.img,{src:s(5155).A+"",width:"640",height:"478"}),"\n",(0,r.jsx)(n.img,{src:s(9594).A+"",width:"640",height:"478"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"simulationWithoutDrug(1, 90, 0.8, 0.1, 1)   \nsimulationWithDrug(75, 100, .8, 0.1, {\"guttagonol\": True}, 0.8, 1)\nsimulationWithDrug(100, 1000, 0.1, 0.05, {'guttagonol': False}, 0.005, 4)\n"})}),"\n",(0,r.jsx)(n.h1,{id:"code",children:"Code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'\nfrom ps3b_precompiled_37 import *\n\nos.environ["OPENBLAS_NUM_THREADS"] = "1"\n\nrandom.seed(0)\nclass NoChildException(Exception):\n    """\n    NoChildException is raised by the reproduce() method in the SimpleVirus\n\n    reproduce. You can use NoChildException as is, you do not need to\n    modify/add any code.\n    """\nclass SimpleVirus(object):\n    """\n    Representation of a simple virus (does not model drug effects/resistance).\n    """\n    def __init__(self, maxBirthProb, clearProb):\n        self.maxBirthProb = maxBirthProb\n        self.clearProb = clearProb\n    def getMaxBirthProb(self):\n        return self.maxBirthProb\n    def getClearProb(self):\n        return self.clearProb\n    def doesClear(self):\n        if random.random() <= self.getClearProb():\n\n        else: \n\n    def reproduce(self, popDensity):\n\n        if random.random() <= self.getMaxBirthProb() * (1 - popDensity):\n            return SimpleVirus(self.getMaxBirthProb(), self.getClearProb())\n        else:\n\nclass Patient(object):\n    def __init__(self, viruses, maxPop):\n        self.viruses = viruses\n        self.maxPop = maxPop\n    def getViruses(self):\n        return self.viruses\n    def getMaxPop(self):\n        return self.maxPop\n    def getTotalPop(self):\n        return len(self.viruses)\n    def update(self):\n        # virus.doesClear() returns true if it IS cleared - therefore only keep if it isn\'t!\n        survived = [virus for virus in self.viruses if not virus.doesClear()]\n        self.viruses = []\n        for virus in survived:\n            try:\n                self.viruses.append(virus)\n                self.viruses.append(virus.reproduce(self.getTotalPop()/self.getMaxPop()))\n            except NoChildException:\n\n        return self.getTotalPop()\ndef simulationWithoutDrug(numViruses, maxPop, maxBirthProb, clearProb,\n                          numTrials):\n    mydata = np.empty([300, numTrials + 1])\n    mydata[:, :] = None\n    viruslist = [SimpleVirus(maxBirthProb = maxBirthProb, clearProb = clearProb) for _ in range(numViruses)]\n    for col in range(numTrials):\n        patient = Patient(viruslist, maxPop)\n        for row in range(300):\n            mydata[row, col] = patient.update()\n    mydata[:, numTrials] = np.mean(mydata[:, 0:numTrials], axis = 1)\n    pylab.plot(mydata[:,numTrials].tolist(), label = "SimpleVirus")\n    pylab.title("SimpleVirus simulation")\n    pylab.xlabel("Time Steps")\n    pylab.ylabel("Average Virus Population")\n    pylab.legend(loc = "best")\n    pylab.show()\nclass ResistantVirus(SimpleVirus):\n    """\n    Representation of a virus which can have drug resistance.\n    """\n    def __init__(self, maxBirthProb, clearProb, resistances, mutProb):\n        SimpleVirus.__init__(self, maxBirthProb, clearProb)\n        self.resistances = resistances\n        self.mutProb = mutProb\n    def getResistances(self):\n        return self.resistances\n    def getMutProb(self):\n        return self.mutProb\n    def isResistantTo(self, drug):\n        if drug in self.getResistances().keys():\n            return self.getResistances()[drug]\n        else:\n\n    def reproduce(self, popDensity, activeDrugs):\n        # If virus reproduces: generate info for initiating new ResistantVirus\n        enough_space = random.random() <= self.getMaxBirthProb() * (1 - popDensity)\n        resisted_drug = False\n        try:\n            if all(self.getResistances()[drug] == True for drug in activeDrugs): \n                resisted_drug = True\n            if (enough_space) and (resisted_drug):\n                new_resistances = {}\n                # Generate new resistance dictionary\n                for drug, resistance in self.getResistances().items():\n                    # If random num is less than mutation prob, the mutation occurs\n                    if random.random() <= self.getMutProb():\n                        new_resistances[drug] = not(resistance)\n                    else:\n                        new_resistances[drug] = resistance\n                return ResistantVirus(self.getMaxBirthProb(), self.getClearProb(), new_resistances, self.getMutProb())\n            else:\n\n        except KeyError:\n            # If the Virus doesn\'t have the drug in its resistances, it isn\'t resistant by definition\n\nclass TreatedPatient(Patient):\n    """\n    Representation of a patient. The patient is able to take drugs and his/her\n    virus population can acquire resistance to the drugs he/she takes.\n    """\n    def __init__(self, viruses, maxPop):\n        Patient.__init__(self, viruses, maxPop)\n        self.treatments = []\n    def addPrescription(self, newDrug):\n        if newDrug not in self.treatments:\n            self.treatments.append(newDrug)\n    def getPrescriptions(self):\n        return self.treatments\n    def getResistPop(self, drugResist):\n        num_vir = 0\n        for virus in self.getViruses():\n            # Check that drug is in Resistances before trying to access - avoids KeyError \n            try:\n                if (drugResist) and (all(virus.getResistances()[drug] == True for drug in drugResist)): \n                    num_vir += 1\n            except KeyError:\n\n        return num_vir\n    def update(self):\n        survived = [virus for virus in self.viruses if not virus.doesClear()]\n        self.viruses = survived.copy()\n        for virus in survived:\n            try:\n                popdensity = self.getTotalPop()/self.getMaxPop()\n                self.viruses.append(virus.reproduce(popdensity, self.getPrescriptions()))\n            except NoChildException:\n\n        return self.getTotalPop()\ndef simulationWithDrug(numViruses, maxPop, maxBirthProb, clearProb, resistances,\n                       mutProb, numTrials):\n    mydata = np.empty([300, numTrials + 1])\n    mydata[:, :] = None\n    resist_vir = mydata.copy()\n    viruslist = [ResistantVirus(maxBirthProb = maxBirthProb, clearProb = clearProb,\n        resistances = resistances, mutProb = mutProb) for _ in range(numViruses)]\n    for col in range(numTrials):\n        patient = TreatedPatient(viruslist, maxPop)\n        for row in range(300):\n            if row == 150:\n                patient.addPrescription("guttagonol")\n            mydata[row, col] = patient.update()\n            resist_vir[row, col] = patient.getResistPop(["guttagonol"])\n    mydata[:, numTrials] = np.mean(mydata[:, 0:numTrials], axis = 1)\n    resist_vir[:, numTrials] = np.mean(resist_vir[:, 0:numTrials], axis = 1)\n    pylab.plot(mydata[:,numTrials].tolist(), label = "ResistantVirus Total Population")\n    pylab.plot(resist_vir[:,numTrials].tolist(), label = "ResistantVirus Resistant Population")\n    pylab.title("ResistantVirus, Total and Resistant simulation")\n    pylab.xlabel("Time Steps")\n    pylab.ylabel("Average Virus Population")\n    pylab.legend(loc = "best")\n    pylab.show()\n'})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);