"use strict";(self.webpackChunkdocusaurus_temp=self.webpackChunkdocusaurus_temp||[]).push([[6784],{4506:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"Python/PythonforDataScience/Numpy","title":"Numpy","description":"\ud83c\udfe0 Home","source":"@site/docs/Python/PythonforDataScience/3_Numpy.md","sourceDirName":"Python/PythonforDataScience","slug":"/Python/PythonforDataScience/Numpy","permalink":"/docs/Python/PythonforDataScience/Numpy","draft":false,"unlisted":false,"editUrl":"https://github.com/csjoshc/csjoshc.github.io/tree/main/docs/Python/PythonforDataScience/3_Numpy.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Basics","permalink":"/docs/Python/PythonforDataScience/Basics"},"next":{"title":"Pandas","permalink":"/docs/Python/PythonforDataScience/Pandas"}}');var s=a(4848),i=a(8453);const t={},l="Numpy",o={},d=[{value:"Creating column array",id:"creating-column-array",level:2},{value:"Boolean indexing",id:"boolean-indexing",level:2},{value:"Multiple conditionals and assigning values where <strong>True</strong>",id:"multiple-conditionals-and-assigning-values-where-true",level:3},{value:"Assigning new values using logical filter",id:"assigning-new-values-using-logical-filter",level:3},{value:"np.array data types",id:"nparray-data-types",level:2},{value:"np.array operations",id:"nparray-operations",level:2},{value:"Get a sequence within a range by a certain step",id:"get-a-sequence-within-a-range-by-a-certain-step",level:3},{value:"Filter values from one of two matrices",id:"filter-values-from-one-of-two-matrices",level:3},{value:"np statistics and set operations",id:"np-statistics-and-set-operations",level:2},{value:"Sorting Arrays and finding uniques - <strong>array.sort(), np.unique(array)</strong>",id:"sorting-arrays-and-finding-uniques---arraysort-npuniquearray",level:2},{value:"Set operations on arrays",id:"set-operations-on-arrays",level:2},{value:"intersect1d",id:"intersect1d",level:3},{value:"setdiff1d",id:"setdiff1d",level:3},{value:"in1d",id:"in1d",level:3},{value:"Broadcasting",id:"broadcasting",level:2}];function c(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.p,{children:"\ud83c\udfe0 Home\n\ud83d\udc0d Python"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'\nprint(sys.executable)\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = "all"\nInteractiveShell.colors = "Linux"\nInteractiveShell.separate_in = 0\n\n'})}),"\n",(0,s.jsx)(e.p,{children:"/home/jcmint/anaconda3/envs/learningenv/bin/python"}),"\n",(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"numpy",children:"Numpy"})}),"\n",(0,s.jsx)(e.p,{children:"Numpy contains multidimensional arrays that have built-in functions based on compiled c code"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Arrays in Numpy are fixed in size, unlike Python lists which have changeable sizes"}),"\n",(0,s.jsx)(e.li,{children:"Elements must all be the same type"}),"\n",(0,s.jsx)(e.li,{children:"Well optimized and useful matrix operations"}),"\n",(0,s.jsx)(e.li,{children:"Pandas are built on top of numpy"}),"\n",(0,s.jsxs)(e.li,{children:["Matrices - Rank 2 ndarrays are a key feature\nWhen creating an array using ",(0,s.jsx)(e.code,{children:"="})," instead of np.array, the new reference points to the same object in memory. Therefore, if either the original or copy is mutated, the other will be updated as well"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"\na1 = np.array([[0, 5, 10], [2, 4, 6]])  \n# Note that the col_slice is returned as a row. These are both 1D/Rank one arrays\nrow_slice = a1[0,:]\ncol_slice = a1[:,0]\nprint(a1, row_slice, col_slice)\n"})}),"\n",(0,s.jsx)(e.p,{children:"[[ 0  5 10]\n[ 2  4  6]] [ 0  5 10] [0 2]"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"a1[0,0] = 1\nprint(a1, row_slice, col_slice)\n"})}),"\n",(0,s.jsx)(e.p,{children:"[[ 1  5 10]\n[ 2  4  6]] [ 1  5 10] [1 2]\nSince the slices are 1D you can extract with just one index value"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"print(row_slice[1], col_slice[1])\n"})}),"\n",(0,s.jsx)(e.p,{children:"5 2"}),"\n",(0,s.jsx)(e.h2,{id:"creating-column-array",children:"Creating column array"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# Instead of: \nlong = np.array([[1], [2], [3], [4]]) \n# Creating column arrays\n**Code:** Use `.T` (transpose) to easily create column array\nlong2 = np.array([[1,2,3,4]]).T \nlong2\n"})}),"\n",(0,s.jsx)(e.p,{children:"array([[1],\n[2],\n[3],\n[4]])"}),"\n",(0,s.jsx)(e.h2,{id:"boolean-indexing",children:"Boolean indexing"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Use conditional indexing to access and permute arrays"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"a1 = np.array([[0, 5, 10], [2, 4, 6]])  \n# Creating boolean arrays\n**Code:** Use `=` operator - but the boolean isn't mutated when the original is.\nsmall_num = a1 > 5\nsmall_num\n"})}),"\n",(0,s.jsx)(e.p,{children:"array([[False, False,  True],\n[False, False,  True]])\nThe boolean array doesn't get mutated along with the original one"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'a1[1,:] = [6, 7, 8]\nprint(a1, "\\n", small_num)\n'})}),"\n",(0,s.jsx)(e.p,{children:"[[ 0  5 10]\n[ 6  7  8]]\n[[False False  True]\n[False False  True]]"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"a1[a1 > 5]\n"})}),"\n",(0,s.jsx)(e.p,{children:"array([10,  6,  7,  8])"}),"\n",(0,s.jsxs)(e.h3,{id:"multiple-conditionals-and-assigning-values-where-true",children:["Multiple conditionals and assigning values where ",(0,s.jsx)(e.strong,{children:"True"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"print(a1)\n# Get a list of values in the arrays for which multiple conditionals are TRUE\na1[(a1 > 2) & (a1 < 8)]\n"})}),"\n",(0,s.jsx)(e.p,{children:"[[ 0  5 10]\n[ 6  7  8]]\narray([5, 6, 7])"}),"\n",(0,s.jsx)(e.h3,{id:"assigning-new-values-using-logical-filter",children:"Assigning new values using logical filter"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"a1[a1 % 2 == 0] += 100 \na1\n"})}),"\n",(0,s.jsx)(e.p,{children:"array([[100,   5, 110],\n[106,   7, 108]])"}),"\n",(0,s.jsx)(e.h2,{id:"nparray-data-types",children:"np.array data types"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Code:"})," ",(0,s.jsx)(e.code,{children:"np.array"})," with various data types"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Array types are explicit - you can't add in values of a different type from initialization time"}),"\n",(0,s.jsx)(e.li,{children:"you can force int and float array to have each other's data type"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"ex1 = np.array([1,2])\nex2 = np.array([1.1, 2.2])\nex3 = np.array(ex1, dtype = np.float64)\nex4 = np.array(ex2, dtype=np.int64)\n# Coerced int array to float, float to int (rounding DOWN to nearest int)\nprint(ex1.dtype, ex2.dtype, ex3.dtype, ex4.dtype, ex4)\n"})}),"\n",(0,s.jsx)(e.p,{children:"int64 float64 float64 int64 [1 2]\nIn general, its preferable to have arrays in floating point, so Python won't give errors when assigning values and you avoid losing precision."}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Arrays will be upcast to higher precision types when performing operations"}),"\n",(0,s.jsx)(e.li,{children:"Array operations are NOT matrix operations:"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"ex5 = np.array([[2, 2], [3, 3]]) \nex6 = np.array([[4, 4], [5, 5]]) \nex5 * ex6\n"})}),"\n",(0,s.jsx)(e.p,{children:"array([[ 8,  8],\n[15, 15]])"}),"\n",(0,s.jsx)(e.h2,{id:"nparray-operations",children:"np.array operations"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Code:"})," ",(0,s.jsx)(e.code,{children:"array.dot(), np.arange(), array.T, array.where()"})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["For matrix math, use the ",(0,s.jsx)(e.code,{children:"np.array.*"})," functions instead of generic operations (*)"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'print(ex5, "\\n", ex6)\n# Dot product (matrix product)\n# As expected, the result 18 = 2 * 4 + 2 * 5 \nex5.dot(ex6)\n'})}),"\n",(0,s.jsx)(e.p,{children:"[[2 2]\n[3 3]]\n[[4 4]\n[5 5]]\narray([[18, 18],\n[27, 27]])"}),"\n",(0,s.jsx)(e.h3,{id:"get-a-sequence-within-a-range-by-a-certain-step",children:"Get a sequence within a range by a certain step"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"np.arange(1, 10, 2)\n"})}),"\n",(0,s.jsx)(e.p,{children:"array([1, 3, 5, 7, 9])"}),"\n",(0,s.jsx)(e.h3,{id:"filter-values-from-one-of-two-matrices",children:"Filter values from one of two matrices"}),"\n",(0,s.jsx)(e.p,{children:"If true, grab from the first matrix, else grab from second"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"filter = np.array([[True, False], [False, True]])\nnp.where(filter, ex5, ex6)\n"})}),"\n",(0,s.jsx)(e.p,{children:"array([[2, 4],\n[5, 3]])"}),"\n",(0,s.jsx)(e.h2,{id:"np-statistics-and-set-operations",children:"np statistics and set operations"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Code:"})," array.",(0,s.jsx)(e.code,{children:"min(), max(), mean(), sum(), median()"}),"\nFor these functions, you can specify axis = 0 or 1 to get values by column or row"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"a1, a1.max(axis = 0), a1.max(axis = 1)\n"})}),"\n",(0,s.jsx)(e.p,{children:"(array([[100,   5, 110],\n[106,   7, 108]]), array([106,   7, 110]), array([110, 108]))"}),"\n",(0,s.jsxs)(e.h2,{id:"sorting-arrays-and-finding-uniques---arraysort-npuniquearray",children:["Sorting Arrays and finding uniques - ",(0,s.jsx)(e.strong,{children:"array.sort(), np.unique(array)"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# If needed, create a new array to avoid modifying the original array\n# Sort by both rows and columns \nsorted = np.array(a1)\nsorted.sort(axis = 0)\nprint(sorted)\nsorted.sort(axis = 1)\nprint(sorted)\nprint(np.unique(a1))\n"})}),"\n",(0,s.jsx)(e.p,{children:"[[100   5 108]\n[106   7 110]]\n[[  5 100 108]\n[  7 106 110]]\narray([  5,   7, 100, 106, 108, 110])"}),"\n",(0,s.jsx)(e.h2,{id:"set-operations-on-arrays",children:"Set operations on arrays"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Code:"})," ",(0,s.jsx)(e.code,{children:".intersect1d(), .setdiff1d(), .in1d()"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"s1 = np.array(['a', 'b', 'c']) \ns2 = np.array(['b', 'c', 'd']) \n"})}),"\n",(0,s.jsx)(e.h3,{id:"intersect1d",children:"intersect1d"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Code:"})," ",(0,s.jsx)(e.code,{children:"np.intersect1d()"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"np.intersect1d(s1, s2)\n"})}),"\n",(0,s.jsx)(e.p,{children:"array(['b', 'c'])"}),"\n",(0,s.jsx)(e.h3,{id:"setdiff1d",children:"setdiff1d"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Code:"})," ",(0,s.jsx)(e.code,{children:"np.setdiff1d()"}),"\n",(0,s.jsx)(e.code,{children:"['a']"}),", elements IN s1 but NOT in s2"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"np.setdiff1d(s1, s2)\n"})}),"\n",(0,s.jsxs)(e.p,{children:["array(['a'])\n",(0,s.jsx)(e.code,{children:"['d']"}),", elements IN s2 but NOT in s1"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"np.setdiff1d(s1, s2)\n"})}),"\n",(0,s.jsx)(e.p,{children:"array(['a'])"}),"\n",(0,s.jsx)(e.h3,{id:"in1d",children:"in1d"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Code:"})," ",(0,s.jsx)(e.code,{children:"np.in1d()"}),"\n",(0,s.jsx)(e.code,{children:"[False  True  True] "}),"- which elements of s1 are in s2? boolean"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"np.in1d(s1, s2)\n"})}),"\n",(0,s.jsx)(e.p,{children:"array([False,  True,  True])"}),"\n",(0,s.jsx)(e.h2,{id:"broadcasting",children:"Broadcasting"}),"\n",(0,s.jsx)(e.p,{children:"Perform operations on differently sized arrays. Preset the values to be added, then spread them over another array. You can broadcast either a 1d array with appropriate dimensions in one dimension, or a scalar value."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"start = np.zeros((4,3)) # zeros array 4 rows 3 columns \nadd_rows = np.array([1, 0, 2]) \ny = start + add_rows \n\n"})}),"\n",(0,s.jsx)(e.p,{children:"array([[1., 0., 2.],\n[1., 0., 2.],\n[1., 0., 2.],\n[1., 0., 2.]])"})]})}function h(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}},8453:(n,e,a)=>{a.d(e,{R:()=>t,x:()=>l});var r=a(6540);const s={},i=r.createContext(s);function t(n){const e=r.useContext(i);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:t(n.components),r.createElement(i.Provider,{value:e},n.children)}}}]);