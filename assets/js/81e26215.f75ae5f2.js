"use strict";(self.webpackChunkdocusaurus_temp=self.webpackChunkdocusaurus_temp||[]).push([[5821],{1597:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"European Soccer Regression Analysis using scikit-learn","title":"Regression with scikit-learn using Soccer Dataset","description":"We will again be using the open dataset from the popular site Kaggle that we used in Week 1 for our example.","source":"@site/docs/European Soccer Regression Analysis using scikit-learn.md","sourceDirName":".","slug":"/European Soccer Regression Analysis using scikit-learn","permalink":"/docs/European Soccer Regression Analysis using scikit-learn","draft":false,"unlisted":false,"editUrl":"https://github.com/csjoshc/csjoshc.github.io/tree/main/docs/European Soccer Regression Analysis using scikit-learn.md","tags":[],"version":"current","frontMatter":{}}');var s=r(4848),a=r(8453);const i={},l="Regression with scikit-learn using Soccer Dataset",o={},d=[{value:"Import Libraries",id:"import-libraries",level:2},{value:"Read Data from the Database into pandas",id:"read-data-from-the-database-into-pandas",level:2},{value:"Data Exploration",id:"data-exploration",level:2},{value:"Feature Engineering",id:"feature-engineering",level:2},{value:"Prepare Data for Modeling",id:"prepare-data-for-modeling",level:2},{value:"Linear Regression Model",id:"linear-regression-model",level:2},{value:"Decision Tree Regression Model",id:"decision-tree-regression-model",level:2},{value:"Model Comparison",id:"model-comparison",level:2},{value:"Feature Importance (Decision Tree)",id:"feature-importance-decision-tree",level:2},{value:"Visualization",id:"visualization",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"regression-with-scikit-learn-using-soccer-dataset",children:"Regression with scikit-learn using Soccer Dataset"})}),"\n",(0,s.jsxs)(n.p,{children:["We will again be using the open dataset from the popular site ",(0,s.jsx)(n.a,{href:"https://www.kaggle.com",children:"Kaggle"})," that we used in Week 1 for our example."]}),"\n",(0,s.jsxs)(n.p,{children:["Recall that this ",(0,s.jsx)(n.a,{href:"https://www.kaggle.com/hugomathien/soccer",children:"European Soccer Database"})," has more than 25,000 matches and more than 10,000 players for European professional soccer seasons from 2008 to 2016."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note:"})," Please download the file ",(0,s.jsx)(n.em,{children:"database.sqlite"})," if you don't yet have it in your ",(0,s.jsx)(n.em,{children:"Week-7-MachineLearning"})," folder."]}),"\n",(0,s.jsx)(n.h2,{id:"import-libraries",children:"Import Libraries"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import sqlite3\n\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\n\n"})}),"\n",(0,s.jsx)(n.h2,{id:"read-data-from-the-database-into-pandas",children:"Read Data from the Database into pandas"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Create your connection.\ncnx = sqlite3.connect('database.sqlite')\ndf = pd.read_sql_query(\"SELECT * FROM Player_Attributes\", cnx)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Let me check what tables are available in the database:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# List all tables in the database\ncursor = cnx.cursor()\ncursor.execute("SELECT name FROM sqlite_master WHERE type=\'table\';")\ntables = cursor.fetchall()\nprint("Available tables:")\nfor table in tables:\n    print(table[0])\n'})}),"\n",(0,s.jsx)(n.p,{children:"Now let's read from an available table:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Let\'s try a different table that exists\ndf = pd.read_sql_query("SELECT * FROM Player", cnx)\nprint(f"Player table shape: {df.shape}")\ndf.head()\n'})}),"\n",(0,s.jsx)(n.h2,{id:"data-exploration",children:"Data Exploration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Basic info about the dataset\nprint("Dataset info:")\nprint(df.info())\nprint("\\nFirst few rows:")\nprint(df.head())\n'})}),"\n",(0,s.jsx)(n.h2,{id:"feature-engineering",children:"Feature Engineering"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Select relevant features for regression\nfeatures = ['height', 'weight', 'overall_rating', 'potential']\ntarget = 'overall_rating'\n\n# Remove rows with missing values\ndf_clean = df[features].dropna()\nprint(f\"Clean dataset shape: {df_clean.shape}\")\n"})}),"\n",(0,s.jsx)(n.h2,{id:"prepare-data-for-modeling",children:"Prepare Data for Modeling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Separate features and target\nX = df_clean.drop(target, axis=1)\ny = df_clean[target]\n\n# Split into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nprint(f"Training set size: {X_train.shape}")\nprint(f"Testing set size: {X_test.shape}")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"linear-regression-model",children:"Linear Regression Model"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Create and train linear regression model\nlr_model = LinearRegression()\nlr_model.fit(X_train, y_train)\n\n# Make predictions\nlr_predictions = lr_model.predict(X_test)\n\n# Evaluate model\nlr_mse = mean_squared_error(y_test, lr_predictions)\nlr_rmse = sqrt(lr_mse)\n\nprint(f"Linear Regression RMSE: {lr_rmse:.2f}")\nprint(f"Linear Regression Score: {lr_model.score(X_test, y_test):.3f}")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"decision-tree-regression-model",children:"Decision Tree Regression Model"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Create and train decision tree model\ndt_model = DecisionTreeRegressor(random_state=42, max_depth=10)\ndt_model.fit(X_train, y_train)\n\n# Make predictions\ndt_predictions = dt_model.predict(X_test)\n\n# Evaluate model\ndt_mse = mean_squared_error(y_test, dt_predictions)\ndt_rmse = sqrt(dt_mse)\n\nprint(f"Decision Tree RMSE: {dt_rmse:.2f}")\nprint(f"Decision Tree Score: {dt_model.score(X_test, y_test):.3f}")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"model-comparison",children:"Model Comparison"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Compare the two models\nprint(\"Model Performance Comparison:\")\nprint(f\"{'Model':<20} {'RMSE':<10} {'R\xb2 Score':<10}\")\nprint(\"-\" * 40)\nprint(f\"{'Linear Regression':<20} {lr_rmse:<10.2f} {lr_model.score(X_test, y_test):<10.3f}\")\nprint(f\"{'Decision Tree':<20} {dt_rmse:<10.2f} {dt_model.score(X_test, y_test):<10.3f}\")\n"})}),"\n",(0,s.jsx)(n.h2,{id:"feature-importance-decision-tree",children:"Feature Importance (Decision Tree)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Get feature importance from decision tree\nfeature_importance = pd.DataFrame({\n    'feature': X.columns,\n    'importance': dt_model.feature_importances_\n}).sort_values('importance', ascending=False)\n\nprint(\"Feature Importance:\")\nprint(feature_importance)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"visualization",children:"Visualization"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import matplotlib.pyplot as plt\n\n# Plot actual vs predicted values\nplt.figure(figsize=(12, 5))\n\nplt.subplot(1, 2, 1)\nplt.scatter(y_test, lr_predictions, alpha=0.5)\nplt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2)\nplt.xlabel('Actual Values')\nplt.ylabel('Predicted Values')\nplt.title('Linear Regression: Actual vs Predicted')\n\nplt.subplot(1, 2, 2)\nplt.scatter(y_test, dt_predictions, alpha=0.5)\nplt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2)\nplt.xlabel('Actual Values')\nplt.ylabel('Predicted Values')\nplt.title('Decision Tree: Actual vs Predicted')\n\nplt.tight_layout()\nplt.show()\n"})}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"In this analysis, we:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Explored"})," the European Soccer Database"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Prepared"})," the data by handling missing values and selecting relevant features"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Built"})," two regression models: Linear Regression and Decision Tree"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Evaluated"})," both models using RMSE and R\xb2 score"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Compared"})," their performance and analyzed feature importance"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Visualized"})," the results to understand model predictions"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The decision tree model showed better performance in this case, likely due to its ability to capture non-linear relationships in the data. However, linear regression provides more interpretable results and may be preferred when explainability is important."}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Try other algorithms (Random Forest, XGBoost)"}),"\n",(0,s.jsx)(n.li,{children:"Feature engineering (create new features from existing ones)"}),"\n",(0,s.jsx)(n.li,{children:"Hyperparameter tuning for better performance"}),"\n",(0,s.jsx)(n.li,{children:"Cross-validation for more robust evaluation"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>l});var t=r(6540);const s={},a=t.createContext(s);function i(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);