"use strict";(self.webpackChunkdocusaurus_temp=self.webpackChunkdocusaurus_temp||[]).push([[9974],{7202:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>h,contentTitle:()=>l,default:()=>x,frontMatter:()=>i,metadata:()=>d,toc:()=>c});const d=JSON.parse('{"id":"Pandas5_backup","title":"Pandas5_backup","description":"/Users/joshchiu/repos/csjoshc.github.io/.venv/bin/python","source":"@site/docs/4_Pandas5_backup.md","sourceDirName":".","slug":"/Pandas5_backup","permalink":"/docs/Pandas5_backup","draft":false,"unlisted":false,"editUrl":"https://github.com/csjoshc/csjoshc.github.io/tree/main/docs/4_Pandas5_backup.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{}}');var t=n(4848),r=n(8453);const i={},l=void 0,h={},c=[{value:"String functions",id:"string-functions",level:2},{value:"Testing for string contents",id:"testing-for-string-contents",level:3},{value:"Replace strings with other strings",id:"replace-strings-with-other-strings",level:3},{value:"Match regex",id:"match-regex",level:3},{value:"Split str column",id:"split-str-column",level:3},{value:"Cleanup",id:"cleanup",level:3},{value:"Dealing with timestamps",id:"dealing-with-timestamps",level:2},{value:"Cleanup",id:"cleanup-1",level:3},{value:"Dealing with timestamps",id:"dealing-with-timestamps-1",level:2},{value:"Convert timestamp",id:"convert-timestamp",level:3},{value:"Using timestamp to filter",id:"using-timestamp-to-filter",level:3},{value:"Sort based on time",id:"sort-based-on-time",level:3}];function a(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'\nprint(sys.executable)\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = "all"\nInteractiveShell.colors = "Linux"\nInteractiveShell.separate_in = 0\n\nimport matplotlib.pyplot as plte \nimport os, sys\n\ntags = pd.read_csv(\'tags.csv\')\n'})}),"\n",(0,t.jsx)(s.p,{children:"/Users/joshchiu/repos/csjoshc.github.io/.venv/bin/python"}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.p,{children:"Cell In[2], line 13\n9 import matplotlib.pyplot as plte\n10 import os, sys\n---\x3e 13 tags = pd.read_csv('tags.csv')"}),"\n",(0,t.jsx)(s.p,{children:"File ~/repos/csjoshc.github.io/.venv/lib/python3.11/site-packages/pandas/io/parsers/readers.py:1026, in read_csv(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\n1013 kwds_defaults = _refine_defaults_read(\n1014     dialect,\n1015     delimiter,\n(...)   1022     dtype_backend=dtype_backend,\n1023 )\n1024 kwds.update(kwds_defaults)\n-> 1026 return _read(filepath_or_buffer, kwds)"}),"\n",(0,t.jsx)(s.p,{children:'File ~/repos/csjoshc.github.io/.venv/lib/python3.11/site-packages/pandas/io/parsers/readers.py:620, in _read(filepath_or_buffer, kwds)\n617 _validate_names(kwds.get("names", None))\n619 # Create the parser.\n--\x3e 620 parser = TextFileReader(filepath_or_buffer, **kwds)\n622 if chunksize or iterator:\n623     return parser'}),"\n",(0,t.jsxs)(s.p,{children:["File ~/repos/csjoshc.github.io/.venv/lib/python3.11/site-packages/pandas/io/parsers/readers.py:1620, in TextFileReader.",(0,t.jsx)(s.strong,{children:"init"}),'(self, f, engine, **kwds)\n1617     self.options["has_index_names"] = kwds["has_index_names"]\n1619 self.handles: IOHandles | None = None\n-> 1620 self._engine = self._make_engine(f, self.engine)']}),"\n",(0,t.jsx)(s.p,{children:'File ~/repos/csjoshc.github.io/.venv/lib/python3.11/site-packages/pandas/io/parsers/readers.py:1880, in TextFileReader._make_engine(self, f, engine)\n1878     if "b" not in mode:\n1879         mode += "b"\n-> 1880 self.handles = get_handle(\n1881     f,\n1882     mode,\n1883     encoding=self.options.get("encoding", None),\n1884     compression=self.options.get("compression", None),\n1885     memory_map=self.options.get("memory_map", False),\n1886     is_text=is_text,\n1887     errors=self.options.get("encoding_errors", "strict"),\n1888     storage_options=self.options.get("storage_options", None),\n1889 )\n1890 assert self.handles is not None\n1891 f = self.handles.handle'}),"\n",(0,t.jsx)(s.p,{children:"File ~/repos/csjoshc.github.io/.venv/lib/python3.11/site-packages/pandas/io/common.py:873, in get_handle(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\n868 elif isinstance(handle, str):\n869     # Check whether the filename is to be opened in binary mode.\n870     # Binary mode does not support 'encoding' and 'newline'.\n871     if ioargs.encoding and \"b\" not in ioargs.mode:\n872         # Encoding\n--\x3e 873         handle = open(\n874             handle,\n875             ioargs.mode,\n876             encoding=ioargs.encoding,\n877             errors=errors,\n878             newline=\"\",\n879         )\n880     else:\n881         # Binary mode\n882         handle = open(handle, ioargs.mode)"}),"\n",(0,t.jsx)(s.p,{children:"FileNotFoundError: [Errno 2] No such file or directory: 'tags.csv'"}),"\n",(0,t.jsx)(s.h1,{id:"dataframe-data-types---strings--timestamps",children:"Dataframe data types - strings & timestamps"}),"\n",(0,t.jsx)(s.h2,{id:"string-functions",children:"String functions"}),"\n",(0,t.jsx)(s.p,{children:"Str functions don't seem to mutate the original dataframe"}),"\n",(0,t.jsx)(s.h1,{id:"change-dir-to-the-folder-this-ipynb-file-is-in",children:"Change dir to the folder this .ipynb file is in"}),"\n",(0,t.jsx)(s.p,{children:"tags = pd.read_csv('tags.csv')"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"\n    /home/jcmint/anaconda3/envs/learningenv/bin/python\n\n# Dataframe data types - strings & timestamps\n\n## String functions\n\nStr functions don't seem to mutate the original dataframe\n\n### Splitting columns of dataframe\n\n```python\ntags['tag'].str.split(' ').head()\n"})}),"\n",(0,t.jsx)(s.p,{children:"0      [Mark, Waters]\n1        [dark, hero]\n2        [dark, hero]\n3    [noir, thriller]\n4        [dark, hero]\nName: tag, dtype: object"}),"\n",(0,t.jsx)(s.h3,{id:"testing-for-string-contents",children:"Testing for string contents"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"tags['isdark'] = tags['tag'].str.contains('dark') \ntags.head()\n"})}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{}),(0,t.jsx)(s.th,{children:"userId"}),(0,t.jsx)(s.th,{children:"movieId"}),(0,t.jsx)(s.th,{children:"tag"}),(0,t.jsx)(s.th,{children:"timestamp"}),(0,t.jsx)(s.th,{children:"isdark"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"0"}),(0,t.jsx)(s.td,{children:"18"}),(0,t.jsx)(s.td,{children:"4141"}),(0,t.jsx)(s.td,{children:"Mark Waters"}),(0,t.jsx)(s.td,{children:"1240597180"}),(0,t.jsx)(s.td,{children:"False"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"1"}),(0,t.jsx)(s.td,{children:"65"}),(0,t.jsx)(s.td,{children:"208"}),(0,t.jsx)(s.td,{children:"dark hero"}),(0,t.jsx)(s.td,{children:"1368150078"}),(0,t.jsx)(s.td,{children:"True"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"2"}),(0,t.jsx)(s.td,{children:"65"}),(0,t.jsx)(s.td,{children:"353"}),(0,t.jsx)(s.td,{children:"dark hero"}),(0,t.jsx)(s.td,{children:"1368150079"}),(0,t.jsx)(s.td,{children:"True"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"3"}),(0,t.jsx)(s.td,{children:"65"}),(0,t.jsx)(s.td,{children:"521"}),(0,t.jsx)(s.td,{children:"noir thriller"}),(0,t.jsx)(s.td,{children:"1368149983"}),(0,t.jsx)(s.td,{children:"False"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"4"}),(0,t.jsx)(s.td,{children:"65"}),(0,t.jsx)(s.td,{children:"592"}),(0,t.jsx)(s.td,{children:"dark hero"}),(0,t.jsx)(s.td,{children:"1368150078"}),(0,t.jsx)(s.td,{children:"True"})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"replace-strings-with-other-strings",children:"Replace strings with other strings"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"tags['light tag'] = tags['tag'].str.replace('dark', 'light').head()\ntags.head()\n"})}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{}),(0,t.jsx)(s.th,{children:"userId"}),(0,t.jsx)(s.th,{children:"movieId"}),(0,t.jsx)(s.th,{children:"tag"}),(0,t.jsx)(s.th,{children:"timestamp"}),(0,t.jsx)(s.th,{children:"isdark"}),(0,t.jsx)(s.th,{children:"light tag"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"0"}),(0,t.jsx)(s.td,{children:"18"}),(0,t.jsx)(s.td,{children:"4141"}),(0,t.jsx)(s.td,{children:"Mark Waters"}),(0,t.jsx)(s.td,{children:"1240597180"}),(0,t.jsx)(s.td,{children:"False"}),(0,t.jsx)(s.td,{children:"Mark Waters"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"1"}),(0,t.jsx)(s.td,{children:"65"}),(0,t.jsx)(s.td,{children:"208"}),(0,t.jsx)(s.td,{children:"dark hero"}),(0,t.jsx)(s.td,{children:"1368150078"}),(0,t.jsx)(s.td,{children:"True"}),(0,t.jsx)(s.td,{children:"light hero"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"2"}),(0,t.jsx)(s.td,{children:"65"}),(0,t.jsx)(s.td,{children:"353"}),(0,t.jsx)(s.td,{children:"dark hero"}),(0,t.jsx)(s.td,{children:"1368150079"}),(0,t.jsx)(s.td,{children:"True"}),(0,t.jsx)(s.td,{children:"light hero"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"3"}),(0,t.jsx)(s.td,{children:"65"}),(0,t.jsx)(s.td,{children:"521"}),(0,t.jsx)(s.td,{children:"noir thriller"}),(0,t.jsx)(s.td,{children:"1368149983"}),(0,t.jsx)(s.td,{children:"False"}),(0,t.jsx)(s.td,{children:"noir thriller"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"4"}),(0,t.jsx)(s.td,{children:"65"}),(0,t.jsx)(s.td,{children:"592"}),(0,t.jsx)(s.td,{children:"dark hero"}),(0,t.jsx)(s.td,{children:"1368150078"}),(0,t.jsx)(s.td,{children:"True"}),(0,t.jsx)(s.td,{children:"light hero"})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"match-regex",children:"Match regex"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Code:"})," ",(0,t.jsx)(s.code,{children:"df['col1'].str.extract('*')"})]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"tags['first tag'] = tags['tag'].str.extract('([a-zA-Z][A-Za-z])') \ntags.head()\n"})}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{}),(0,t.jsx)(s.th,{children:"userId"}),(0,t.jsx)(s.th,{children:"movieId"}),(0,t.jsx)(s.th,{children:"tag"}),(0,t.jsx)(s.th,{children:"timestamp"}),(0,t.jsx)(s.th,{children:"isdark"}),(0,t.jsx)(s.th,{children:"light tag"}),(0,t.jsx)(s.th,{children:"first tag"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"0"}),(0,t.jsx)(s.td,{children:"18"}),(0,t.jsx)(s.td,{children:"4141"}),(0,t.jsx)(s.td,{children:"Mark Waters"}),(0,t.jsx)(s.td,{children:"1240597180"}),(0,t.jsx)(s.td,{children:"False"}),(0,t.jsx)(s.td,{children:"Mark Waters"}),(0,t.jsx)(s.td,{children:"Ma"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"1"}),(0,t.jsx)(s.td,{children:"65"}),(0,t.jsx)(s.td,{children:"208"}),(0,t.jsx)(s.td,{children:"dark hero"}),(0,t.jsx)(s.td,{children:"1368150078"}),(0,t.jsx)(s.td,{children:"True"}),(0,t.jsx)(s.td,{children:"light hero"}),(0,t.jsx)(s.td,{children:"da"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"2"}),(0,t.jsx)(s.td,{children:"65"}),(0,t.jsx)(s.td,{children:"353"}),(0,t.jsx)(s.td,{children:"dark hero"}),(0,t.jsx)(s.td,{children:"1368150079"}),(0,t.jsx)(s.td,{children:"True"}),(0,t.jsx)(s.td,{children:"light hero"}),(0,t.jsx)(s.td,{children:"da"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"3"}),(0,t.jsx)(s.td,{children:"65"}),(0,t.jsx)(s.td,{children:"521"}),(0,t.jsx)(s.td,{children:"noir thriller"}),(0,t.jsx)(s.td,{children:"1368149983"}),(0,t.jsx)(s.td,{children:"False"}),(0,t.jsx)(s.td,{children:"noir thriller"}),(0,t.jsx)(s.td,{children:"no"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"4"}),(0,t.jsx)(s.td,{children:"65"}),(0,t.jsx)(s.td,{children:"592"}),(0,t.jsx)(s.td,{children:"dark hero"}),(0,t.jsx)(s.td,{children:"1368150078"}),(0,t.jsx)(s.td,{children:"True"}),(0,t.jsx)(s.td,{children:"light hero"}),(0,t.jsx)(s.td,{children:"da"})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"split-str-column",children:"Split str column"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"output = tags['light tag'].str.split(' ', expand =True) \noutput.head()\n"})}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{}),(0,t.jsx)(s.th,{children:"0"}),(0,t.jsx)(s.th,{children:"1"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"0"}),(0,t.jsx)(s.td,{children:"Mark"}),(0,t.jsx)(s.td,{children:"Waters"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"1"}),(0,t.jsx)(s.td,{children:"light"}),(0,t.jsx)(s.td,{children:"hero"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"2"}),(0,t.jsx)(s.td,{children:"light"}),(0,t.jsx)(s.td,{children:"hero"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"3"}),(0,t.jsx)(s.td,{children:"noir"}),(0,t.jsx)(s.td,{children:"thriller"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"4"}),(0,t.jsx)(s.td,{children:"light"}),(0,t.jsx)(s.td,{children:"hero"})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"cleanup",children:"Cleanup"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"tags.drop(tags.columns[4:7], axis = 1, inplace=True)\ntags.head()\n"})}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{}),(0,t.jsx)(s.th,{children:"userId"}),(0,t.jsx)(s.th,{children:"movieId"}),(0,t.jsx)(s.th,{children:"tag"}),(0,t.jsx)(s.th,{children:"timestamp"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"0"}),(0,t.jsx)(s.td,{children:"18"}),(0,t.jsx)(s.td,{children:"4141"}),(0,t.jsx)(s.td,{children:"Mark Waters"}),(0,t.jsx)(s.td,{children:"1240597180"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"1"}),(0,t.jsx)(s.td,{children:"65"}),(0,t.jsx)(s.td,{children:"208"}),(0,t.jsx)(s.td,{children:"dark hero"}),(0,t.jsx)(s.td,{children:"1368150078"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"2"}),(0,t.jsx)(s.td,{children:"65"}),(0,t.jsx)(s.td,{children:"353"}),(0,t.jsx)(s.td,{children:"dark hero"}),(0,t.jsx)(s.td,{children:"1368150079"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"3"}),(0,t.jsx)(s.td,{children:"65"}),(0,t.jsx)(s.td,{children:"521"}),(0,t.jsx)(s.td,{children:"noir thriller"}),(0,t.jsx)(s.td,{children:"1368149983"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"4"}),(0,t.jsx)(s.td,{children:"65"}),(0,t.jsx)(s.td,{children:"592"}),(0,t.jsx)(s.td,{children:"dark hero"}),(0,t.jsx)(s.td,{children:"1368150078"})]})]})]}),"\n",(0,t.jsx)(s.h2,{id:"dealing-with-timestamps",children:"Dealing with timestamps"}),"\n",(0,t.jsx)(s.p,{children:"Need to convert UNIX POSIX timestamp to Python format before using it."}),"\n",(0,t.jsx)(s.h3,{id:"cleanup-1",children:"Cleanup"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"tags.drop(tags.columns[4:7], axis = 1, inplace=True)\ntags.head()\n"})}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{}),(0,t.jsx)(s.th,{children:"userId"}),(0,t.jsx)(s.th,{children:"movieId"}),(0,t.jsx)(s.th,{children:"tag"}),(0,t.jsx)(s.th,{children:"timestamp"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"0"}),(0,t.jsx)(s.td,{children:"18"}),(0,t.jsx)(s.td,{children:"4141"}),(0,t.jsx)(s.td,{children:"Mark Waters"}),(0,t.jsx)(s.td,{children:"1240597180"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"1"}),(0,t.jsx)(s.td,{children:"65"}),(0,t.jsx)(s.td,{children:"208"}),(0,t.jsx)(s.td,{children:"dark hero"}),(0,t.jsx)(s.td,{children:"1368150078"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"2"}),(0,t.jsx)(s.td,{children:"65"}),(0,t.jsx)(s.td,{children:"353"}),(0,t.jsx)(s.td,{children:"dark hero"}),(0,t.jsx)(s.td,{children:"1368150079"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"3"}),(0,t.jsx)(s.td,{children:"65"}),(0,t.jsx)(s.td,{children:"521"}),(0,t.jsx)(s.td,{children:"noir thriller"}),(0,t.jsx)(s.td,{children:"1368149983"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"4"}),(0,t.jsx)(s.td,{children:"65"}),(0,t.jsx)(s.td,{children:"592"}),(0,t.jsx)(s.td,{children:"dark hero"}),(0,t.jsx)(s.td,{children:"1368150078"})]})]})]}),"\n",(0,t.jsx)(s.h2,{id:"dealing-with-timestamps-1",children:"Dealing with timestamps"}),"\n",(0,t.jsx)(s.p,{children:"Need to convert UNIX POSIX timestamp to Python format before using it."}),"\n",(0,t.jsx)(s.h3,{id:"convert-timestamp",children:"Convert timestamp"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"tags['parsed time'] = pd.to_datetime(tags['timestamp'], unit='s') \ntags.head()\n"})}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{}),(0,t.jsx)(s.th,{children:"userId"}),(0,t.jsx)(s.th,{children:"movieId"}),(0,t.jsx)(s.th,{children:"tag"}),(0,t.jsx)(s.th,{children:"timestamp"}),(0,t.jsx)(s.th,{children:"parsed time"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"0"}),(0,t.jsx)(s.td,{children:"18"}),(0,t.jsx)(s.td,{children:"4141"}),(0,t.jsx)(s.td,{children:"Mark Waters"}),(0,t.jsx)(s.td,{children:"1240597180"}),(0,t.jsx)(s.td,{children:"2009-04-24 18:19:40"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"1"}),(0,t.jsx)(s.td,{children:"65"}),(0,t.jsx)(s.td,{children:"208"}),(0,t.jsx)(s.td,{children:"dark hero"}),(0,t.jsx)(s.td,{children:"1368150078"}),(0,t.jsx)(s.td,{children:"2013-05-10 01:41:18"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"2"}),(0,t.jsx)(s.td,{children:"65"}),(0,t.jsx)(s.td,{children:"353"}),(0,t.jsx)(s.td,{children:"dark hero"}),(0,t.jsx)(s.td,{children:"1368150079"}),(0,t.jsx)(s.td,{children:"2013-05-10 01:41:19"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"3"}),(0,t.jsx)(s.td,{children:"65"}),(0,t.jsx)(s.td,{children:"521"}),(0,t.jsx)(s.td,{children:"noir thriller"}),(0,t.jsx)(s.td,{children:"1368149983"}),(0,t.jsx)(s.td,{children:"2013-05-10 01:39:43"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"4"}),(0,t.jsx)(s.td,{children:"65"}),(0,t.jsx)(s.td,{children:"592"}),(0,t.jsx)(s.td,{children:"dark hero"}),(0,t.jsx)(s.td,{children:"1368150078"}),(0,t.jsx)(s.td,{children:"2013-05-10 01:41:18"})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"using-timestamp-to-filter",children:"Using timestamp to filter"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"tags['After Dec 31 2013'] = tags['parsed time'] > '2013-12-31' \ntags.head()\n"})}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{}),(0,t.jsx)(s.th,{children:"userId"}),(0,t.jsx)(s.th,{children:"movieId"}),(0,t.jsx)(s.th,{children:"tag"}),(0,t.jsx)(s.th,{children:"timestamp"}),(0,t.jsx)(s.th,{children:"parsed time"}),(0,t.jsx)(s.th,{children:"After Dec 31 2013"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"0"}),(0,t.jsx)(s.td,{children:"18"}),(0,t.jsx)(s.td,{children:"4141"}),(0,t.jsx)(s.td,{children:"Mark Waters"}),(0,t.jsx)(s.td,{children:"1240597180"}),(0,t.jsx)(s.td,{children:"2009-04-24 18:19:40"}),(0,t.jsx)(s.td,{children:"False"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"1"}),(0,t.jsx)(s.td,{children:"65"}),(0,t.jsx)(s.td,{children:"208"}),(0,t.jsx)(s.td,{children:"dark hero"}),(0,t.jsx)(s.td,{children:"1368150078"}),(0,t.jsx)(s.td,{children:"2013-05-10 01:41:18"}),(0,t.jsx)(s.td,{children:"False"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"2"}),(0,t.jsx)(s.td,{children:"65"}),(0,t.jsx)(s.td,{children:"353"}),(0,t.jsx)(s.td,{children:"dark hero"}),(0,t.jsx)(s.td,{children:"1368150079"}),(0,t.jsx)(s.td,{children:"2013-05-10 01:41:19"}),(0,t.jsx)(s.td,{children:"False"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"3"}),(0,t.jsx)(s.td,{children:"65"}),(0,t.jsx)(s.td,{children:"521"}),(0,t.jsx)(s.td,{children:"noir thriller"}),(0,t.jsx)(s.td,{children:"1368149983"}),(0,t.jsx)(s.td,{children:"2013-05-10 01:39:43"}),(0,t.jsx)(s.td,{children:"False"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"4"}),(0,t.jsx)(s.td,{children:"65"}),(0,t.jsx)(s.td,{children:"592"}),(0,t.jsx)(s.td,{children:"dark hero"}),(0,t.jsx)(s.td,{children:"1368150078"}),(0,t.jsx)(s.td,{children:"2013-05-10 01:41:18"}),(0,t.jsx)(s.td,{children:"False"})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"sort-based-on-time",children:"Sort based on time"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.code,{children:"df.sort_values(by ='col1', ascending = False)"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"tags = tags.sort_values(by = 'parsed time', ascending =False) \ntags.head()\n"})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.p,{children:"Cell In[2], line 1\n----\x3e 1 tags = tags.sort_values(by = 'parsed time', ascending =False)\n2 tags.head()"}),"\n",(0,t.jsx)(s.p,{children:"NameError: name 'tags' is not defined"})]})}function x(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>l});var d=n(6540);const t={},r=d.createContext(t);function i(e){const s=d.useContext(r);return d.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),d.createElement(r.Provider,{value:s},e.children)}}}]);