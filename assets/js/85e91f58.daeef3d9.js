"use strict";(self.webpackChunkdocusaurus_temp=self.webpackChunkdocusaurus_temp||[]).push([[7478],{7970:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"Numpy","title":"Numpy","description":"/home/jcmint/anaconda3/envs/learningenv/bin/python","source":"@site/docs/3_Numpy.md","sourceDirName":".","slug":"/Numpy","permalink":"/docs/Numpy","draft":false,"unlisted":false,"editUrl":"https://github.com/csjoshc/csjoshc.github.io/tree/main/docs/3_Numpy.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{}}');var s=a(4848),i=a(8453);const t={},o="Numpy",l={},d=[{value:"Creating column array",id:"creating-column-array",level:2},{value:"Boolean indexing* Use conditional indexing to access and permute arrays",id:"boolean-indexing-use-conditional-indexing-to-access-and-permute-arrays",level:2},{value:"Multiple conditionals and assigning values where <strong>True</strong>",id:"multiple-conditionals-and-assigning-values-where-true",level:3},{value:"Multiple conditionals and assigning values where <strong>True</strong>",id:"multiple-conditionals-and-assigning-values-where-true-1",level:3},{value:"Multiple conditionals and assigning values where <strong>True</strong>",id:"multiple-conditionals-and-assigning-values-where-true-2",level:3},{value:"Assigning new values using logical filter",id:"assigning-new-values-using-logical-filter",level:3},{value:"np.array data types",id:"nparray-data-types",level:2},{value:"Get a sequence within a range by a certain step",id:"get-a-sequence-within-a-range-by-a-certain-step",level:3},{value:"Filter values from one of two matrices If true, grab from the first matrix, else grab from second",id:"filter-values-from-one-of-two-matrices-if-true-grab-from-the-first-matrix-else-grab-from-second",level:3},{value:"np statistics and set operations - array. <code>min(), max() ,mean(), sum(), median()</code>For these functions, you can specify axis = 0 or 1 to get values by column or row",id:"np-statistics-and-set-operations---array-min-max-mean-sum-medianfor-these-functions-you-can-specify-axis--0-or-1-to-get-values-by-column-or-row",level:2},{value:"Sorting Arrays and finding uniques - <strong>array.sort(), np.unique(array)</strong>",id:"sorting-arrays-and-finding-uniques---arraysort-npuniquearray",level:2},{value:"Filter values from one of two matrices",id:"filter-values-from-one-of-two-matrices",level:3},{value:"np statistics and set operations",id:"np-statistics-and-set-operations",level:2},{value:"Sorting Arrays and finding uniques - <strong>array.sort(), np.unique(array)</strong>",id:"sorting-arrays-and-finding-uniques---arraysort-npuniquearray-1",level:2},{value:"Set operations on arrays",id:"set-operations-on-arrays",level:2},{value:"<code>intersect1d</code>Values that are in both",id:"intersect1dvalues-that-are-in-both",level:3},{value:"<code>setdiff1d*``[&#39;a&#39;]</code>, elements IN s1 but NOT in s2",id:"setdiff1da-elements-in-s1-but-not-in-s2",level:3},{value:"<code>in1d``[False  True  True] </code>- which elements of s1 are in s2? boolean",id:"in1dfalse--true--true---which-elements-of-s1-are-in-s2-boolean",level:3},{value:"BroadcastingPerform operations on differently sized arrays. Preset the values to be added, then spread them over another array. You can broadcast either a 1d array with appropriate dimensions in one dimension, or a scalar value.",id:"broadcastingperform-operations-on-differently-sized-arrays-preset-the-values-to-be-added-then-spread-them-over-another-array-you-can-broadcast-either-a-1d-array-with-appropriate-dimensions-in-one-dimension-or-a-scalar-value",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'\nprint(sys.executable)\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = "all"\nInteractiveShell.colors = "Linux"\nInteractiveShell.separate_in = 0\n\n'})}),"\n",(0,s.jsx)(n.p,{children:"/home/jcmint/anaconda3/envs/learningenv/bin/python"}),"\n",(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"numpy",children:"Numpy"})}),"\n",(0,s.jsxs)(n.p,{children:["Numpy contains multidimensional arrays that have built-in functions based on compiled c code* Arrays in Numpy are fixed in size, unlike Python lists which have changeable sizes* Elements must all be the same type* Well optimized and useful matrix operations* Pandas are built on top of numpy* Matrices - Rank 2 ndarrays are a key featureWhen creating an array using ",(0,s.jsx)(n.code,{children:"="})," instead of np.array, the new reference points to the same object in memory. Therefore, if either the original or copy is mutated, the other will be updated as well"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"\na1 = np.array([[0, 5, 10], [2, 4, 6]])\n# Note that the col_slice is returned as a row. These are both 1D/Rank one arrays\nrow_slice = a1[0,:]\ncol_slice = a1[:,0]\nprint(a1, row_slice, col_slice)\n"})}),"\n",(0,s.jsx)(n.p,{children:"[[ 0  5 10]\n[ 2  4  6]] [ 0  5 10] [0 2]"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"a1[0,0] = 1\nprint(a1, row_slice, col_slice)\n"})}),"\n",(0,s.jsx)(n.p,{children:"[[ 1  5 10]\n[ 2  4  6]] [ 1  5 10] [1 2]"}),"\n",(0,s.jsx)(n.p,{children:"Since the slices are 1D you can extract with just one index value"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"print(row_slice[1], col_slice[1])\n"})}),"\n",(0,s.jsx)(n.p,{children:"5 2"}),"\n",(0,s.jsx)(n.h2,{id:"creating-column-array",children:"Creating column array"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Instead of:\nlong = np.array([[1], [2], [3], [4]])\n# you can use `.T` (transposon) to easily create column array\nlong2 = np.array([[1,2,3,4]]).T\nlong2\n"})}),"\n",(0,s.jsx)(n.p,{children:"array([[1],\n[2],\n[3],\n[4]])"}),"\n",(0,s.jsx)(n.h2,{id:"boolean-indexing-use-conditional-indexing-to-access-and-permute-arrays",children:"Boolean indexing* Use conditional indexing to access and permute arrays"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"a1 = np.array([[0, 5, 10], [2, 4, 6]])\n# Creating a boolean array using `=` operator - but the boolean isn't mutated when the original is.\nsmall_num = a1 > 5\nsmall_num\n"})}),"\n",(0,s.jsx)(n.p,{children:"array([[False, False,  True],\n[False, False,  True]])"}),"\n",(0,s.jsx)(n.p,{children:"The boolean array doesn't get mutated along with the original one"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'a1[1,:] = [6, 7, 8]\nprint(a1, "\\n", small_num)\n'})}),"\n",(0,s.jsx)(n.p,{children:"[[ 0  5 10]\n[ 6  7  8]]\n[[False False  True]\n[False False  True]]"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"a1[a1 > 5]\n"})}),"\n",(0,s.jsx)(n.p,{children:"array([10,  6,  7,  8])"}),"\n",(0,s.jsxs)(n.h3,{id:"multiple-conditionals-and-assigning-values-where-true",children:["Multiple conditionals and assigning values where ",(0,s.jsx)(n.strong,{children:"True"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"print(a1)\n# Get a list of values in the arrays for which multiple conditionals are TRUE\na1[(a1 > 2) & (a1  5\nsmall_num\n"})}),"\n",(0,s.jsx)(n.p,{children:"array([[False, False,  True],\n[False, False,  True]])\nThe boolean array doesn't get mutated along with the original one"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'a1[1,:] = [6, 7, 8]\nprint(a1, "\\n", small_num)\n'})}),"\n",(0,s.jsx)(n.p,{children:"[[ 0  5 10]\n[ 6  7  8]]\n[[False False  True]\n[False False  True]]"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"a1[a1 > 5]\n"})}),"\n",(0,s.jsx)(n.p,{children:"array([10,  6,  7,  8])"}),"\n",(0,s.jsxs)(n.h3,{id:"multiple-conditionals-and-assigning-values-where-true-1",children:["Multiple conditionals and assigning values where ",(0,s.jsx)(n.strong,{children:"True"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"print(a1)\n# Get a list of values in the arrays for which multiple conditionals are TRUE\na1[(a1 > 2) & (a1  5\nsmall_num\n"})}),"\n",(0,s.jsx)(n.p,{children:"array([[False, False,  True],\n[False, False,  True]])\nThe boolean array doesn't get mutated along with the original one"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'a1[1,:] = [6, 7, 8]\nprint(a1, "\\n", small_num)\n'})}),"\n",(0,s.jsx)(n.p,{children:"[[ 0  5 10]\n[ 6  7  8]]\n[[False False  True]\n[False False  True]]"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"a1[a1 > 5]\n"})}),"\n",(0,s.jsx)(n.p,{children:"array([10,  6,  7,  8])"}),"\n",(0,s.jsxs)(n.h3,{id:"multiple-conditionals-and-assigning-values-where-true-2",children:["Multiple conditionals and assigning values where ",(0,s.jsx)(n.strong,{children:"True"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"print(a1)\n# Get a list of values in the arrays for which multiple conditionals are TRUE\na1[(a1 > 2) & (a1 < 8)]\n"})}),"\n",(0,s.jsx)(n.p,{children:"[[ 0  5 10]\n[ 6  7  8]]\narray([5, 6, 7])"}),"\n",(0,s.jsx)(n.h3,{id:"assigning-new-values-using-logical-filter",children:"Assigning new values using logical filter"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"a1[a1 % 2 == 0] += 100\na1\n"})}),"\n",(0,s.jsx)(n.p,{children:"array([[100,   5, 110],\n[106,   7, 108]])"}),"\n",(0,s.jsx)(n.h2,{id:"nparray-data-types",children:"np.array data types"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Code:"})," ",(0,s.jsx)(n.code,{children:"np.array"}),"* For matrix math, use the ",(0,s.jsx)(n.code,{children:"np.array.*"})," functions instead of generic operations (*)"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'print(ex5, "\\n", ex6)\n# Dot product (matrix product)\n# As expected, the result 18 = 2 * 4 + 2 * 5\nex5.dot(ex6)\n'})}),"\n",(0,s.jsx)(n.p,{children:"[[2 2]\n[3 3]]\n[[4 4]\n[5 5]]"}),"\n",(0,s.jsx)(n.p,{children:"array([[18, 18],\n[27, 27]])"}),"\n",(0,s.jsx)(n.h3,{id:"get-a-sequence-within-a-range-by-a-certain-step",children:"Get a sequence within a range by a certain step"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"np.arange(1, 10, 2)\n"})}),"\n",(0,s.jsx)(n.p,{children:"array([1, 3, 5, 7, 9])"}),"\n",(0,s.jsx)(n.h3,{id:"filter-values-from-one-of-two-matrices-if-true-grab-from-the-first-matrix-else-grab-from-second",children:"Filter values from one of two matrices If true, grab from the first matrix, else grab from second"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"filter = np.array([[True, False], [False, True]])\nnp.where(filter, ex5, ex6)\n"})}),"\n",(0,s.jsx)(n.p,{children:"array([[2, 4],\n[5, 3]])"}),"\n",(0,s.jsxs)(n.h2,{id:"np-statistics-and-set-operations---array-min-max-mean-sum-medianfor-these-functions-you-can-specify-axis--0-or-1-to-get-values-by-column-or-row",children:["np statistics and set operations - array. ",(0,s.jsx)(n.code,{children:"min(), max() ,mean(), sum(), median()"}),"For these functions, you can specify axis = 0 or 1 to get values by column or row"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"a1, a1.max(axis = 0), a1.max(axis = 1)\n"})}),"\n",(0,s.jsx)(n.p,{children:"(array([[100,   5, 110],\n[106,   7, 108]]), array([106,   7, 110]), array([110, 108]))"}),"\n",(0,s.jsxs)(n.h2,{id:"sorting-arrays-and-finding-uniques---arraysort-npuniquearray",children:["Sorting Arrays and finding uniques - ",(0,s.jsx)(n.strong,{children:"array.sort(), np.unique(array)"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# If needed, create a new array to avoid modifying the original array\n# Sort by both rows and columns\nsorted = np.array(a1)\nsorted.sort(axis = 0)\nprint(sorted)\nsorted.sort(axis = 1)\nprint(sorted)\nprint(np.unique(a1))\n"})}),"\n",(0,s.jsx)(n.p,{children:"[[100   5 108]\n[106   7 110]]\n[[  5 100 108]\n[  7 106 110]]"}),"\n",(0,s.jsx)(n.p,{children:"array([  5,   7, 100, 106, 108, 110])"}),"\n",(0,s.jsx)(n.h1,{id:"dot-product-matrix-product",children:"Dot product (matrix product)"}),"\n",(0,s.jsx)(n.h1,{id:"as-expected-the-result-18--2--4--2--5",children:"As expected, the result 18 = 2 * 4 + 2 * 5"}),"\n",(0,s.jsx)(n.p,{children:"ex5.dot(ex6)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"[[2 2]\n[3 3]]\n[[4 4]\n[5 5]]\narray([[18, 18],\n[27, 27]])\n### Get a sequence within a range by a certain step\n```python\nnp.arange(1, 10, 2)\n"})}),"\n",(0,s.jsx)(n.p,{children:"array([1, 3, 5, 7, 9])"}),"\n",(0,s.jsx)(n.h3,{id:"filter-values-from-one-of-two-matrices",children:"Filter values from one of two matrices"}),"\n",(0,s.jsx)(n.p,{children:"If true, grab from the first matrix, else grab from second"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"filter = np.array([[True, False], [False, True]])\nnp.where(filter, ex5, ex6)\n"})}),"\n",(0,s.jsx)(n.p,{children:"array([[2, 4],\n[5, 3]])"}),"\n",(0,s.jsx)(n.h2,{id:"np-statistics-and-set-operations",children:"np statistics and set operations"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Code:"})," array.",(0,s.jsx)(n.code,{children:"min(), max(), mean(), sum(), median()"}),"\nFor these functions, you can specify axis = 0 or 1 to get values by column or row"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"a1, a1.max(axis = 0), a1.max(axis = 1)\n"})}),"\n",(0,s.jsx)(n.p,{children:"(array([[100,   5, 110],\n[106,   7, 108]]), array([106,   7, 110]), array([110, 108]))"}),"\n",(0,s.jsxs)(n.h2,{id:"sorting-arrays-and-finding-uniques---arraysort-npuniquearray-1",children:["Sorting Arrays and finding uniques - ",(0,s.jsx)(n.strong,{children:"array.sort(), np.unique(array)"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# If needed, create a new array to avoid modifying the original array\n# Sort by both rows and columns\nsorted = np.array(a1)\nsorted.sort(axis = 0)\nprint(sorted)\nsorted.sort(axis = 1)\nprint(sorted)\nprint(np.unique(a1))\n"})}),"\n",(0,s.jsx)(n.p,{children:"[[100   5 108]\n[106   7 110]]\n[[  5 100 108]\n[  7 106 110]]\narray([  5,   7, 100, 106, 108, 110])"}),"\n",(0,s.jsx)(n.h2,{id:"set-operations-on-arrays",children:"Set operations on arrays"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"s1 = np.array(['a', 'b', 'c'])\ns2 = np.array(['b', 'c', 'd'])\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"intersect1dvalues-that-are-in-both",children:[(0,s.jsx)(n.code,{children:"intersect1d"}),"Values that are in both"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"np.intersect1d(s1, s2)\n"})}),"\n",(0,s.jsx)(n.p,{children:"array(['b', 'c'])"}),"\n",(0,s.jsxs)(n.h3,{id:"setdiff1da-elements-in-s1-but-not-in-s2",children:[(0,s.jsx)(n.code,{children:"setdiff1d*``['a']"}),", elements IN s1 but NOT in s2"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"np.setdiff1d(s1, s2)\n"})}),"\n",(0,s.jsx)(n.p,{children:"array(['a'])"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"['d']"}),", elements IN s2 but NOT in s1"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"np.setdiff1d(s1, s2)\n"})}),"\n",(0,s.jsx)(n.p,{children:"array(['a'])"}),"\n",(0,s.jsxs)(n.h3,{id:"in1dfalse--true--true---which-elements-of-s1-are-in-s2-boolean",children:[(0,s.jsx)(n.code,{children:"in1d``[False  True  True] "}),"- which elements of s1 are in s2? boolean"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"np.in1d(s1, s2)\n"})}),"\n",(0,s.jsx)(n.p,{children:"array([False,  True,  True])"}),"\n",(0,s.jsx)(n.h2,{id:"broadcastingperform-operations-on-differently-sized-arrays-preset-the-values-to-be-added-then-spread-them-over-another-array-you-can-broadcast-either-a-1d-array-with-appropriate-dimensions-in-one-dimension-or-a-scalar-value",children:"BroadcastingPerform operations on differently sized arrays. Preset the values to be added, then spread them over another array. You can broadcast either a 1d array with appropriate dimensions in one dimension, or a scalar value."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"start = np.zeros((4,3)) # zeros array 4 rows 3 columns\nadd_rows = np.array([1, 0, 2])\ny = start + add_rows\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"array([[1., 0., 2.],\n[1., 0., 2.],\n[1., 0., 2.],\n[1., 0., 2.]])"})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>o});var r=a(6540);const s={},i=r.createContext(s);function t(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);