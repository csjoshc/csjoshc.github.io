"use strict";(self.webpackChunkdocusaurus_temp=self.webpackChunkdocusaurus_temp||[]).push([[8863],{3098:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Pandas","title":"Pandas - Introduction","description":"- Merge and join data sets","source":"@site/docs/4_Pandas.md","sourceDirName":".","slug":"/Pandas","permalink":"/docs/Pandas","draft":false,"unlisted":false,"editUrl":"https://github.com/csjoshc/csjoshc.github.io/tree/main/docs/4_Pandas.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{}}');var r=s(4848),t=s(8453);const a={},l="Pandas - Introduction",d={},c=[{value:"Accessing values by key or index",id:"accessing-values-by-key-or-index",level:2},{value:"Listing keys",id:"listing-keys",level:3},{value:"Access value by key or Index",id:"access-value-by-key-or-index",level:3},{value:"Test if key is in Series",id:"test-if-key-is-in-series",level:3},{value:"Multiply numbers and strings",id:"multiply-numbers-and-strings",level:3}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"pandas---introduction",children:"Pandas - Introduction"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Merge and join data sets"}),"\n",(0,r.jsx)(n.li,{children:"Better visualizations"}),"\n",(0,r.jsx)(n.li,{children:"Exploratory data analysis"}),"\n",(0,r.jsx)(n.li,{children:"Time series data"}),"\n",(0,r.jsx)(n.li,{children:"Data pivoting, sorting, cleaning"}),"\n"]}),"\n",(0,r.jsx)(n.h1,{id:"series",children:"Series"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"One dimensional labeled array"}),"\n",(0,r.jsx)(n.li,{children:"Similar to fixed size dictionary"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"\nser = pd.Series([1, 2, 3, \"letter\", \"word\"],['a', 'b', 'c', 'd', 'e'])\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"a         1\nb         2\nc         3"}),"\n",(0,r.jsx)(n.p,{children:"dtype: object"}),"\n",(0,r.jsx)(n.h2,{id:"accessing-values-by-key-or-index",children:"Accessing values by key or index"}),"\n",(0,r.jsx)(n.h3,{id:"listing-keys",children:"Listing keys"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"ser.index\n"})}),"\n",(0,r.jsx)(n.p,{children:"Index(['a', 'b', 'c', 'd', 'e'], dtype='object')"}),"\n",(0,r.jsx)(n.h3,{id:"access-value-by-key-or-index",children:"Access value by key or Index"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"print(ser.loc['a'], ser['a']) #key\nprint(ser.iloc[2]) #Index\n"})}),"\n",(0,r.jsx)(n.p,{children:"1 1\n3"}),"\n",(0,r.jsx)(n.h3,{id:"test-if-key-is-in-series",children:"Test if key is in Series"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"1 in ser, 'a' in ser # test if key is in Series\n"})}),"\n",(0,r.jsx)(n.p,{children:"(False, True)"}),"\n",(0,r.jsx)(n.h3,{id:"multiply-numbers-and-strings",children:"Multiply numbers and strings"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"ser*2 # Multiply\n"})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var i=s(6540);const r={},t=i.createContext(r);function a(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);