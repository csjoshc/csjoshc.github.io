"use strict";(self.webpackChunkdocusaurus_temp=self.webpackChunkdocusaurus_temp||[]).push([[2315],{7056:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"Python/IntroCompSciPython/unit7","title":"unit7","description":"\ud83c\udfe0 Home","source":"@site/docs/Python/IntroCompSciPython/unit7.md","sourceDirName":"Python/IntroCompSciPython","slug":"/Python/IntroCompSciPython/unit7","permalink":"/docs/Python/IntroCompSciPython/unit7","draft":false,"unlisted":false,"editUrl":"https://github.com/csjoshc/csjoshc.github.io/tree/main/docs/Python/IntroCompSciPython/unit7.md","tags":[],"version":"current","frontMatter":{}}');var i=t(4848),o=t(8453);const r={},c="Testing and Debugging",a={},l=[{value:"Types of Testing",id:"types-of-testing",level:2},{value:"Black box testing",id:"black-box-testing",level:2},{value:"Glass box",id:"glass-box",level:2},{value:"Bugs",id:"bugs",level:2}];function d(e){const n={h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"\ud83c\udfe0 Home\n\ud83d\udc0d Python"}),"\n",(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"testing-and-debugging",children:"Testing and Debugging"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Write function specifications"}),"\n",(0,i.jsxs)(n.li,{children:["Modularize programs","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Each part can be tested in turn"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Check input & output conditions w/ assertions"}),"\n",(0,i.jsx)(n.li,{children:"Be aware of edge cases, and compare input output pairs"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"types-of-testing",children:"Types of Testing"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Unit testing - validate each function by testing separately"}),"\n",(0,i.jsx)(n.li,{children:"Regression testing - test for bugs that may be been introduced or reintroduced"}),"\n",(0,i.jsx)(n.li,{children:"Integration testing - for the overall program"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"black-box-testing",children:"Black box testing"}),"\n",(0,i.jsx)(n.p,{children:"Reason through the paths in the specification, separate from the code, focusing on edge cases."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If it is on lists, consider an empty list, a one element list, and so on."}),"\n",(0,i.jsx)(n.li,{children:"If it is on numbers, consider 0, perfect squares, numbers less than 1, negative numbers, extremes, and so on."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"glass-box",children:"Glass box"}),"\n",(0,i.jsx)(n.p,{children:"Base test cases on paths through the code, aiming to be path complete by running though all potential paths. Make sure to hit every branch in a branching if tree, enter for and while loops and test exit conditions."}),"\n",(0,i.jsx)(n.h2,{id:"bugs",children:"Bugs"}),"\n",(0,i.jsx)(n.p,{children:"Overt - obvious case with crashing or doesn't stop\nCovert - code runs but return not correct\nPersistent - occurs predictably\nIntermittent - occurs sometimes\nGood defensive programming will ensure that bugs will be overt and persistent. Intermittent and Covert bugs are worse.\nAdd in print statements liberally to isolate where things might be wrong."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var s=t(6540);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);