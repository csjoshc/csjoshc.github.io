"use strict";(self.webpackChunkdocusaurus_temp=self.webpackChunkdocusaurus_temp||[]).push([[8628],{1392:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"General/CS50x2019/flask","title":"flask","description":"\ud83c\udfe0 Home","source":"@site/docs/General/CS50x2019/flask.md","sourceDirName":"General/CS50x2019","slug":"/General/CS50x2019/flask","permalink":"/docs/General/CS50x2019/flask","draft":false,"unlisted":false,"editUrl":"https://github.com/csjoshc/csjoshc.github.io/tree/main/docs/General/CS50x2019/flask.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"python","permalink":"/docs/General/CS50x2019/python"},"next":{"title":"webdev2019","permalink":"/docs/General/webdev2019"}}');var s=t(4848),r=t(8453);const i={},o="MVC",l={},d=[];function c(e){const n={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"\ud83c\udfe0 Home\n\ud83d\udcda General"}),"\n",(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"mvc",children:"MVC"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Controller - business and functional logic (Python)"}),"\n",(0,s.jsx)(n.li,{children:"View - aesthetics that is user-facing"}),"\n",(0,s.jsx)(n.li,{children:"Model - a database that handles requests"}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"frameworks",children:"Frameworks"}),"\n",(0,s.jsxs)(n.p,{children:["Frameworks are a way to have a web app dynamically generate content. This would be instead of using a BaseHTTPRequestHandler and writing HTML through Python line by line, such as adding ``, ",(0,s.jsx)(n.code,{children:"text"})," tags and so on. Also necessary is setting the server_address as ",(0,s.jsx)(n.code,{children:'("0.0.0.0", 8080)'}),". Flask is an example of such a framework. It abstracts away the line-by-line."]}),"\n",(0,s.jsx)(n.h1,{id:"webapp-example",children:"webapp example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from flask import Flask, render_template, request, jsonify\n# turn this .py file into a webapp\napp = Flask(__name__)\nnamelist=[] # persistent data structure - before db\n# listen for a forward slash\n@app.route("/")\n# call the following when a user requests \n# the forward slash (e.g. the root dir)\ndef index():\n    return "hello world"\n'})}),"\n",(0,s.jsx)(n.p,{children:"Then, on the command line you just use the following lines. The first two are required only the first time the application is run. The below is for Linux:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"export FLASK_APP=application.py\nexport FLASK_DEBUG=1\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"Alternatively, on windows it would be"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"set FLASK_APP=application.py\nset FLASK_DEBUG=1\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"Alternative - the index.md is in a /templates folder by convention."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"\n        hello {{ name }}\n        //post will send info \n\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def index(): \n    name = request.args.get("name", "default_name") # default if none\n    # this comes from the ?name=myname in the url\n    return render_template("index.md", name=name)\n'})}),"\n",(0,s.jsx)(n.p,{children:"Then, in the browser you would append a ?name=myname to the url to simulate a GET request - and this would dynamically update the website to use that name.\nFor other requests, such as the submission, we can implement separate request listeners. You can also set methods to allow both GET and POST, and include a if switch in the associated method to handle the page load or submission, respectively."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'@app.route("/nextpage", methods=["POST"])\ndef nextpage_func():\n    # what to do with a name submission? this comes from the form submission\n    name = request.form.get("name")\n    if not name:\n        return "failure"\n    namelist.append(name)\n    return render_template("good_job.md")\n'})}),"\n",(0,s.jsx)(n.h1,{id:"html-templates",children:"HTML templates"}),"\n",(0,s.jsxs)(n.p,{children:["Flask also allows placeholders for chunks of html. In a ",(0,s.jsx)(n.code,{children:"layouts.md"})," file inside a templates directory:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"\n{% raw %}{% block body %}{% endblock %}{% endraw %}\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Then, in other HTML files that are based off this layouts file, we can get rid of the doctype, html/lang and header tags. We can just include the HTML that is ",(0,s.jsx)(n.strong,{children:"specific"}),' to the particular page. This might be an exampel of "good_job.md" that I used above:']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'{% raw %}\n{% extends "layout.md" %}\n{% block body %}\n    Good job!\n    // unique stuff here\n{% endblock %}\n{% endraw %}\n'})}),"\n",(0,s.jsx)(n.h1,{id:"displaying-persistent-data",children:"Displaying persistent data"}),"\n",(0,s.jsx)(n.p,{children:"Now that we have a namelist that gets appended to with each submission, we can also have a page dynamically updated with that list. Update the nextpage_func() to redirect to another page and add another function to handle the generating of that redirected page:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'@app.route("/nextpage", methods=["POST"])\ndef nextpage_func():\n    # what to do with a name submission? this comes from the form submission\n    name = request.form.get("name")\n    if not name:\n        return "failure"\n    namelist.append(name)\n    # redirect to the names.md page using the route\n    return redirect("/displaynames")\n@app.route("/displaynames")\ndef enterednames_func():\n    return render_template("names.md", namelist=namelist)\n'})}),"\n",(0,s.jsx)(n.p,{children:"Then, in names.md in templates directory:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'{% raw %}\n{% extends "layout.md" %}\n{% block body %}\n     //list \n        {% for name in namelist %}\n            {{ name }}\n{% endblock %}\n{% endraw %}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["You can also set up the entered_names() function to save the file at the same time the page loads, and to display a link to the file as a href as a download link.\n",(0,s.jsx)(n.code,{children:"Download"})]}),"\n",(0,s.jsx)(n.h1,{id:"javascript-error-checking",children:"Javascript error checking"}),"\n",(0,s.jsx)(n.p,{children:"For checking user input, it would be good to check it on the client side."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"\ndocument.querySelector('form').onsubmit = function(){\n    if(!document.querySelector('input').value){\n        alert('You must enter a name');\n        return false;\n    }\n    return true;\n}\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"For fancier checking, you can use bootstrap to check user input without generating alert popups."}),"\n",(0,s.jsx)(n.h1,{id:"jquery",children:"jQuery"}),"\n",(0,s.jsxs)(n.p,{children:["jQuery can enable calling a function using ",(0,s.jsx)(n.code,{children:"$"})," notation with a ",(0,s.jsx)(n.code,{children:".get()"})," function to load snippets of HTML after a page is already loaded. Under an input field, reactive output can be shown using a javascript snippet. This changes the contents inside the `` tags in reaction to user input"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"\n    let input = document.querySelector(\"input\");\n    input.onkeyup = function(){\n        $.get('/search?q=' + input.value, function(data) {\n            document.querySelector('ul').innerHTML=data;\n        });\n    };\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"On the server side there is a app route for the jQuery script that returns a JSON of the matching entries."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'@app.route("/search")\ndef search():\n    q = request.args.get("q")\n    words = [w for w in words if q and w.startswith(q)]\n    return jsonify(words)\n'})}),"\n",(0,s.jsx)(n.p,{children:"Finally, its possible to replace server side Python with JavaScript and implement lookup using a .js array loaded into the browser."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"\n    let input = document.querySelector('input');\n    input.onkeyup = function() {\n        let html = '';\n        if (input.value) {\n            for (word of WORDS) {\n                if (word.startsWith(input.value)) {\n                    html += '' + word + '';\n                }\n            }\n        }\n        document.querySelector('ul').innerHTML = html;\n    };\n\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(6540);const s={},r=a.createContext(s);function i(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);